<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>React语法学习</title>
    <link href="/2024/11/28/React%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <url>/2024/11/28/React%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="React语法学习"><a href="#React语法学习" class="headerlink" title="React语法学习"></a>React语法学习</h1><h2 id="类组件与函数组件"><a href="#类组件与函数组件" class="headerlink" title="类组件与函数组件"></a>类组件与函数组件</h2><h3 id="1-类组件"><a href="#1-类组件" class="headerlink" title="1.类组件"></a>1.类组件</h3><p>在<a href="https://so.csdn.net/so/search?q=React&spm=1001.2101.3001.7020">React</a>中，类组件就是基于ES6语法，通过<strong>继承</strong> <code>React.component</code> 得到的组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-comment">// 初始化类组件的 state</span><br>  state = &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;111&quot;</span><br>  &#125;;<br>  <span class="hljs-comment">// 编写生命周期方法 didMount</span><br>  <span class="hljs-title function_">componentDidMount</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 省略业务逻辑</span><br>  &#125;<br>  <span class="hljs-comment">// 编写自定义的实例方法</span><br>  changeText = <span class="hljs-function">(<span class="hljs-params">newText</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 更新 state</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>      <span class="hljs-attr">text</span>: newText<br>    &#125;);<br>  &#125;;<br>  <span class="hljs-comment">// 编写生命周期方法 render</span><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;demoClass&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;this.state.text&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.changeText(222)&#125;&gt;点我修改<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-函数组件"><a href="#2-函数组件" class="headerlink" title="2.函数组件"></a>2.函数组件</h3><p>在函数组件也称为<strong>无状态组件</strong>，顾名思义就是以函数形态存在的 React 组件。</p><blockquote><p>在<code>hooks</code>出现之前，react 中的函数组件通常<strong>只考虑负责UI的渲染，没有自身的状态，没有业务逻辑代码</strong>，是一个<strong>纯函数</strong>。</p></blockquote><p>下面这个函数组件就是一个纯函数，它的输出只由参数props决定，不受其他任何因素影响。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">DemoFunction</span>(<span class="hljs-params">props</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123; text &#125; = props<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;demoFunction&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;`function 组件所接收到的来自外界的文本内容是：[$&#123;text&#125;]`&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这种函数组件一旦我们需要给组件加状态，那就只能将组件重写为类组件，因为<strong>函数组件没有实例，没有生命周期</strong>。<br>所以我们说在 <code>hook</code> 之前的 函数组件和类组件最大的区别就是 <strong>状态的有无。</strong></p><h4 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h4><p>React Hooks 是从 React 16.8 版本推出的新特性，目的是解决 React 的状态共享以及组件生命周期管理混乱的问题。 React Hooks 的出现标志着，React 不会再存在无状态组件的情况，React 将只有类组件和函数组件的概念。</p><p>hooks为函数组件提供了状态，也支持在函数组件中进行数据获取、订阅事件解绑事件等等。</p><p>下面先介绍几个最基本的hook作为基础知识。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>软件安全复习笔记</title>
    <link href="/2024/11/13/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8/"/>
    <url>/2024/11/13/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="软件安全"><a href="#软件安全" class="headerlink" title="软件安全"></a>软件安全</h1><p>软件安全技术（机械工业出版社）：有电子版</p><ul><li>上机实习题：分析病毒、制作攻击、5道题（50分）</li><li>期末考试：</li></ul><h2 id="一、软件安全概述"><a href="#一、软件安全概述" class="headerlink" title="一、软件安全概述"></a>一、软件安全概述</h2><p>软件的定义：<strong>计算机程序、规则和可能相关的文档</strong>。</p><p><strong>软件是程序、数据和文档的集合体</strong>。</p><p>零日漏洞：零日漏洞（Zero-day vulnerability），也称为零时差漏洞，是指在软件发布时就存在但尚未被发现或修补的安全漏洞，从而攻击者能够利用这种漏洞破坏计算机程序、数据及设备。</p><p><strong>零日漏洞并不是指软件发布后被立刻发现的漏洞。</strong></p><p>利用零日漏洞开发攻击工具进行的攻击称为<strong>零日攻击</strong>。</p><p>错误认识：</p><ol><li>应对安全威胁的主要手段是密码技术，是添置边界防护等各种安全设备。</li><li>不值得在关注软件安全，降低糟糕的软件开发、集成和部署带来的风险上花费成本。</li></ol><p>安全漏洞是软件产生安全问题的根源，漏洞发现是软件安全的基础工作，软件安全体系的建立是以漏洞为核心展开的，<strong>对漏洞的掌控能力</strong>是衡量一个国家信息安全水平的重要因素。</p><p>软件安全开发的最佳实践是采用从软件开发之初就不允许漏洞发生的方式，在软件开发的各个环节尽可能消除漏洞。</p><p>软件面临的安全威胁分为3大类：<strong>软件自身的安全（软件漏洞）</strong>、<strong>恶意代码</strong>以及<strong>软件侵权</strong>。</p><ol><li>软件漏洞通常被认为是软件生命周期中与安全相关的设计错误、编码缺陷及运行故障等。<ul><li>软件漏洞可能会造成软件在运行过程中出现错误结果或运行不稳定、崩溃等现象，甚至引起死机等情况。</li><li>软件漏洞会被黑客发现、利用，进而实施窃取隐私信息、甚至破坏系统等攻击行为。</li></ul></li><li>恶意代码是在未被授权的情况下，以破坏软硬件设备、窃取用户信息、干扰用户正常使用、扰乱用户心理为目的而编制的软件或代码片段。<ul><li>其实现方式可以有多种，如二进制执行文件、脚本语言代码、宏代码或是寄生在其他代码或启动扇区中的一段指令。</li><li>恶意代码包括：内核套件、僵尸网络、网络钓鱼、垃圾信息等。</li></ul></li><li>软件侵权主要指侵犯版权（著作权）。</li></ol><p>软件安全定义：软件工程与软件保障的一个方面，它提供一种系统的方法来标识、分析和追踪对危害以及具有危害性的功能（例如数据和命令）的软件缓解措施与控制。</p><p>软件的保密性：软件产品保护信息和数据的能力，以使未授权人员或系统不能阅读或修改这些信息和数据，而不拒绝授权人员或系统对它们的访问。物理隔离、信息加密、访问控制。</p><p><strong>谈谈软件安全与软件危机、软件质量和软件质量保证、软件保障、软件可靠性、应用软件系统安全、可信软件和软件定义安全等概念的区别和联系</strong></p><ol><li>软件危机，也称为软件萧条或软件困扰，是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。软件存在安全漏洞、恶意软件泛滥及软件版权保护等安全问题还只是软件危机的冰山一角。</li><li>概括地说，软件质量就是<strong>软件与明确的和隐含的定义的需求相一致的程度</strong>。具体地说，软件质量是软件符合明确叙述的功能和性能需求、文档中明确描述的开发标准，以及所有专业开发的软件都应具有的和隐含特征相一致的程度。使用质量的属性分类为4个特性：有效性、生产率、安全性和满意度。由此可见，安全性是软件质量的一个重要属性。<ul><li><strong>软件质量保证</strong>是建立一套有计划、有系统的方法，向管理层保证拟定出的标准、步骤、实践和方法能够正确地被所有项目所采用。</li></ul></li><li>通常软件保障包括软件质量、软件安全性、软件可靠性、软件验证与确认，以及独立验证与确认等学科领域。软件保障，也有译为软件确保，是用于提高软件质量的实践、技术和工具。软件保障目前包括4个核心服务，即软件的安全性、保险性、可靠性和生存性。</li><li>软件可靠性定义如下：<ul><li>在规定条件下，在规定的时间内软件不引起系统失效的概率。该概率是系统输入和系统使用的函数，也是软件中存在的缺陷的函数。系统输入将确定是否会遇到已存在的缺陷(如果缺陷存在的话)。</li><li>在规定的时间周期内所述条件下程序执行所要求的功能的能力。</li><li>由上述定义可知，软件可靠性不但与软件存在的缺陷和&#x2F;或差错有关，而且与系统输入和系统使用有关。提高软件可靠性就是要减少软件中的缺陷或错误，提高软件系统的健壮性。因此，软件可靠性通常涉及软件安全性的要求，但是软件可靠性要求不能完全取代软件安全性的要求。</li></ul></li><li>应用软件系统位于信息系统的上层，是在信息系统的硬件系统、操作系统、网络系统和数据库管理系统的支持下运行的，是构成信息系统的最重要部分，是信息系统中直接为用户提供服务的部分。</li><li><strong>可信性</strong>是在正确性、可靠性、安全性、时效性、完整性、可用性、可预测性、生存性及可控性等众多概念的基础上发展起来的一个新概念，是客观对象的诸多属性在人们心目中的一个综合反映。</li><li>SDS（软件定义安全）是适应SDN复杂网络的安全防护新思想，基本原理是将物理及虚拟的网络安全设备预期接入模式、部署方式和实现功能进行解耦，底层抽象为安全资源池里的资源，顶层统一通过软件编程的方式进行智能化、自动化的业务编排和管理，以完成相应的安全功能，从而实现一种灵活的安全防护。SDS可以分解为软件定义流量、软件定义资源和软件定义威胁模型，三个举措环环相扣，形成一个动态、闭环的工作模型。</li></ol><p><strong>信息保障</strong></p><p>信息保障与之前的信息保密、网络信息安全等阶段的概念相比，它的层次更高、涉及面更广、解决问题更多、提供的安全保障更全面，它通常是一个战略级的信息防护概念。组织可以遵循信息保障的思想建立一种有效的、经济的信息安全防护体系和方法。</p><p>核心思想是“纵深防护战略”，人、技术和操作是3个核心因素。</p><p><img src="/../../../AppData/Roaming/Typora/typora-user-images/image-20241112113316405.png" alt="image-20241112113316405"></p><p><strong>软件安全是信息安全保障的重要内容</strong>。漏洞分析是信息安全保障的基础，在信息安全保障中占据核心地位。</p><p>软件安全防护围绕漏洞消除展开。</p><ol><li>将安全保障措施置于软件发布运行之时。该方法在时间和经济上投入产出比低，信息系统的安全状况很难得到有效改善。</li><li>将安全保障的实施开始于软件发布之前，尤其强调从软件生命周期的早期阶段开始安全考虑。从系统开发需求阶段就引入安全要素要比在系统维护阶段才考虑安全问题所花费的错误修复成本要低很多。</li></ol><p>将保密性、完整性、可用性、认证性、授权、可审计性作为软件安全的核心属性。</p><p>系统安全工程可以在系统生命周期的不同阶段对安全问题提供指导，例如，对于已经发布运行的软件，可以采用系统测试、风险评估与控制等方法构建安全防御体系；而对于尚待开发的系统，也可以应用系统安全工程的思想方法来提高目标系统的安全性。</p><p>软件安全开发关注的是如何运用系统安全工程的思想，以软件的安全性为核心，将安全要素嵌入软件开发生命周期的全过程，有效减少软件产品潜在的漏洞数量或控制在一个风险可接受的水平内，提高软件系统的整体安全性。</p><p>软件安全开发方法抛弃了传统的先构建系统，然后再将安全手段应用于系统的构建模式，而且保留了采用风险管理、身份认证、访问控制、数据加密保护、入侵检测等传统安全方法，将安全作为功能需求的必要组成部分，在系统开发的需求阶段就引入安全要素，同时对软件开发全过程的每一个阶段实施风险管理，以期减少每一个开发步骤中可能出现的安全问题，最终提高软件产品的本质安全性。</p><p><strong>软件安全开发是系统安全工程应用的最高阶段，也是解决信息安全问题的最根本途径。</strong></p><h3 id="问题要点"><a href="#问题要点" class="headerlink" title="问题要点"></a>问题要点</h3><ol><li>为什么对软件安全必须给与强烈关注？</li><li>软件面临哪些安全威胁？</li><li>如何理解软件安全的概念？</li><li>软件安全研究什么？如何研究？</li></ol><h3 id="重点问题-解答"><a href="#重点问题-解答" class="headerlink" title="重点问题&amp;解答"></a>重点问题&amp;解答</h3><p><strong>1.什么是零日(0day)漏洞？什么是零日(0day)攻击？</strong></p><p>零日漏洞是指未被公开披露的软件漏洞，没有给软件的作者或厂商以时间去为漏洞打补丁或是给出解决方案建议，从而使攻击者能够利用这种漏洞破坏计算机程序、数据及设备。注意，零日漏洞并不是指软件发布后被立刻发现的漏洞。</p><p>利用零日漏洞开发攻击工具进行的攻击称为零日攻击。零日攻击所针对的漏洞由于软件厂商还没有发现或是还未提供相应的补丁，所以零日攻击的成功率高，造成的破坏大。</p><p><strong>2.为什么说面对当前的全球网络空间安全威胁，必须对软件安全给予强烈关注？</strong></p><p>当前，软件已融入人们日常生活的方方面面，已经成为国家和社会关键基础设施的重要组成部分，因此，软件的安全关乎信息系统的安全，关乎关键基础设施的安全，关乎个人安全乃至社会和国家的安全。</p><p>软件已经渗透到社会、经济与国防建设的方方面面，是信息时代所依赖的重要技术与手段，其安全直接关系到国计民生与国家安全，因此，软件安全关乎国家竞争力。</p><p><strong>3.当前，黑客为了能够有效达到窃取数据、破坏系统的目的，常常通过挖掘或是购买零日漏洞，开发针对零日漏洞的攻击工具，零日漏洞威胁实际上反映了软件系统存在的一个什么问题？</strong></p><p>软件漏洞普遍存在，零日漏洞成为主要安全威胁。</p><p>现在大多数的网络攻击利用了软件（尤其是应用软件）的漏洞。根据统计分析，绝大多数成功的攻击都是针对和利用已知的、未打补丁的软件漏洞和不安全的软件配置，而这些软件安全问题都是在软件设计和开发过程中产生的。</p><p><strong>4.根据本书的介绍，软件安全威胁可以分为哪几类？</strong></p><p>软件自身的安全（软件漏洞）、恶意代码及软件侵权</p><p><strong>5.试谈谈对软件漏洞的认识，举出软件漏洞造成危害的事件例子。</strong></p><p>软件漏洞通常被认为是软件生命周期中与安全相关的设计错误、编码缺陷及运行故障等。</p><p>一方面，软件漏洞可能会造成软件在运行过程中出现错误结果或运行不稳定、崩遗等现象，甚至引起死机等情况，举例如下：</p><ul><li>操作系统启动时发现未能驱动的硬件而导致蓝屏。</li><li>应用软件由于存在内存泄露，运行时系统内存消耗越来越大，直至最后崩溃。</li><li>网络软件由于对用户并发数考虑不周，导致用户数量超出预计，程序运行错误。</li><li>多线程软件对线程同步考虑不周，导致系统因资源死锁而死机。</li></ul><p>另一方面，软件漏洞会被黑客发现和利用，进而实施窃取隐私信息、甚至破坏系统等攻击行为，举例如下：</p><ul><li>软件使用明文存储用户口令，黑客通过数据库漏洞直接获取口令明文。</li><li>软件存在缓冲区溢出漏洞，黑客利用溢出攻击而获得远程用户权限。</li><li>软件对用户登录的安全验证强度太低，黑客假冒合法用户登录。</li><li>软件对用户的输入没有严限制，被黑客利用后执行系统删除命令，从而导致系统被破坏。</li></ul><p><strong>6.什么是恶意代码？除了传统的计算机病毒，还有哪些恶意代码类型？</strong></p><p>恶意代码（Malicious Sofiware， Malware）是在未被授权的情况下，以破坏软硬件设备、窃取用户信息、干扰用户正常使用、扰乱用户心理为目的而编制的软件或代码片段。</p><p>恶意代码包括计算机病毒（Computer Vinus）、蠕虫（Worm）、特洛伊木马（TrojanHorse）、后门 （Back Door）、内核套件（Rootkit）、间谍软件（Spyware）、恶意广告（Dishonest Adware）、流软件（Crimeware）、逻辑炸弹（Logic Bomb）、僵尸网络（Botnet）、网络钓鱼（Phishing）、恶意脚本（Malice Script）及垃圾信息（Spam）等恶意的或令人讨厌的软件及代码片段。近几年危害甚广的勒索软件（Ransomware）也屈于恶意代码范畴。</p><p><strong>7.针对软件的版权，有哪些侵权行为？</strong></p><ol><li>未经软件著作权人许可，发表、登记、修改或翻译其软件。</li><li>将他人软件作为自己的软件发表或者登记，在他人软件上署名或者更改他人软件上的署名。</li><li>未经合作者许可，将与他人合作开发的软件作为自己单独完成的软件发表或者登记。</li><li>复制或者部分复制著作权人的软件。</li><li>向公众发行、出租或通过信息网络传播著作权人的软件。</li><li>故意避开或者破坏著作权人为保护其软件著作权而采取的技术措施。</li><li>故意删除或者改变软件权利管理电子信息。</li><li>转让或者许可他人行使著作权人的软件著作权。</li></ol><p><strong>本题类似14章第2、3题，在其中选几条记住即可</strong></p><p><strong>8.谈谈对软件安全概念的理解。</strong></p><p>（软件安全是）软件工程与软件保障的一个方面，它提供一种系统的方法来标识、分析和追踪对危害以及具有危害性的功能（例如数据和命令）的软件缓解措施与控制。</p><p>软件的安全性是软件产品在指定使用环境下达到对人类、业务、软件、财产或环境造成损害的可接受的风险级别的能力。这里的风险常常由软件内部和外部质量组成中的功能性、可靠性、易用性或维护性中的缺陷所致。</p><p><strong>9.简述软件和软件工程的概念。</strong></p><ol><li>计算机程序、规则和可能相关的文档。</li><li>软件工程是指，采用工程的概念、原理、技术和方法来开发和维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术方法结合起来，从而经济地开发出高质量的软件并有效地进行维护。概括地说，软件工程是指导计算机软件开发和维护的一门工程学科，是技术与管理紧密结合形成的工程学科。</li></ol><p><strong>10.对照一般软件工程的概念，软件安全工程主要增添了哪些任务？</strong></p><ol><li>一般软件工程中的软件生命周期包括需求分析、可行性分析、总体描述、系统设计、编码、调试和测试、验收与运行、维护升级、废弃等多个阶段，每个阶段都要定义、审查并形成文档以供交流或备查。</li><li>软件安全工程增添了<strong>软件安全开发、软件安全检测及软件版权保护</strong>等任务，关注的是如何运用系统安全工程的思想，以软件的安全性为核心，将安全要素嵌入软件开发生命周期的全过程，软件安全开发方法抛弃了传统的<strong>先构建系统</strong>，<strong>再将安全手段应用于系统</strong>的构建模式，而是保留了采用风险管理、身份认证、访问控制、数据加密保护和入侵检测等传统安全方法，将安全作为功能需求的必要组成部分，在系统开发的需求阶段就引入安全要素，同时对软件开发全过程的每一个阶段实施风险管理。</li></ol><p>根据软件开发生命周期的阶段划分，软件安全开发涉及以下几个方面的内容：</p><ul><li>软件安全需求分析</li><li>软件安全设计</li><li>软件安全编码</li><li>软件安全测试</li><li>软件安全部署</li></ul><p><strong>11.谈谈软件安全与软件危机、软件质量和软件质量保证、软件保障、软件可靠性、应用软件系统安全、可信软件和软件定义安全等概念的区别和联系</strong></p><ol><li><p>软件危机，也称为软件萧条或软件困扰，是指在计算机软件的开发和维护过程中所遇到的一系列严重问题。软件存在安全漏洞、恶意软件泛滥及软件版权保护等安全问题还只是软件危机的冰山一角。</p></li><li><p>概括地说，软件质量就是<strong>软件与明确的和隐含的定义的需求相一致的程度</strong>。具体地说，软件质量是软件符合明确叙述的功能和性能需求、文档中明确描述的开发标准，以及所有专业开发的软件都应具有的和隐含特征相一致的程度。使用质量的属性分类为4个特性：有效性、生产率、安全性和满意度。由此可见，安全性是软件质量的一个重要属性。</p><ul><li><strong>软件质量保证</strong>是建立一套有计划、有系统的方法，向管理层保证拟定出的标准、步骤、实践和方法能够正确地被所有项目所采用。</li></ul></li><li><p>通常软件保障包括软件质量、软件安全性、软件可靠性、软件验证与确认，以及独立验证与确认等学科领域。软件保障，也有译为软件确保，是用于提高软件质量的实践、技术和工具。软件保障目前包括4个核心服务，即软件的安全性、保险性、可靠性和生存性。</p></li><li><p>软件可靠性定义如下：</p><ul><li>在规定条件下，在规定的时间内软件不引起系统失效的概率。该概率是系统输入和系统使用的函数，也是软件中存在的缺陷的函数。系统输入将确定是否会遇到已存在的缺陷(如果缺陷存在的话)。</li><li>在规定的时间周期内所述条件下程序执行所要求的功能的能力。</li><li>由上述定义可知，软件可靠性不但与软件存在的缺陷和&#x2F;或差错有关，而且与系统输入和系统使用有关。提高软件可靠性就是要减少软件中的缺陷或错误，提高软件系统的健壮性。因此，软件可靠性通常涉及软件安全性的要求，但是软件可靠性要求不能完全取代软件安全性的要求。</li></ul></li><li><p>应用软件系统位于信息系统的上层，是在信息系统的硬件系统、操作系统、网络系统和数据库管理系统的支持下运行的，是构成信息系统的最重要部分，是信息系统中直接为用户提供服务的部分。</p></li><li><p><strong>可信性</strong>是在正确性、可靠性、安全性、时效性、完整性、可用性、可预测性、生存性及可控性等众多概念的基础上发展起来的一个新概念，是客观对象的诸多属性在人们心目中的一个综合反映。</p></li><li><p>SDS（软件定义安全）是适应SDN复杂网络的安全防护新思想，基本原理是将物理及虚拟的网络安全设备预期接入模式、部署方式和实现功能进行解耦，底层抽象为安全资源池里的资源，顶层统一通过软件编程的方式进行智能化、自动化的业务编排和管理，以完成相应的安全功能，从而实现一种灵活的安全防护。SDS可以分解为软件定义流量、软件定义资源和软件定义威胁模型，三个举措环环相扣，形成一个动态、闭环的工作模型。</p></li></ol><p><strong>12.确保软件安全的基本思路是什么？软件安全涉及的技术主要有哪些方面？</strong></p><p>①软件安全开发关注的是如何运用系统安全工程的思想，以软件的安全性为核心，将安全要素嵌入软件开发生命周期的全过程，有效减少软件产品潜在的漏洞数量或控制在一个风险可接受的水平内，提高软件系统的整体安全性。</p><p>②软件安全开发方法抛弃了传统的先构建系统，再将安全手段应用于系统的构建模式，而是保留了采用风险管理、身份认证、访问控制、数据加密保护和入侵检测等传统安全方法，将安全作为功能需求的必要组成部分，在系统开发的需求阶段就引入安全要素，同时对软件开发全过程的每一个阶段实施风险管理，以期减少每一个开发步骤中可能出现的安全问题，最终提高软件产品的本质安全性。</p><h2 id="二、软件漏洞概述"><a href="#二、软件漏洞概述" class="headerlink" title="二、软件漏洞概述"></a>二、软件漏洞概述</h2><h3 id="问题要点-1"><a href="#问题要点-1" class="headerlink" title="问题要点"></a>问题要点</h3><p><strong>1. 什么是软件漏洞？软件漏洞与软件错误或软件缺陷的关系是什么？</strong></p><p>软件漏洞：软件漏洞通常被认为是软件生命周期中与安全相关的设计错误、编码缺陷及运行故障等。</p><ul><li><p>漏洞是信息系统自身具有的弱点或者缺陷；</p></li><li><p>漏洞存在环境通常是特定的；</p></li><li><p>漏洞具有可利用性，若攻击者利用了这些漏洞将会给信息系统安全带来严重威胁和经济损失</p></li></ul><p><strong>2.</strong> <strong>为什么会出现软件漏洞？</strong></p><ol><li>计算机系统结构决定了漏洞的必然性</li><li>软件趋向大型化，第三方扩展增多</li><li>新技术、新应用产生之初即缺乏安全性考虑</li><li>软件使用场景更具威胁</li><li>对软件安全开发重视不够，软件开发者缺乏安全知识</li></ol><p><strong>3.</strong> <strong>软件漏洞为什么要管理？如何管理？</strong></p><p>如何管理？</p><p>1）<strong>软件漏洞分类</strong></p><p>漏洞的成因、漏洞的位置、对系统造成的直接威胁</p><p>①漏洞的成因</p><ul><li>内存破坏类</li><li>逻辑错误类</li><li>输入验证类</li><li>设计错误类</li><li>配置错误类</li></ul><p>②漏洞的位置</p><ul><li><p>本地漏洞</p><p>需要操作系统级的有效帐号登录到本地才能利用的漏洞，主要构成为权限提升类漏洞，即把自身的执行权限从普通用户级别提升到管理员级别</p></li><li><p>远程漏洞</p><p>无需系统级的帐号验证即可通过网络访问目标进行利用的漏洞</p></li></ul><p>③基于威胁类型的分类</p><ul><li><p>获取控制</p><p>可以导致劫持程序执行流程，转向执行攻击者指定的任意指令或命令，控制应用系统或操作系统。威胁最大，同时影响系统的机密性、完整性，甚至在需要的时候可以影响可用性。主要来源：内存破坏类</p></li><li><p>获取信息</p><p>可以导致劫持程序访问预期外的资源并泄露给攻击者，影响系统的机密性。主要来源：输入验证类、配置错误类漏洞。</p></li><li><p>拒绝服务</p><p>可以导致目标应用或系统暂时或永远性地失去响应正常服务的能力，影响系统的可用性。主要来源：内存破坏类、意外处理错误类漏洞。</p></li></ul><p>2）<strong>软件漏洞分级</strong></p><p>对漏洞进行分级有助于人们对数目众多的安全漏洞给予<strong>不同程度的关注</strong>并采取<strong>不同级别的措施</strong>。</p><ol><li><p>按照漏洞严重等级进行分级</p><p><img src="/../../../AppData/Roaming/Typora/typora-user-images/image-20241112150556082.png" alt="image-20241112150556082"></p></li><li><p>利用通用漏洞评分系统（CVSS）进行分级，使用三种度量评价标准对一个已知的安全漏洞危害程度进行打分。</p><ul><li>基本度量：用于描述漏洞的固有基本特性，这些特性不随时间和用户环境的变化而改变。</li><li>时间度量：用于描述漏洞随时间而改变的特性，这些特性不随用户环境的变化而改变。</li><li>环境度量：用于描述漏洞与特殊用户环境相关的特性。</li></ul></li></ol><h3 id="重点问题-解答-1"><a href="#重点问题-解答-1" class="headerlink" title="重点问题&amp;解答"></a>重点问题&amp;解答</h3><p><strong>1.试述软件漏洞的概念，谈谈软件漏洞与软件错误、软件缺陷、软件Bug的区别与联系</strong></p><blockquote><p>软件错误（Eror）是指在软件开发过程中出现的不符合期望或不可接受的人为差错，其结果将可能导致软件敏陷的产生。在软件开发过程中，人是主体，难免会犯错误。软件错误主要是一种人为错误，相对于软件本身而言，是一种外部行为。</p><p>软件缺陷（Bug&#x2F;Defect）是指由于人为差错或其他客观原因，导致软件隐含能导致其在运行过程中出现不希望或不可接受的偏差，例如软件需求定义，以及设计、实现等错误。在这种意义下，软件缺陷和较件错误有着相近的含义。当软件运行于某一特定的环境条件时出现故障，这时称软件缺陷被激活。软件缺陷存在于软件内部，是一种静态形式</p></blockquote><p>软件漏洞通常被认为是软件生命周期中与安全相关的设计错误、编码缺陷及运行故障等。漏洞是贯穿软件生命周期各环节的。</p><ul><li>软件错误：在软件开发过程中 人为差错 可能会导致软件缺陷的产生。人为错误 外部行为</li><li>软件缺陷：由于人为差错和各种其他客观原因，导致软件隐含（存在）在运行过程中出现…的偏差。存在于软件内部 静态形式</li></ul><p>软件Bug&#x3D;软件缺陷</p><p><strong>2.为什么说安全缺陷或者说Bug是一个需要考虑具体环境、具体对象的概念？</strong></p><p>需要说明的是，安全缺陷或者说 Bug 是一个需要考虑具体环境、具体对象的概念。举例来说，一般的 Web 应用程序没有使用 HTTPS 协议（超文本传输安全协议）来加密传输的状态并不能算作是 Bug，而对于网上银行或电子商务等应用，不采用HTTPS协议进行加密传输就应当算作一个 Bug。如同使用 HTTPS 来对传输内容进行加密那样，积极主动地加强安全性的措施，也就是增加安全性功能，可以尽可能地消除Bug。安全性功能实际为软件系统的一种需求，所以也被称为安全性需求。是否将安全性功能加入到项目需求中，还需要根据项目的具体情况考虑，如项目经费等。</p><p><strong>3.试分析软件漏洞的成因。</strong></p><ol><li>计算机系统结构决定了漏洞的必然性</li><li>软件趋向大型化，第三方扩展增多</li><li>新技术、新应用产生之初即缺乏安全性考虑</li><li>软件使用场景更具威胁</li><li>对软件安全开发重视不够，软件开发者缺乏安全知识</li></ol><p><strong>4.软件漏洞如何分类分级管理？</strong></p><p><strong>1）软件漏洞分类</strong></p><p>通常可以从漏洞利用的成因、利用的位置、和对系统造成的直接威胁进行分类。</p><ol><li>基于漏洞成因的分类：内存破坏类、逻辑错误类、输入验证类、设计错误类和配置错误类。</li><li>基于漏洞利用位置的分类<ul><li>本地漏洞。即需要操作系统级的有效帐号登录到本地才能利用的漏洞，主要构成为权限提升类漏洞，即把自身的执行权限从普通用户级别提升到管理员级别。</li><li>远程漏洞。即无需系统级的帐号验证即可通过网络访问目标进行利用的漏洞。</li></ul></li><li>基于威胁类型的分类<ul><li>获取控制。即可以导致劫持程序执行流程，转向执行攻击者指定的任意指令或命令，控制应用系统或操作系统。威胁最大，同时影响系统的机密性、完整性，甚至在需要的时候可以影响可用性。主要来源：内存破坏类。</li><li>获取信息。即可以导致劫持程序访问预期外的资源并泄露给攻击者，影响系统的机密性。主要来源：输入验证类、配置错误类漏洞。</li><li>拒绝服务。即可以导致目标应用或系统暂时或永远性地失去响应正常服务的能力，影响系统的可用性。主要来源：内存破坏类、意外处理错误类漏洞。</li></ul></li></ol><p><strong>2）软件漏洞分级</strong></p><p>对漏洞进行分级有助于人们对数目众多的安全漏洞给予不同程度的关注并采取不同级别的措施。</p><ol><li>按照漏洞严重等级进行分级</li><li>利用通用漏洞评分系统（CVSS）进行分级，使用三种度量评价标准对一个已知的安全漏洞危害程度进行打分。<ul><li>基本度量：用于描述漏洞的固有基本特性，这些特性不随时间和用户环境的变化而改变。</li><li>时间度量：用于描述漏洞随时间而改变的特性，这些特性不随用户环境的变化而改变。</li><li>环境度量：用于描述漏洞与特殊用户环境相关的特性。</li></ul></li></ol><p><strong>6.软件漏洞买卖合法吗？软件漏洞应当如何管控？</strong></p><p><strong>不合法</strong></p><p>不管是讲道义还是讲法律，对漏洞的有效管控已经是势在必行。漏洞的发现和报告机制、潺洞的交易、漏洞的利用都应该有着法律的界限，相应的管理也带要与时俱进。</p><p>国外政府高度重视对漏洞资源的管控，通过建立完善的国象漏洞管理体系，将漏洞资源纳人国家管控机制。我国政府也高度重视对信息安全漏洞的管控，通过政策法规和专业机构，形成了一套管控体系。</p><p>为了应对日益增加的漏洞，增加自身产品和服务的安全性，许多厂商纷纷成立安全应急响应部门（SRC），向社会收录旗下相关产品及业务的安全漏洞和威胁信息，并在第一时间进行处置，及时消除安全隐患。各厂商应急响应部门的迅速建立和发展，打通了厂商与”白帽”之间的正规渠道，相应的奖励也使得更多的”白帽”关注并协助厂商发现漏洞与风险，很大程度上提高了厂商的信息安全程度。</p><p><strong>7.厂商发布漏洞信息的标准过程是怎样的？</strong></p><p>根据安全漏洞生命周期中漏洞所处的发现、利用、修复和公开4个阶段，该标准将漏洞管理行为分为预防、收集、消减和发布等实施活动。</p><ul><li>在漏洞预防阶段，厂商应采取相应手段来提高产品安全水平；用户应对使用的计算机系统进行安全加固、安装安全防护产品和开启相应的安全配置。</li><li>在漏洞收集阶段，漏洞管理组织与漏洞管理中涉及的各方进行沟通与协调，广泛收集并及时处置漏洞；厂商应提供接收漏洞信息的渠道，确认所提交漏洞的真实存在性，并回复报告方。</li><li>在漏洞消减阶段，厂商依据消减处理策略在规定时间内修复漏洞，依据漏洞类型和危害程度，优先开发高危漏洞的修复措施。同时，厂商应保证补丁的有效性和安全性，并进行兼容性测试；用户应及时跟踪公布的漏洞信息和相关厂商的安全公告，进行及时修复。</li><li>在漏洞发布阶段，漏洞管理组织应在规定时间内发布漏洞及修复措施等信息（參见《信息安全技术 安全漏洞标识与描述规范（CB&#x2F;T 28458—2012）》）；厂商应建立发布渠道，发布漏洞信息及修复措施，并迪知用户。</li></ul><h2 id="三、典型软件漏洞分析"><a href="#三、典型软件漏洞分析" class="headerlink" title="三、典型软件漏洞分析"></a>三、典型软件漏洞分析</h2><h3 id="问题要点-2"><a href="#问题要点-2" class="headerlink" title="问题要点"></a>问题要点</h3><h3 id="重点问题-解答-2"><a href="#重点问题-解答-2" class="headerlink" title="重点问题&amp;解答"></a>重点问题&amp;解答</h3><p><strong>1.程序运行时的内存布局是怎样的？</strong></p><p><img src="https://wfuing.github.io/posts/reviews/%E7%A0%94%E7%A9%B6%E7%94%9F%E5%A4%8D%E4%B9%A0/%E8%BD%AF%E4%BB%B6%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF/problems/333.png" alt="img"></p><p><strong>2.在程序运行时，用来动态申请分配数据和对象的内存区域形式称为什么？</strong></p><p>堆区</p><p><strong>3.什么是缓冲区溢出漏洞？</strong></p><p>缓冲区溢出漏洞就是在向缓冲区写入数据时，由于没有做边界检查，导致写入缓冲区的数据超过预先分配的边界，从而使溢出数据覆盖在合法数据上而引起系统异常的一种现象。</p><p><strong>4.简述Windows安全漏洞保护的基本技术及其存在的问题。</strong></p><p>（1）栈溢出检测选项&#x2F;GS</p><p>调用函数时将一个随机生成的秘密值（安全Cookie）存放在栈上，当函数返回时，检查这个堆栈检测仪的值是否被修改，以此判断是否发生了栈溢出。</p><p>对抗&#x2F;GS保护：围绕Cookie值展开的。猜测Cookie值、通过同时替换栈中的Cookie和Cookie副本、覆盖SEH绕过Cookie检查、覆盖父函数的栈数据绕过Cookie检查。</p><p>（2）数据执行保护DEP（Data Execution Prevention）</p><p>通过使可写内存不可执行或使可执行内存不可写来消除类似的威胁。</p><p>对抗方法：</p><ul><li>利用ret-to-libc执行命令或进行API调用，如调用WinExec实现执行程序。</li><li>将包含Shellcode的内存页面标记为可执行，然后再跳过去执行。</li><li>通过分配可执行内存，再将Shellcode复制到内存区域，然后跳过去执行。</li><li>先尝试关闭当前进程的DEP保护，然后再运行Shellcode。</li></ul><p>（3）地址空间布局随机化ASLR</p><p>通过对堆、栈、共享库映射等线性区域布局的随机化，增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止漏洞利用的目的。</p><p>ASLR机制的缺陷和绕过方法：</p><ul><li>对本地攻击者无能为力</li><li>造成内存碎片的增多&#96;</li><li>利用没有采用&#x2F;DYNAMICBASE选项保护的模块做跳板</li></ul><p>（4）安全结构化异常处理SafeSEH</p><p>SafeSEH保护机制的作用是防止覆盖和使用存储栈上的SEH结构。</p><p>其实现原理是，编译器在链接生成二进制IMAGE时，把所有合法的异常处理函数的地址解析出来制成一张安全的SEH表，保存在程序的IMAGE数据块里面，当程序调用异常处理函数时会将函数地址与安全SEH表中的地址进行匹配，检查调用的异常处理函数是否位于该表中。</p><p>对抗SafeSEH机制的方法：</p><p>利用未启用SafeSEH的模块作为跳板进行绕过；</p><p>利用加载模块之外的地址进行绕过。</p><p>（5）增强缓解体验工具包EMET</p><p>EMET的基本保护功能介绍如下。</p><p>增强型DEP；SafeSEH的升级版——SEHOP；强制性ASLR；HeapSpray防护。</p><p><strong>5.本章介绍了Windows的5种典型保护机制，但是每一种保护机制仍然面临着缺陷和许多对抗的方法，这说明了什么问题？应当如何应对这一问题？</strong></p><p>这些问题表明，安全是一个动态的过程，而不是一次性的解决方案。应对这些问题的方法包括：</p><ul><li>定期更新系统： 及时应用操作系统和应用程序的安全更新，以修补已知漏洞。</li><li>使用最新的安全技术： 持续关注和采用最新的安全技术，以提高系统的抵御能力。</li><li>网络安全意识培训： 提高用户和管理员的网络安全意识，以减少社会工程学攻击的成功率。</li><li>监控和响应： 实施有效的监控和响应机制，及时检测异常活动并采取措施应对。</li><li>多层次的安全防御： 组合使用多个安全解决方案，如防火墙、入侵检测系统、终端保护软件等，以提高整体安全性。</li></ul><p><strong>6.可以将内存访问错误大致分成以下几类：数组越界读或写、访问未初始化内存、访问已经释放的内存和重复释放内存或释放非法内存。下面的代码集中显示了上述问题的典型例子。这个包含许多错误的程序可以编译连接，而且可以在很多平台上运行。但是这些错误就像定时炸弹，会在特殊配置下触发，造成不可预见的错误。这就是内存错误难以发现的一个主要原因。试分析以下代码中存在的安全问题</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> namescpace std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;four&quot;</span>;<br>  <span class="hljs-type">char</span>* str2 = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">4</span>];  <span class="hljs-comment">//not enough space</span><br>  <span class="hljs-type">char</span>* str3 = str2;<br>  cout&lt;&lt;str2&lt;&lt;endl;   <span class="hljs-comment">// UMR</span><br>  <span class="hljs-built_in">strcpy</span>(str2,str1);   <span class="hljs-comment">//ABW</span><br>  cout&lt;&lt;str2&lt;&lt;endl;   <span class="hljs-comment">//ABR</span><br>  <span class="hljs-keyword">delete</span> str2;<br>  str2[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span>;  <span class="hljs-comment">//FMR and FMW</span><br>  <span class="hljs-keyword">delete</span> str3;  <span class="hljs-comment">//FFM</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>未初始化内存读取 (UMR):</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; str2 &lt;&lt; endl; <span class="hljs-comment">// UMR</span><br></code></pre></td></tr></table></figure><p><code>str2</code> 是一个指向字符数组的指针，但在使用之前并没有被正确地初始化。因此，<code>cout &lt;&lt; str2</code> 将导致未定义行为，可能输出一些未知的值或者导致程序崩溃。</p><ol start="2"><li>越界写 (ABW - Array Bounds Write):</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">strcpy</span>(str2, str1); <span class="hljs-comment">// ABW</span><br></code></pre></td></tr></table></figure><p><code>str2</code> 数组的长度只有 4 个字符，而 <code>str1</code> 的长度是 5 个字符（包括字符串结束符 ‘\0’），这将导致越界写入 str2，破坏了内存。</p><ol start="3"><li>数组越界读取 (ABR - Array Bounds Read):</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">cout &lt;&lt; str2 &lt;&lt; endl; <span class="hljs-comment">// ABR</span><br></code></pre></td></tr></table></figure><p>在越界写入后，再次输出 <code>str2</code> 可能导致数组越界读取，因为 <code>str2</code> 的内存已经被破坏。</p><ol start="4"><li>释放后访问 (FFM - Free Memory):</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> str2; <span class="hljs-comment">// FFM</span><br>str2[<span class="hljs-number">0</span>] += <span class="hljs-number">2</span>; <span class="hljs-comment">// FMR (Free Memory Read) and FMW (Free Memory Write)</span><br></code></pre></td></tr></table></figure><p><code>delete str2;</code> 释放了 <code>str2</code> 指向的内存，但之后仍然尝试通过 <code>str2[0] += 2;</code> 来访问该已释放内存。这可能导致未定义行为，甚至程序崩溃。</p><ol start="5"><li>重复释放 (Double Free):</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">delete</span> str3; <span class="hljs-comment">// Double Free</span><br></code></pre></td></tr></table></figure><p><code>str3</code> 指向的内存在之前已经被 <code>delete str2;</code> 释放，再次释放同一块内存可能导致内存错误。</p><p>为了修复这些问题，需要进行以下修改：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span> <span class="hljs-comment">// Include for strcpy</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span>* str1 = <span class="hljs-string">&quot;four&quot;</span>; <span class="hljs-comment">// Use const char* for string literals</span><br>  <span class="hljs-type">char</span>* str2 = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">5</span>];  <span class="hljs-comment">// Allocate enough space, including &#x27;\0&#x27;</span><br>  <span class="hljs-type">char</span>* str3 = str2;<br><br>  std::cout &lt;&lt; str2 &lt;&lt; std::endl; <span class="hljs-comment">// Corrected</span><br><br>  <span class="hljs-comment">// Use strcpy to copy the string, and ensure proper null-termination</span><br>  <span class="hljs-built_in">strcpy</span>(str2, str1);<br><br>  std::cout &lt;&lt; str2 &lt;&lt; std::endl; <span class="hljs-comment">// Corrected</span><br><br>  <span class="hljs-keyword">delete</span>[] str2; <span class="hljs-comment">// Corrected</span><br><br>  <span class="hljs-comment">// Avoid accessing the deleted memory</span><br>  <span class="hljs-comment">// str2[0] += 2; // Commented out to prevent Free Memory Read/Write</span><br><br>  <span class="hljs-comment">// No need to delete str3, as it points to the same memory as str2</span><br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样修改后，代码中的常见内存错误就得到了修复。不过，值得注意的是，C++ 中可以使用更安全的字符串处理函数和智能指针等工具来避免这些问题。</p>]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
      <category>研一</category>
      
    </categories>
    
    
    <tags>
      
      <tag>课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题记录</title>
    <link href="/2024/11/12/Leetcode%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/11/12/Leetcode%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1. 数组"></a>1. 数组</h1><h2 id="1-1-二分查找"><a href="#1-1-二分查找" class="headerlink" title="1.1 二分查找"></a>1.1 二分查找</h2><ol><li>通用模板：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 闭区间</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> nums.size() - <span class="hljs-number">1</span>; <span class="hljs-comment">// 定义target在左闭右闭的区间里，[left, right]</span><br>        <span class="hljs-keyword">while</span> (left &lt;= right) &#123; <span class="hljs-comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> left + ((right - left) / <span class="hljs-number">2</span>);<span class="hljs-comment">// 防止溢出 等同于(left + right)/2</span><br>            <span class="hljs-keyword">if</span> (nums[middle] &gt; target) &#123;<br>                right = middle - <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在左区间，所以[left, middle - 1]</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[middle] &lt; target) &#123;<br>                left = middle + <span class="hljs-number">1</span>; <span class="hljs-comment">// target 在右区间，所以[middle + 1, right]</span><br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// nums[middle] == target</span><br>                <span class="hljs-keyword">return</span> middle; <span class="hljs-comment">// 数组中找到目标值，直接返回下标</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 未找到目标值</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>左右边界</p><p>当寻找左边界&#x2F;右边界时，设置对应的标识(leftBorder &#x3D; -1)，寻找左边界时，条件为<code>&gt;=</code>，右边界为<code>&lt;=</code>，在对应条件的判断中更新边界标识符变量，同时更新l或者r寻找下一个位置是否满足边界条件。</p></li><li><p>开方数</p><p>同样是寻找<code>&lt;=</code>某个值的最大值，即upperbound的计算。（可以寻找其他解法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">mySqrt</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> x;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span>  <span class="hljs-operator">=</span> l + (r - l)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>((<span class="hljs-type">long</span>)mid * mid &lt;= x) &#123;<br>                ans = mid;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><code>&gt;=</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&lt;</code>判断模板</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">   <br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-移除元素"><a href="#1-2-移除元素" class="headerlink" title="1.2 移除元素"></a>1.2 移除元素</h2><h2 id="1-3-有序数组的平方（双指针）"><a href="#1-3-有序数组的平方（双指针）" class="headerlink" title="1.3 有序数组的平方（双指针）"></a>1.3 有序数组的平方（双指针）</h2><h2 id="1-4-长度最小的子数组（滑动窗口）"><a href="#1-4-长度最小的子数组（滑动窗口）" class="headerlink" title="1.4 长度最小的子数组（滑动窗口）"></a>1.4 长度最小的子数组（滑动窗口）</h2><p>滑动窗口</p><p>接下来就开始介绍数组操作中另一个重要的方法：滑动窗口。</p><p>所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。</p><p>在暴力解法中，是一个for循环滑动窗口的起始位置，一个for循环为滑动窗口的终止位置，用两个for循环 完成了一个不断搜索区间的过程。</p><p>那么滑动窗口如何用一个for循环来完成这个操作呢。</p><p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。</p><p>如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？</p><p>此时难免再次陷入 暴力解法的怪圈。</p><p>所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p><p>在本题中实现滑动窗口，主要确定如下三点：</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于等于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><p>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将O(n^2)暴力解法降为O(n)</p><h2 id="1-5-螺旋矩阵（模拟操作）"><a href="#1-5-螺旋矩阵（模拟操作）" class="headerlink" title="1.5 螺旋矩阵（模拟操作）"></a>1.5 螺旋矩阵（模拟操作）</h2><p><strong>思路一：</strong></p><p>初始化一个 n×n 大小的矩阵 mat，然后模拟整个向内环绕的填入过程：</p><ol><li><p>定义当前左右上下边界 l,r,t,b，初始值 num &#x3D; 1，迭代终止值 tar &#x3D; n * n；</p></li><li><p>当 num &lt;&#x3D; tar 时，始终按照 从左到右 从上到下 从右到左 从下到上 填入顺序循环，每次填入后：</p></li><li><p>执行 num +&#x3D; 1：得到下一个需要填入的数字；</p></li><li><p>更新边界：例如从左到右填完后，上边界 t +&#x3D; 1，相当于上边界向内缩 1。</p></li><li><p>使用num &lt;&#x3D; tar而不是l &lt; r || t &lt; b作为迭代条件，是为了解决当n为奇数时，矩阵中心数字无法在迭代过程中被填充的问题。</p></li><li><p>最终返回 mat 即可。</p></li></ol><img src="https://pic.leetcode-cn.com/ccff416fa39887c938d36fec8e490e1861813d3bba7836eda941426f13420759-Picture1.png" alt="Picture1.png" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br><br>        <span class="hljs-comment">//大神解法的解读</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = n-<span class="hljs-number">1</span>, top = <span class="hljs-number">0</span>, bottom = n-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, target = n * n;<br>        <span class="hljs-type">int</span>[][] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-comment">//for循环中变量定义成i或j的细节：按照通常的思维，i代表行，j代表列</span><br>        <span class="hljs-comment">//这样，就可以很容易区分出来变化的量应该放在[][]的第一个还是第二个</span><br>        <span class="hljs-comment">//对于变量的边界怎么定义：</span><br>            <span class="hljs-comment">//从左向右填充：填充的列肯定在[left,right]区间</span><br>            <span class="hljs-comment">//从上向下填充：填充的行肯定在[top,bottom]区间</span><br>            <span class="hljs-comment">//从右向左填充：填充的列肯定在[right,left]区间</span><br>            <span class="hljs-comment">//从下向上填充：填充的行肯定在[bootom,top]区间</span><br>        <span class="hljs-comment">//通过上面的总结会发现边界的起始和结束与方向是对应的</span><br>        <span class="hljs-keyword">while</span>(count &lt;= target)&#123;<br>            <span class="hljs-comment">//从左到右填充，相当于缩小上边界</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> left; j &lt;= right; j++) res[top][j] = count++;<br>            <span class="hljs-comment">//缩小上边界</span><br>            top++;<br>            <span class="hljs-comment">//从上向下填充，相当于缩小右边界</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> top; i &lt;=bottom; i++) res[i][right] = count++;<br>            <span class="hljs-comment">//缩小右边界</span><br>            right--;<br>            <span class="hljs-comment">//从右向左填充，相当于缩小下边界</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> right; j &gt;= left; j--) res[bottom][j] = count++;<br>            <span class="hljs-comment">//缩小下边界</span><br>            bottom--;<br>            <span class="hljs-comment">//从下向上填充，相当于缩小左边界</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> bottom; i &gt;= top; i--) res[i][left] = count++;<br>            <span class="hljs-comment">//缩小左边界</span><br>            left++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思路二：</strong></p><p>模拟顺时针画矩阵的过程:</p><ul><li>填充上行从左到右</li><li>填充右列从上到下</li><li>填充下行从右到左</li><li>填充左列从下到上</li></ul><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220922102236.png" alt="img" style="zoom:30%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] generateMatrix(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[][] matrix= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> n/<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">offset</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(loop-- &gt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x, j = y;<br>            <span class="hljs-comment">// 从左到右</span><br>            <span class="hljs-keyword">for</span>(;j &lt; n - offset; j++) &#123;<br>                matrix[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 从上到下</span><br>            <span class="hljs-keyword">for</span>(;i &lt; n - offset; i++) &#123;<br>                matrix[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 从右到左</span><br>            <span class="hljs-keyword">for</span>(;j &gt; y; j--) &#123;<br>                matrix[i][j] = count++;<br>            &#125;<br>            <span class="hljs-comment">// 从下到上</span><br>            <span class="hljs-keyword">for</span>(;i &gt; x; i--) &#123;<br>                matrix[i][j] = count++;<br>            &#125;<br>            x ++; <br>            y ++;<br>            offset ++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            matrix[n/<span class="hljs-number">2</span>][n/<span class="hljs-number">2</span>] = count;<br>        &#125;<br>        <span class="hljs-keyword">return</span> matrix;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="leetcode904——水果成篮-滑动窗口"><a href="#leetcode904——水果成篮-滑动窗口" class="headerlink" title="leetcode904——水果成篮(滑动窗口)"></a>leetcode904——水果成篮(滑动窗口)</h2><ol><li>最小滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最小长度。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> j &lt; len(nums):<br>    判断[i, j]是否满足条件<br>    <span class="hljs-keyword">while</span> 满足条件：<br>        不断更新结果(注意在<span class="hljs-keyword">while</span>内更新！)<br>        i += <span class="hljs-number">1</span> （最大程度的压缩i，使得滑窗尽可能的小）<br>    j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ol start="2"><li>最大滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最大长度。</li></ol><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> j &lt; len(nums):<br>   判断[i, j]是否满足条件<br>   <span class="hljs-keyword">while</span> 不满足条件：<br>       i += <span class="hljs-number">1</span> （最保守的压缩i，一旦满足条件了就退出压缩i的过程，使得滑窗尽可能的大）<br>   不断更新结果（注意在<span class="hljs-keyword">while</span>外更新！）<br>   j += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>是的，关键的区别在于，最大滑窗是在迭代右移右边界的过程中更新结果，而最小滑窗是在迭代右移左边界的过程中更新结果。因此虽然都是滑窗，但是两者的模板和对应的贪心思路并不一样，而真正理解后就可以在lc.76，lc.904，lc.3, lc.1004写出非常无脑的代码。</p><p>需要寻找一个窗口，该窗口中只包含两种数字，寻找长度最长的窗口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解法1：滑动窗口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalFruit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] fruits)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        HashMap&lt;Integer, Integer&gt; fruitCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; r &lt; fruits.length; r ++) &#123;<br>            fruitCount.put(fruits[r], fruitCount.getOrDefault(fruits[r], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(fruitCount.size() &gt; <span class="hljs-number">2</span>) &#123;<br>                fruitCount.put(fruits[l], fruitCount.get(fruits[l]) - <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(fruitCount.get(fruits[l]) == <span class="hljs-number">0</span>) &#123;<br>                    fruitCount.remove(fruits[l]);<br>                &#125;<br>                l ++;<br>            &#125;<br>            result = Math.max(result, r - l + <span class="hljs-number">1</span>);<br>        &#125;<br>       <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 解法2，没看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalFruit</span><span class="hljs-params">(<span class="hljs-type">int</span>[] fruits)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,right = <span class="hljs-number">0</span>,ans = <span class="hljs-number">0</span>,a=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">ln</span> <span class="hljs-operator">=</span> fruits[left],rn = fruits[right];<br>       <span class="hljs-keyword">while</span>(right &lt; fruits.length)&#123;<br>        <span class="hljs-keyword">if</span>(fruits[right] == rn || fruits[right] == ln)&#123;<br>            a=right - left +<span class="hljs-number">1</span>;<br>            ans = ans&gt;a?ans:a;<br>            right ++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            left = right -<span class="hljs-number">1</span>;<br>            ln = fruits[left];<br>            <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">1</span> &amp;&amp; fruits[left - <span class="hljs-number">1</span>] == ln) left--;<br>            rn = fruits[right];<br>             a=right - left +<span class="hljs-number">1</span>;<br>            ans = ans&gt;a?ans:a;<br><br>        &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Leetcode76-最小覆盖子串-滑动窗口"><a href="#Leetcode76-最小覆盖子串-滑动窗口" class="headerlink" title="Leetcode76 最小覆盖子串(滑动窗口)"></a>Leetcode76 <a href="https://leetcode.cn/problems/minimum-window-substring/">最小覆盖子串</a>(滑动窗口)</h2><h3 id="方法一：减法"><a href="#方法一：减法" class="headerlink" title="方法一：减法"></a><strong>方法一：减法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        HashMap&lt;Character, Integer&gt; charCount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">char</span>[] charT = t.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: charT) &#123;<br>            charCount.put(c, charCount.getOrDefault(c, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> t.length();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; r &lt; s.length(); r ++) &#123;<br>            <span class="hljs-keyword">if</span>(charCount.containsKey(s.charAt(r))) &#123;<br>                <span class="hljs-keyword">if</span>(charCount.get(s.charAt(r)) &gt; <span class="hljs-number">0</span>) &#123;<br>                    count --;<br>                &#125;<br>                charCount.put(s.charAt(r), charCount.get(s.charAt(r)) - <span class="hljs-number">1</span>);<br>            &#125;<br>            <span class="hljs-keyword">while</span>(count == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span>(result.length() &gt; r - l + <span class="hljs-number">1</span> || result.length() == <span class="hljs-number">0</span>) &#123;<br>                    result = s.substring(l, r + <span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(charCount.containsKey(s.charAt(l))) &#123;<br>                    <span class="hljs-keyword">if</span>(charCount.get(s.charAt(l)) == <span class="hljs-number">0</span>) count ++;<br>                    charCount.put(s.charAt(l), charCount.get(s.charAt(l)) + <span class="hljs-number">1</span>);<br>                &#125;<br>                l++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法二：窗口内字符个数与查找子串的字符个数比较（可优化）"><a href="#方法二：窗口内字符个数与查找子串的字符个数比较（可优化）" class="headerlink" title="方法二：窗口内字符个数与查找子串的字符个数比较（可优化）"></a><strong>方法二：窗口内字符个数与查找子串的字符个数比较（可优化）</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">char</span>[] char_s = s.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] cntS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">128</span>];<br>        <span class="hljs-type">int</span>[] cntT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">128</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansLeft</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>, ansRight = length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c: t.toCharArray()) &#123;<br>            cntT[c] ++;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; r &lt; length; r++) &#123;<br>            cntS[char_s[r]] ++;<br>            <span class="hljs-keyword">while</span>(isCovered(cntS, cntT)) &#123;<br>                <span class="hljs-keyword">if</span>(r - l &lt; ansRight - ansLeft) &#123;<br>                    ansLeft = l;<br>                    ansRight = r;<br>                &#125;<br>                cntS[char_s[l++]] --;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ansLeft &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;&quot;</span> : s.substring(ansLeft, ansRight + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCovered</span><span class="hljs-params">(<span class="hljs-type">int</span>[] cntS, <span class="hljs-type">int</span>[] cntT)</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; i &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(cntS[i] &lt; cntT[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; i &lt;= <span class="hljs-string">&#x27;z&#x27;</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(cntS[i] &lt; cntT[i]) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复杂度分析：</p><ul><li><p>时间复杂度：O(∣Σ∣m+n)，其中 m 为 s 的长度，n 为 t 的长度，∣Σ∣ 为字符集合的大小，本题字符均为英文字母，所以 ∣Σ∣&#x3D;52。注意 left 只会增加不会减少，left 每增加一次，我们就花费 O(∣Σ∣) 的时间。因为 left 至多增加 m 次，所以二重循环的时间复杂度为 O(∣Σ∣m)，再算上统计 t 字母出现次数的时间 O(n)，总的时间复杂度为 O(∣Σ∣m+n)。</p></li><li><p>空间复杂度：O(∣Σ∣)。如果创建了大小为 128 的数组，则 ∣Σ∣&#x3D;128。</p></li></ul><h3 id="方法三：优化版（感觉和方法一是一样的思想）"><a href="#方法三：优化版（感觉和方法一是一样的思想）" class="headerlink" title="方法三：优化版（感觉和方法一是一样的思想）"></a>方法三：优化版（感觉和方法一是一样的思想）</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String S, String t)</span> &#123;<br>        <span class="hljs-type">char</span>[] s = S.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansLeft</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ansRight</span> <span class="hljs-operator">=</span> m;<br>        <span class="hljs-type">int</span>[] cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">128</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">less</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : t.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (cnt[c] == <span class="hljs-number">0</span>) &#123;<br>                less++; <span class="hljs-comment">// 有 less 种字母的出现次数 &lt; t 中的字母出现次数</span><br>            &#125;<br>            cnt[c]++;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; right &lt; m; right++) &#123; <span class="hljs-comment">// 移动子串右端点</span><br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s[right]; <span class="hljs-comment">// 右端点字母</span><br>            cnt[c]--; <span class="hljs-comment">// 右端点字母移入子串</span><br>            <span class="hljs-keyword">if</span> (cnt[c] == <span class="hljs-number">0</span>) &#123; <br>                <span class="hljs-comment">// 原来窗口内 c 的出现次数比 t 的少，现在一样多</span><br>                less--;<br>            &#125;<br>            <span class="hljs-keyword">while</span> (less == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 涵盖：所有字母的出现次数都是 &gt;=</span><br>                <span class="hljs-keyword">if</span> (right - left &lt; ansRight - ansLeft) &#123; <span class="hljs-comment">// 找到更短的子串</span><br>                    ansLeft = left; <span class="hljs-comment">// 记录此时的左右端点</span><br>                    ansRight = right;<br>                &#125;<br>                <span class="hljs-type">char</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> s[left]; <span class="hljs-comment">// 左端点字母</span><br>                <span class="hljs-keyword">if</span> (cnt[x] == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-comment">// x 移出窗口之前，检查出现次数，</span><br>                    <span class="hljs-comment">// 如果窗口内 x 的出现次数和 t 一样，</span><br>                    <span class="hljs-comment">// 那么 x 移出窗口后，窗口内 x 的出现次数比 t 的少</span><br>                    less++;<br>                &#125;<br>                cnt[x]++; <span class="hljs-comment">// 左端点字母移出子串</span><br>                left++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ansLeft &lt; <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;&quot;</span> : S.substring(ansLeft, ansRight + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(m+n) 或 O(m+n+∣Σ∣)，其中 m 为 s 的长度，n 为 t 的长度，∣Σ∣&#x3D;128。注意 left 只会增加不会减少，二重循环的时间复杂度为 O(m)。使用哈希表写法的时间复杂度为 O(m+n)，数组写法的时间复杂度为 O(m+n+∣Σ∣)。</p></li><li><p>空间复杂度：O(∣Σ∣)。无论 m 和 n 有多大，额外空间都不会超过 O(∣Σ∣)。</p></li></ul><h2 id="1-6-前缀和"><a href="#1-6-前缀和" class="headerlink" title="1.6 前缀和"></a>1.6 前缀和</h2><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><p>计算区间和时十分有用</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i] = scanner.nextInt();<br>            <br>        &#125;<br>        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            b[i] = b[i - <span class="hljs-number">1</span>] + a[i];<br>        &#125;<br><br><br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>            <span class="hljs-comment">// r和l为数组中的实际位置，第一个元素就为1</span><br>            System.out.println(b[r] - b[l - <span class="hljs-number">1</span>]);<br>        &#125;<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><h1 id="2-链表"><a href="#2-链表" class="headerlink" title="2. 链表"></a>2. 链表</h1><h2 id="2-1-移除链表元素"><a href="#2-1-移除链表元素" class="headerlink" title="2.1 移除链表元素"></a>2.1 移除链表元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeElements</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummyNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummyNode.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummyNode;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(cur.next.val == val) &#123;<br>                cur.next = cur.next.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = cur.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummyNode.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：如果<code>cur.next.val == val</code>时，不能直接将<code>cur = cur.next</code>，因为这样会跳过下一个元素的验证，还可能会直接跳到<code>cur = null</code>导致while判断条件出错（null没有.next属性）。</p><p>##2.2 翻转链表</p><h3 id="思路一：双指针法"><a href="#思路一：双指针法" class="headerlink" title="思路一：双指针法"></a>思路一：双指针法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> cur;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>            temp = cur.next;<br>            cur.next = pre;<br>            pre = cur;<br>            cur = temp;<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="思路二：递归（从前往后）"><a href="#思路二：递归（从前往后）" class="headerlink" title="思路二：递归（从前往后）"></a>思路二：递归（从前往后）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// (pre, cur)</span><br>        <span class="hljs-keyword">return</span> reverse(<span class="hljs-literal">null</span>, head);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">reverse</span><span class="hljs-params">(ListNode prev, ListNode cur)</span> &#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> prev;<br>        &#125;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        temp = cur.next;<span class="hljs-comment">// 先保存下一个节点</span><br>        cur.next = prev;<span class="hljs-comment">// 反转</span><br>        <span class="hljs-comment">// 更新prev、cur位置</span><br>        <span class="hljs-comment">// prev = cur;</span><br>        <span class="hljs-comment">// cur = temp;</span><br>        <span class="hljs-keyword">return</span> reverse(cur, temp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路三：递归（从后往前）"><a href="#思路三：递归（从后往前）" class="headerlink" title="思路三：递归（从后往前）"></a>思路三：递归（从后往前）</h3><p>思路图：</p><p><img src="https://pic.leetcode-cn.com/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8.gif" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 从后向前递归</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    ListNode <span class="hljs-title function_">reverseList</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// 边缘条件判断</span><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <br>        <span class="hljs-comment">// 递归调用，翻转第二个节点开始往后的链表</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> reverseList(head.next);<br>        <span class="hljs-comment">// 翻转头节点与第二个节点的指向</span><br>        head.next.next = head;<br>        <span class="hljs-comment">// 此时的 head 节点为尾节点，next 需要指向 NULL</span><br>        head.next = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> last;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-两两交换链表中的节点"><a href="#2-3-两两交换链表中的节点" class="headerlink" title="2.3 两两交换链表中的节点"></a>2.3 两两交换链表中的节点</h2><h3 id="思路一：迭代，直接顺着链表进行交换"><a href="#思路一：迭代，直接顺着链表进行交换" class="headerlink" title="思路一：迭代，直接顺着链表进行交换"></a>思路一：迭代，直接顺着链表进行交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">dummy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        dummy.next = head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> dummy;<br>        <span class="hljs-keyword">while</span>(cur.next != <span class="hljs-literal">null</span> &amp;&amp; cur.next.next != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> cur.next;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">secondNode</span> <span class="hljs-operator">=</span> cur.next.next;<br>            cur.next = secondNode;<br>            firstNode.next = secondNode.next;<br>            secondNode.next = firstNode;<br>            cur = cur.next.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.next;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="思路二：递归，不断更换头节点"><a href="#思路二：递归，不断更换头节点" class="headerlink" title="思路二：递归，不断更换头节点"></a>思路二：递归，不断更换头节点</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">swapPairs</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-comment">// base case 退出提交</span><br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> head;<br>        <span class="hljs-comment">// 获取当前节点的下一个节点</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> head.next;<br>        <span class="hljs-comment">// 进行递归</span><br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> swapPairs(next.next);<br>        <span class="hljs-comment">// 这里进行交换</span><br>        next.next = head;<br>        head.next = newNode;<br><br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-删除链表倒数第N个元素"><a href="#2-4-删除链表倒数第N个元素" class="headerlink" title="2.4 删除链表倒数第N个元素"></a>2.4 删除链表倒数第N个元素</h2><p>思路：<strong>双指针</strong>，fast优先走n步，之后slow开始走，当fast走到链表尾此时找到需要删除的元素</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> ListNode removeNthFromEnd(ListNode head, <span class="hljs-built_in">int</span> n) &#123;<br>        <span class="hljs-comment">//fast优先走n步，之后slow开始走，当fast走到链表尾此时找到需要删除的元素</span><br>        ListNode dummy = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        dummy.<span class="hljs-keyword">next</span> = head;<br>        ListNode cur = dummy;<br>        ListNode fast = cur;<br>        ListNode slow = cur;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++) &#123;<br>            fast = fast.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(fast.<span class="hljs-keyword">next</span> != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.<span class="hljs-keyword">next</span>;<br>            fast = fast.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slow.<span class="hljs-keyword">next</span> != <span class="hljs-literal">null</span>) &#123;<br>            slow.<span class="hljs-keyword">next</span> = slow.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dummy.<span class="hljs-keyword">next</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-寻找两个链表的交点"><a href="#2-5-寻找两个链表的交点" class="headerlink" title="2.5 寻找两个链表的交点"></a>2.5 寻找两个链表的交点</h2><h3 id="思路一：两链表对齐"><a href="#思路一：两链表对齐" class="headerlink" title="思路一：两链表对齐"></a>思路一：两链表对齐</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">lenA</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, lenB = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curA</span> <span class="hljs-operator">=</span> headA, curB = headB;<br>        <span class="hljs-keyword">while</span>(curA != <span class="hljs-literal">null</span>) &#123;<br>            curA = curA.next;<br>            lenA++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(curB != <span class="hljs-literal">null</span>) &#123;<br>            curB = curB.next;<br>            lenB++;<br>        &#125;<br>        curA = headA;<br>        curB = headB;<br>        <span class="hljs-keyword">if</span>(lenA &lt; lenB) &#123;<br>            <span class="hljs-comment">//1. swap (lenA, lenB);</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmpLen</span> <span class="hljs-operator">=</span> lenA;<br>            lenA = lenB;<br>            lenB = tmpLen;<br>            <span class="hljs-comment">//2. swap (curA, curB);</span><br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">tmpNode</span> <span class="hljs-operator">=</span> curA;<br>            curA = curB;<br>            curB = tmpNode;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> lenA - lenB;<br>        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>) &#123;<br>            curA = curA.next;<br>            num--;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(curA != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(curA == curB) &#123;<br>                <span class="hljs-keyword">return</span> curA;<br>            &#125;<br>            curA = curA.next;<br>            curB = curB.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="思路二：合并链表实现同步移动"><a href="#思路二：合并链表实现同步移动" class="headerlink" title="思路二：合并链表实现同步移动"></a>思路二：合并链表实现同步移动</h3><p>即如果两个链表相交，那么无论两个指针从哪个链表开始，它们最终都会在相交点相遇。</p><p>遍历完A后去B寻找，遍历完B后去A寻找，两者在到达相交点时经过的步数是相同的：</p><ul><li>lenA + step_b(b从开头到相交点的步数)</li><li>lenB + step_a(a从开头到相交点的步数)</li></ul><p>两者是相同的。（可画图验证）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> &#123;<br><span class="hljs-comment">// p1 指向 A 链表头结点，p2 指向 B 链表头结点</span><br><span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> headA, p2 = headB;<br><span class="hljs-keyword">while</span> (p1 != p2) &#123;<br><span class="hljs-comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span><br><span class="hljs-keyword">if</span> (p1 == <span class="hljs-literal">null</span>) p1 = headB;<br><span class="hljs-keyword">else</span>            p1 = p1.next;<br><span class="hljs-comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span><br><span class="hljs-keyword">if</span> (p2 == <span class="hljs-literal">null</span>) p2 = headA;<br><span class="hljs-keyword">else</span>            p2 = p2.next;<br>&#125;<br><span class="hljs-keyword">return</span> p1;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-环形链表-判断链表是否有环，环的入口"><a href="#2-6-环形链表-判断链表是否有环，环的入口" class="headerlink" title="2.6 环形链表(判断链表是否有环，环的入口)"></a>2.6 环形链表(判断链表是否有环，环的入口)</h2><h3 id="思路一：快慢指针"><a href="#思路一：快慢指针" class="headerlink" title="思路一：快慢指针"></a>思路一：快慢指针</h3><h4 id="判断链表是否有环"><a href="#判断链表是否有环" class="headerlink" title="判断链表是否有环"></a>判断链表是否有环</h4><p>快慢指针：可以使用快慢指针法，分别定义 fast 和 slow 指针，从头结点出发，fast指针每次移动两个节点，slow指针每次移动一个节点，如果 fast 和 slow指针在途中相遇 ，说明这个链表有环。</p><p><strong>fast指针一定先进入环中，如果fast指针和slow指针相遇的话，一定是在环中相遇，这是毋庸置疑的。</strong></p><h4 id="环的入口"><a href="#环的入口" class="headerlink" title="环的入口"></a>环的入口</h4><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20220925103433.png" alt="img"></p><p>通过数学推导可知：<br>$$<br>x &#x3D; (n - 1) (y + z) + z<br>$$<br>注意这里n一定是大于等于1的，因为 fast指针至少要多走一圈才能相遇slow指针。</p><ul><li><p>若<code>n = 1</code>，则有<code>x=z</code>，这就意味着，<strong>从头结点出发一个指针，从相遇节点 也出发一个指针，这两个指针每次只走一个节点， 那么当这两个指针相遇的时候就是 环形入口的节点</strong>。</p><p>也就是在相遇节点处，定义一个指针index1，在头结点处定一个指针index2。</p><p>让index1和index2同时移动，每次移动一个节点， 那么他们相遇的地方就是 环形入口的节点。</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II%EF%BC%88%E6%B1%82%E5%85%A5%E5%8F%A3%EF%BC%89.gif" alt="142.环形链表II（求入口）"></p></li><li><p>若<code>n &gt; 1</code>，fast指针在环形转n圈之后才遇到 slow指针。</p><p>其实这种情况和n为1的时候效果是一样的，一样可以通过这个方法找到环形的入口节点，只不过，index1 指针在环里 多转了(n-1)圈，然后再遇到index2，相遇点依然是环形的入口节点。</p></li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> head;<br>        <span class="hljs-keyword">while</span> (fast != <span class="hljs-literal">null</span> &amp;&amp; fast.next != <span class="hljs-literal">null</span>) &#123;<br>            slow = slow.next;<br>            fast = fast.next.next;<br>            <span class="hljs-keyword">if</span> (slow == fast) &#123;<span class="hljs-comment">// 有环</span><br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">index1</span> <span class="hljs-operator">=</span> fast;<br>                <span class="hljs-type">ListNode</span> <span class="hljs-variable">index2</span> <span class="hljs-operator">=</span> head;<br>                <span class="hljs-comment">// 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口</span><br>                <span class="hljs-keyword">while</span> (index1 != index2) &#123;<br>                    index1 = index1.next;<br>                    index2 = index2.next;<br>                &#125;<br>                <span class="hljs-keyword">return</span> index1;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="答疑"><a href="#答疑" class="headerlink" title="答疑"></a>答疑</h4><p><strong>为什么第一次在环中相遇，slow的 步数 是 x+y 而不是 x + 若干环的长度 + y 呢？</strong></p><p>关于找环的入口，为什么慢指针不会出现走好几圈才被快指针追上。可以先假设当慢指针第一次到环入口处的时候，和快指针的距离为m,此时快指针已经在环里面走了，而慢指针接下来也会在环里面走。再假设环长为s,所以快指针和慢指针的距离是（s-m）,（注：都是按顺时针看距离），而快指针每次都会比慢指针多走一步，相当于每次都以一步的距离再缩进距离，所以当慢指针走（s-m）步的时候，快指针就能把距离缩为0了，也就是两点相遇了。而s-m是肯定小于s的，也就是小于一圈，所以慢指针肯定在没有走完一圈的时候就会被快指针追上。</p><h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(N)，其中 N 为链表中节点的数目。在最初判断快慢指针是否相遇时，slow 指针走过的距离不会超过链表的总长度；随后寻找入环点时，走过的距离也不会超过链表的总长度。因此，总的执行时间为 O(N)+O(N)&#x3D;O(N)。</li><li>空间复杂度：O(1)。我们只使用了 slow,fast,ptr 三个指针。</li></ul><h3 id="思路二：哈希表"><a href="#思路二：哈希表" class="headerlink" title="思路二：哈希表"></a>思路二：哈希表</h3><h4 id="思路与算法"><a href="#思路与算法" class="headerlink" title="思路与算法"></a>思路与算法</h4><p>一个非常直观的思路是：我们遍历链表中的每个节点，并将它记录下来；一旦遇到了此前遍历过的节点，就可以判定链表中存在环。借助哈希表可以很方便地实现。</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">detectCycle</span><span class="hljs-params">(ListNode head)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> head;<br>        Set&lt;ListNode&gt; visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ListNode&gt;();<br>        <span class="hljs-keyword">while</span> (pos != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (visited.contains(pos)) &#123;<br>                <span class="hljs-keyword">return</span> pos;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                visited.add(pos);<br>            &#125;<br>            pos = pos.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析-3"><a href="#复杂度分析-3" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li><p>时间复杂度：O(N)，其中 N 为链表中节点的数目。我们恰好需要访问链表中的每一个节点。</p></li><li><p>空间复杂度：O(N)，其中 N 为链表中节点的数目。我们需要将链表中的每个节点都保存在哈希表当中。</p></li></ul><h2 id="快慢指针总结"><a href="#快慢指针总结" class="headerlink" title="快慢指针总结"></a>快慢指针总结</h2><ol><li>fast先走，slow后走，两者移动步幅相同</li><li>fast和slow同时走，移动步幅不同，slow每次移动一步，fast每次移动2步</li></ol><p>双指针法将时间复杂度：O(n^2)的解法优化为 O(n)的解法。也就是降一个数量级，题目如下：</p><ul><li><a href="https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html">27.移除元素(opens new window)</a></li><li><a href="https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html">15.三数之和(opens new window)</a></li><li><a href="https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html">18.四数之和(opens new window)</a></li></ul><p>链表相关双指针题目：</p><ul><li><a href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html">206.反转链表(opens new window)</a></li><li><a href="https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html">19.删除链表的倒数第N个节点(opens new window)</a></li><li><a href="https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html">面试题 02.07. 链表相交(opens new window)</a></li><li><a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">142题.环形链表II</a></li></ul><h1 id="3-哈希表"><a href="#3-哈希表" class="headerlink" title="3. 哈希表"></a>3. 哈希表</h1><h2 id="3-1-哈希表基础"><a href="#3-1-哈希表基础" class="headerlink" title="3.1 哈希表基础"></a>3.1 哈希表基础</h2><p>哈希表，也称散列表。</p><blockquote><p>哈希表是根据关键码的值而直接进行访问的数据结构。</p></blockquote><p><strong>一般哈希表都是用来快速判断一个元素是否出现集合里。</strong></p><p>例如要查询一个名字是否在这所学校里。要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。</p><h3 id="常见的三种哈希结构"><a href="#常见的三种哈希结构" class="headerlink" title="常见的三种哈希结构"></a>常见的三种哈希结构</h3><p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p><ul><li>数组(array)</li><li>set(集合)</li><li>map(映射)</li></ul><p>哈希法也是<strong>牺牲了空间换取了时间</strong>，因为我们要使用额外的数组，set或者是map来存放数据，才能实现快速的查找。</p><p>如果在做面试题目的时候遇到需要<strong>判断一个元素是否出现过</strong>的场景也应该第一时间想到哈希法</p><h2 id="3-2-有效的字母异位词"><a href="#3-2-有效的字母异位词" class="headerlink" title="3.2 有效的字母异位词"></a>3.2 有效的字母异位词</h2><h3 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnagram</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        HashMap&lt;Character, Integer&gt; cntS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> a: s.toCharArray()) &#123;<br>            cntS.put(a, cntS.getOrDefault(a, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> b: t.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span>(cntS.getOrDefault(b, -<span class="hljs-number">1</span>) == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cntS.put(b, cntS.getOrDefault(b, <span class="hljs-number">0</span>) - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> c:cntS.keySet()) &#123;<br>            <span class="hljs-keyword">if</span>(cntS.get(c) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>相关题目从此开始暂时搁置</p><h2 id="3-3-两个数组的交集"><a href="#3-3-两个数组的交集" class="headerlink" title="3.3 两个数组的交集"></a>3.3 两个数组的交集</h2><h3 id="思路一：使用hashmap"><a href="#思路一：使用hashmap" class="headerlink" title="思路一：使用hashmap"></a>思路一：使用hashmap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        HashSet&lt;Integer&gt; nums1_set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        HashSet&lt;Integer&gt; result_set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: nums1) &#123;<br>            nums1_set.add(i);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: nums2) &#123;<br>            <span class="hljs-keyword">if</span>(nums1_set.contains(i)) &#123;<br>                result_set.add(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result_set.stream().mapToInt((x) -&gt; x).toArray();<br>    &#125;<br></code></pre></td></tr></table></figure><p>遇到哈希问题我直接都用set不就得了，用什么数组啊。</p><p>直接使用set 不仅<strong>占用空间</strong>比数组<strong>大</strong>，而且<strong>速度</strong>要比数组<strong>慢</strong>，set把数值映射到key上都要做hash计算的。</p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p><em>O</em>(<em>m</em>+<em>n</em>)</p><h3 id="思路二：使用hash数组"><a href="#思路二：使用hash数组" class="headerlink" title="思路二：使用hash数组"></a>思路二：使用hash数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br>        <span class="hljs-type">int</span>[] hash1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1002</span>];<br>        <span class="hljs-type">int</span>[] hash2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">1002</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : nums1)<br>            hash1[i]++;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : nums2)<br>            hash2[i]++;<br>        List&lt;Integer&gt; resList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1002</span>; i++)<br>            <span class="hljs-keyword">if</span>(hash1[i] &gt; <span class="hljs-number">0</span> &amp;&amp; hash2[i] &gt; <span class="hljs-number">0</span>)<br>                resList.add(i);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> res[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[resList.size()];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : resList)<br>            res[index++] = i;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-快乐数"><a href="#3-4-快乐数" class="headerlink" title="3.4 快乐数"></a>3.4 快乐数</h2><p>根据我们的探索，我们猜测会有以下三种可能。</p><ul><li>最终会得到 1。</li><li>最终会进入循环。</li><li>值会越来越大，最后接近无穷大。</li></ul><p>第三个情况比较难以检测和处理。我们怎么知道它会继续变大，而不是最终得到 1 呢？我们可以仔细想一想，每一位数的最大数字的下一位数是多少。</p><table><thead><tr><th>Digits</th><th>Largest</th><th>Next</th></tr></thead><tbody><tr><td>1</td><td>9</td><td>81</td></tr><tr><td>2</td><td>99</td><td>162</td></tr><tr><td>3</td><td>999</td><td>243</td></tr><tr><td>4</td><td>9999</td><td>324</td></tr><tr><td>13</td><td>9999999999999</td><td>1053</td></tr></tbody></table><p>对于 3 位数的数字，它不可能大于 243。这意味着它要么被困在 243 以下的循环内，要么跌到 1。4 位或 4 位以上的数字在每一步都会丢失一位，直到降到 3 位为止。所以我们知道，最坏的情况下，算法可能会在 243 以下的所有数字上循环，然后回到它已经到过的一个循环或者回到 1。但它不会无限期地进行下去，所以我们排除第三种选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n &gt; <span class="hljs-number">0</span>) &#123;<br>            res += (n % <span class="hljs-number">10</span>) * (n % <span class="hljs-number">10</span>);<br>            n /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        HashSet&lt;Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(n != <span class="hljs-number">1</span> &amp;&amp; !cnt.contains(n)) &#123;<br>            cnt.add(n);<br>            n = getSum(n);<br>        &#125;<br>        <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析-4"><a href="#复杂度分析-4" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p>确定这个问题的时间复杂度对于一个「简单」级别的问题来说是一个挑战。如果您对这些问题还不熟悉，可以尝试只计算 getNext(n) 函数的时间复杂度。</p><ul><li><p>时间复杂度：<br>$$<br>O(243⋅3+logn+loglogn+logloglogn)… &#x3D; O(logn)<br>$$</p><ul><li>查找给定数字的下一个值的成本为 O(logn)，因为我们正在处理数字中的每位数字，而数字中的位数由 logn 给定。</li><li>要计算出总的时间复杂度，我们需要仔细考虑循环中有多少个数字，它们有多大。</li><li>我们在上面确定，一旦一个数字低于 243，它就不可能回到 243 以上。因此，我们就可以用 243 以下最长循环的长度来代替 243，不过，因为常数无论如何都无关紧要，所以我们不会担心它。</li><li>对于高于 243 的 n，我们需要考虑循环中每个数高于 243 的成本。通过数学运算，我们可以证明在最坏的情况下，这些成本将是 O(logn)+O(loglogn)+O(logloglogn)…。幸运的是，O(logn) 是占主导地位的部分，而其他部分相比之下都很小（总的来说，它们的总和小于logn），所以我们可以忽略它们。</li></ul></li><li><p>空间复杂度：O(logn)。与时间复杂度密切相关的是衡量我们放入哈希集合中的数字以及它们有多大的指标。对于足够大的 n，大部分空间将由 n 本身占用。我们可以很容易地优化到 O(243⋅3)&#x3D;O(1)，方法是只保存集合中小于 243 的数字，因为对于较高的数字，无论如何都不可能返回到它们。</p></li></ul><h3 id="思路二：快慢指针"><a href="#思路二：快慢指针" class="headerlink" title="思路二：快慢指针"></a>思路二：快慢指针</h3><p>通过反复调用 getNext(n) 得到的链是一个隐式的链表。隐式意味着我们没有实际的链表节点和指针，但数据仍然形成链表结构。起始数字是链表的头 “节点”，链中的所有其他数字都是节点。next 指针是通过调用 getNext(n) 函数获得。</p><p>意识到我们实际有个链表，那么这个问题就可以转换为检测一个链表是否有环。因此我们在这里可以使用弗洛伊德循环查找算法。这个算法是两个奔跑选手，一个跑的快，一个跑得慢。在龟兔赛跑的寓言中，跑的慢的称为 “乌龟”，跑得快的称为 “兔子”。</p><p>不管乌龟和兔子在循环中从哪里开始，它们最终都会相遇。这是因为兔子每走一步就向乌龟靠近一个节点（在它们的移动方向上）。</p><p><strong>算法</strong></p><p>我们不是只跟踪链表中的一个值，而是跟踪两个值，称为快跑者和慢跑者。在算法的每一步中，慢速在链表中前进 1 个节点，快跑者前进 2 个节点（对 getNext(n) 函数的嵌套调用）。</p><p>如果 n 是一个快乐数，即没有循环，那么快跑者最终会比慢跑者先到达数字 1。</p><p>如果 n 不是一个快乐的数字，那么最终快跑者和慢跑者将在同一个数字上相遇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">totalSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> n % <span class="hljs-number">10</span>;<br>            n = n / <span class="hljs-number">10</span>;<br>            totalSum += d * d;<br>        &#125;<br>        <span class="hljs-keyword">return</span> totalSum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHappy</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slowRunner</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">fastRunner</span> <span class="hljs-operator">=</span> getNext(n);<br>        <span class="hljs-keyword">while</span> (fastRunner != <span class="hljs-number">1</span> &amp;&amp; slowRunner != fastRunner) &#123;<br>            slowRunner = getNext(slowRunner);<br>            fastRunner = getNext(getNext(fastRunner));<br>        &#125;<br>        <span class="hljs-keyword">return</span> fastRunner == <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析-5"><a href="#复杂度分析-5" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：O(logn)。该分析建立在对前一种方法的分析的基础上，但是这次我们需要跟踪两个指针而不是一个指针来分析，以及在它们相遇前需要绕着这个循环走多少次。<ul><li>如果没有循环，那么快跑者将先到达 1，慢跑者将到达链表中的一半。我们知道最坏的情况下，成本是 O(2⋅logn)&#x3D;O(logn)。</li><li>一旦两个指针都在循环中，在每个循环中，快跑者将离慢跑者更近一步。一旦快跑者落后慢跑者一步，他们就会在下一步相遇。假设循环中有 k 个数字。如果他们的起点是相隔 k−1 的位置（这是他们可以开始的最远的距离），那么快跑者需要 k−1 步才能到达慢跑者，这对于我们的目的来说也是不变的。因此，主操作仍然在计算起始 n 的下一个值，即 O(logn)。</li></ul></li><li>空间复杂度：O(1)，对于这种方法，我们不需要哈希集来检测循环。指针需要常数的额外空间。</li></ul><h2 id="3-5-两数之和"><a href="#3-5-两数之和" class="headerlink" title="3.5 两数之和"></a>3.5 两数之和</h2><p>哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        HashMap&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(map.containsKey(target - nums[i])) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;<br>            &#125;<br>            map.put(nums[i], i);<br>        &#125; <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;No two sum solution&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-四数相加"><a href="#3-6-四数相加" class="headerlink" title="3.6 四数相加"></a>3.6 四数相加</h2><h3 id="思路一：分组-哈希表"><a href="#思路一：分组-哈希表" class="headerlink" title="思路一：分组+哈希表"></a>思路一：分组+哈希表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fourSumCount</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2, <span class="hljs-type">int</span>[] nums3, <span class="hljs-type">int</span>[] nums4)</span> &#123;<br>        HashMap&lt;Integer, Integer&gt; sum = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> a: nums1) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> b: nums2) &#123;<br>                sum.put(a + b, sum.getOrDefault(a + b, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125; <br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> c: nums3) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d: nums4) &#123;<br>                count += sum.getOrDefault(-(c + d), <span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="复杂度分析-6"><a href="#复杂度分析-6" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><ul><li>时间复杂度：$O(n^2)$。我们使用了两次二重循环，时间复杂度均为$O(n^2)$。在循环中对哈希映射进行的修改以及查询操作的期望时间复杂度均为 O(1)，因此总时间复杂度为$O(n^2)$。</li><li>空间复杂度：$O(n^2)$，即为哈希映射需要使用的空间。在最坏的情况下，A[i]+B[j] 的值均不相同，因此值的个数为$n^2$，也就需要 $O(n^2)$的空间。</li></ul><h2 id="3-7-三数之和"><a href="#3-7-三数之和" class="headerlink" title="3.7 三数之和"></a>3.7 三数之和</h2><h3 id="思路一：双指针"><a href="#思路一：双指针" class="headerlink" title="思路一：双指针"></a>思路一：双指针</h3><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> nums.length;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Arrays.sort(nums);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length - <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> nums[i];<br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; first == nums[i - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(first + nums[i + <span class="hljs-number">1</span>] + nums[i + <span class="hljs-number">2</span>] &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(first + nums[length - <span class="hljs-number">1</span>] + nums[length - <span class="hljs-number">2</span>] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> length - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(l &lt; r) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> nums[l] + nums[r] + first;<br>                <span class="hljs-keyword">if</span>(s &gt; <span class="hljs-number">0</span>) &#123;<br>                    r--;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s &lt; <span class="hljs-number">0</span>) &#123;<br>                    l++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">// 可以用List.of()或Arrays.asList()</span><br>                    res.add(Arrays.asList(first, nums[l], nums[r]));<br>                    l ++;<br>                    <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l - <span class="hljs-number">1</span>]) l++;<br>                    r --;<br>                    <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; nums[r] == nums[r + <span class="hljs-number">1</span>]) r--;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h4><ul><li>时间复杂度: O(n^2)</li><li>空间复杂度: O(1)</li></ul><h3 id="思路二：哈希（看不懂，不推荐）"><a href="#思路二：哈希（看不懂，不推荐）" class="headerlink" title="思路二：哈希（看不懂，不推荐）"></a>思路二：哈希（看不懂，不推荐）</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result;<br>        sort(nums.begin(), nums.end());<br>        <span class="hljs-comment">// 找出a + b + c = 0</span><br>        <span class="hljs-comment">// a = nums[i], b = nums[j], c = -(a + b)</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;<br>            <span class="hljs-comment">// 排序之后如果第一个元素已经大于零，那么不可能凑成三元组</span><br>            <span class="hljs-keyword">if</span> (nums[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123; <span class="hljs-comment">//三元组元素a去重</span><br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            unordered_set&lt;<span class="hljs-type">int</span>&gt; set;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums.size(); j++) &#123;<br>                <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">2</span><br>                        &amp;&amp; nums[j] == nums[j-<span class="hljs-number">1</span>]<br>                        &amp;&amp; nums[j-<span class="hljs-number">1</span>] == nums[j-<span class="hljs-number">2</span>]) &#123; <span class="hljs-comment">// 三元组元素b去重</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> - (nums[i] + nums[j]);<br>                <span class="hljs-keyword">if</span> (set.find(c) != set.end()) &#123;<br>                    result.push_back(&#123;nums[i], nums[j], c&#125;);<br>                    set.erase(c);<span class="hljs-comment">// 三元组元素c去重</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    set.insert(nums[j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="时空复杂度-1"><a href="#时空复杂度-1" class="headerlink" title="时空复杂度"></a>时空复杂度</h4><ul><li>时间复杂度: O(n^2)</li><li>空间复杂度: O(n)</li></ul><h2 id="3-8-四数之和"><a href="#3-8-四数之和" class="headerlink" title="3.8 四数之和"></a>3.8 四数之和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">fourSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>        Arrays.sort(nums);<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n - <span class="hljs-number">3</span>; i ++) &#123;<br>            <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; target &amp;&amp; target &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; n - <span class="hljs-number">2</span>; j ++) &#123;<br>                <span class="hljs-keyword">if</span>(j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>                <span class="hljs-keyword">if</span>(nums[i] + nums[j] &gt; target &amp;&amp; target &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> j + <span class="hljs-number">1</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> n - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(l &lt; r) &#123;<br>                    <span class="hljs-type">long</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (<span class="hljs-type">long</span>) nums[i] + nums[j] + nums[l] + nums[r];<br>                    <span class="hljs-keyword">if</span>(s &gt; target) &#123;<br>                        r--;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s &lt; target) &#123;<br>                        l++;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        res.add(Arrays.asList(nums[i], nums[j], nums[l], nums[r]));<br>                        l++;<br>                        <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; nums[l] == nums[l - <span class="hljs-number">1</span>]) l++;<br>                        r--;<br>                        <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; nums[r] == nums[r + <span class="hljs-number">1</span>]) r--;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="4-字符串"><a href="#4-字符串" class="headerlink" title="4. 字符串"></a>4. 字符串</h1><h2 id="4-1-反转字符串"><a href="#4-1-反转字符串" class="headerlink" title="4.1 反转字符串"></a>4.1 反转字符串</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (start &lt; length) &#123;<br>            <span class="hljs-comment">// 找到k处和2k处</span><br>            <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>            <span class="hljs-comment">// 与length进行判断，如果大于length了，那就将其置为length</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">firstK</span> <span class="hljs-operator">=</span> (start + k &gt; length) ? length : start + k;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">secondK</span> <span class="hljs-operator">=</span> (start + (<span class="hljs-number">2</span> * k) &gt; length) ? length : start + (<span class="hljs-number">2</span> * k);<br><br>            <span class="hljs-comment">//无论start所处位置，至少会反转一次</span><br>            temp.append(s.substring(start, firstK));<br>            res.append(temp.reverse());<br><br>            <span class="hljs-comment">// 如果firstK到secondK之间有元素，这些元素直接放入res里即可。</span><br>            <span class="hljs-keyword">if</span> (firstK &lt; secondK) &#123; <span class="hljs-comment">//此时剩余长度一定大于k。</span><br>                res.append(s.substring(firstK, secondK));<br>            &#125;<br>            start += (<span class="hljs-number">2</span> * k);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解法二（似乎更容易理解点）</span><br><span class="hljs-comment">//题目的意思其实概括为 每隔2k个反转前k个，尾数不够k个时候全部反转</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ch.length; i += <span class="hljs-number">2</span> * k)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-comment">//这里是判断尾数够不够k个来取决end指针的位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> Math.min(ch.length - <span class="hljs-number">1</span>, start + k - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//用异或运算反转 a^a = 0, a^0 = a(异或：相同为0，不同为1)</span><br>            <span class="hljs-keyword">while</span>(start &lt; end)&#123;<br>                ch[start] ^= ch[end];<br>                ch[end] ^= ch[start];<br>                ch[start] ^= ch[end];<br>                start++;<br>                end--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ch);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 解法二还可以用temp来交换数值，会的人更多些</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; ch.length;i += <span class="hljs-number">2</span> * k)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-comment">// 判断尾数够不够k个来取决end指针的位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> Math.min(ch.length - <span class="hljs-number">1</span>,start + k - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span>(start &lt; end)&#123;<br>                <br>                <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> ch[start];<br>                ch[start] = ch[end];<br>                ch[end] = temp;<br><br>                start++;<br>                end--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ch);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解法3</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseStr</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-type">char</span>[] ch = s.toCharArray();<br>        <span class="hljs-comment">// 1. 每隔 2k 个字符的前 k 个字符进行反转</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; ch.length; i += <span class="hljs-number">2</span> * k) &#123;<br>            <span class="hljs-comment">// 2. 剩余字符小于 2k 但大于或等于 k 个，则反转前 k 个字符</span><br>            <span class="hljs-keyword">if</span> (i + k &lt;= ch.length) &#123;<br>                reverse(ch, i, i + k -<span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// 3. 剩余字符少于 k 个，则将剩余字符全部反转</span><br>            reverse(ch, i, ch.length - <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(ch);<br><br>    &#125;<br>    <span class="hljs-comment">// 定义翻转函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span>[] ch, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-keyword">for</span> (; i &lt; j; i++, j--) &#123;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">temp</span>  <span class="hljs-operator">=</span> ch[i];<br>        ch[i] = ch[j];<br>        ch[j] = temp;<br>    &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-替换数字"><a href="#4-2-替换数字" class="headerlink" title="4.2 替换数字"></a>4.2 替换数字</h2><p><strong>很多数组填充类的问题，其做法都是先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</strong></p><p>这么做有两个好处：</p><ol><li>不用申请新数组。</li><li>从后向前填充元素，避免了从前向后填充元素时，每次添加元素都要将添加元素之后的所有元素向后移动的问题。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">replaceNumber</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 统计数字的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sOldSize</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(Character.isDigit(s.charAt(i)))&#123;<br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 扩充字符串s的大小，也就是每个空格替换成&quot;number&quot;之后的大小</span><br>        <span class="hljs-type">char</span>[] newS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[s.length() + count * <span class="hljs-number">5</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sNewSize</span> <span class="hljs-operator">=</span> newS.length;<br>        <span class="hljs-comment">// 将旧字符串的内容填入新数组</span><br>        System.arraycopy(s.toCharArray(), <span class="hljs-number">0</span>, newS, <span class="hljs-number">0</span>, sOldSize);<br>        <span class="hljs-comment">// 从后先前将空格替换为&quot;number&quot;</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sNewSize - <span class="hljs-number">1</span>, j = sOldSize - <span class="hljs-number">1</span>; j &lt; i; j--, i--) &#123;<br>            <span class="hljs-keyword">if</span> (!Character.isDigit(newS[j])) &#123;<br>                newS[i] = newS[j];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                newS[i] = <span class="hljs-string">&#x27;r&#x27;</span>;<br>                newS[i - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;e&#x27;</span>;<br>                newS[i - <span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>                newS[i - <span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;m&#x27;</span>;<br>                newS[i - <span class="hljs-number">4</span>] = <span class="hljs-string">&#x27;u&#x27;</span>;<br>                newS[i - <span class="hljs-number">5</span>] = <span class="hljs-string">&#x27;n&#x27;</span>;<br>                i -= <span class="hljs-number">5</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(newS);<br>    &#125;;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(replaceNumber(s));<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">replaceNumber</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">newS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> a : s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span> (Character.isDigit(a)) &#123;<br>                newS.append(<span class="hljs-string">&quot;number&quot;</span>); <span class="hljs-comment">// 直接追加&quot;rebum&quot;</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                newS.append(a);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> newS.toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.println(replaceNumber(s));<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-翻转字符串里的单词"><a href="#4-3-翻转字符串里的单词" class="headerlink" title="4.3 翻转字符串里的单词"></a>4.3 翻转字符串里的单词</h2><p><strong>思路</strong></p><p>首先，去除多余的空格（参考双指针（快慢指针）的1.2 移除元素）；接着，翻转整个字符串；最后，翻转每个单词。</p><p><strong>代码实现</strong></p><ul><li>解法一：快慢指针去除空格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一：StringBuilder </span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> removeExtreSpace(s);<br>        reverse(sb, <span class="hljs-number">0</span>, sb.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sb.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(sb.charAt(i) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                reverse(sb, start, i - <span class="hljs-number">1</span>);<br>                start = i + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        reverse(sb, start, sb.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br>    <span class="hljs-keyword">public</span> StringBuilder <span class="hljs-title function_">removeExtreSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span>(s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                <span class="hljs-keyword">if</span>(slow != <span class="hljs-number">0</span>) sb.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>                <span class="hljs-keyword">while</span>(i &lt; s.length() &amp;&amp; s.charAt(i) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                    sb.append(s.charAt(i++));<br>                    slow++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(StringBuilder sb, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-keyword">while</span>(start &lt; end) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> sb.charAt(start);<br>            sb.setCharAt(start, sb.charAt(end));<br>            sb.setCharAt(end, temp);<br>            start++;<br>            end--;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>解法二：运用“或”条件巧解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不使用Java内置方法实现</span><br><span class="hljs-comment">     * &lt;p&gt;</span><br><span class="hljs-comment">     * 1.去除首尾以及中间多余空格</span><br><span class="hljs-comment">     * 2.反转整个字符串</span><br><span class="hljs-comment">     * 3.反转各个单词</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseWords2() called with: s = [&quot; + s + &quot;]&quot;);</span><br>        <span class="hljs-comment">// 1.去除首尾以及中间多余空格</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> removeSpace(s);<br>        <span class="hljs-comment">// 2.反转整个字符串</span><br>        reverseString(sb, <span class="hljs-number">0</span>, sb.length() - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 3.反转各个单词</span><br>        reverseEachWord(sb);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> StringBuilder <span class="hljs-title function_">removeSpace</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.removeSpace() called with: s = [&quot; + s + &quot;]&quot;);</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> s.length() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (s.charAt(start) == <span class="hljs-string">&#x27; &#x27;</span>) start++;<br>        <span class="hljs-keyword">while</span> (s.charAt(end) == <span class="hljs-string">&#x27; &#x27;</span>) end--;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span> (start &lt;= end) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.charAt(start);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27; &#x27;</span> || sb.charAt(sb.length() - <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                sb.append(c);<br>            &#125;<br>            start++;<br>        &#125;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.removeSpace returned: sb = [&quot; + sb + &quot;]&quot;);</span><br>        <span class="hljs-keyword">return</span> sb;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反转字符串指定区间[start, end]的字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseString</span><span class="hljs-params">(StringBuilder sb, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseString() called with: sb = [&quot; + sb + &quot;], start = [&quot; + start + &quot;], end = [&quot; + end + &quot;]&quot;);</span><br>        <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>            <span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> sb.charAt(start);<br>            sb.setCharAt(start, sb.charAt(end));<br>            sb.setCharAt(end, temp);<br>            start++;<br>            end--;<br>        &#125;<br>        <span class="hljs-comment">// System.out.println(&quot;ReverseWords.reverseString returned: sb = [&quot; + sb + &quot;]&quot;);</span><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseEachWord</span><span class="hljs-params">(StringBuilder sb)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sb.length();<br>        <span class="hljs-keyword">while</span> (start &lt; n) &#123;<br>            <span class="hljs-keyword">while</span> (end &lt; n &amp;&amp; sb.charAt(end) != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                end++;<br>            &#125;<br>            reverseString(sb, start, end - <span class="hljs-number">1</span>);<br>            start = end + <span class="hljs-number">1</span>;<br>            end = start + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//二：字符数组</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//用 char[] 来实现 String 的 removeExtraSpaces，reverse 操作</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-comment">//1.去除首尾以及中间多余空格</span><br>        chars = removeExtraSpaces(chars);<br>        <span class="hljs-comment">//2.整个字符串反转</span><br>        reverse(chars, <span class="hljs-number">0</span>, chars.length - <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//3.单词反转</span><br>        reverseEachWord(chars);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br>    &#125;<br><br>    <span class="hljs-comment">//1.用 快慢指针 去除首尾以及中间多余空格，可参考数组元素移除的题解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span>[] removeExtraSpaces(<span class="hljs-type">char</span>[] chars) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">slow</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">fast</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; fast &lt; chars.length; fast++) &#123;<br>            <span class="hljs-comment">//先用 fast 移除所有空格</span><br>            <span class="hljs-keyword">if</span> (chars[fast] != <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                <span class="hljs-comment">//在用 slow 加空格。 除第一个单词外，单词末尾要加空格</span><br>                <span class="hljs-keyword">if</span> (slow != <span class="hljs-number">0</span>)<br>                    chars[slow++] = <span class="hljs-string">&#x27; &#x27;</span>;<br>                <span class="hljs-comment">//fast 遇到空格或遍历到字符串末尾，就证明遍历完一个单词了</span><br>                <span class="hljs-keyword">while</span> (fast &lt; chars.length &amp;&amp; chars[fast] != <span class="hljs-string">&#x27; &#x27;</span>)<br>                    chars[slow++] = chars[fast++];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//相当于 c++ 里的 resize()</span><br>        <span class="hljs-type">char</span>[] newChars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[slow];<br>        System.arraycopy(chars, <span class="hljs-number">0</span>, newChars, <span class="hljs-number">0</span>, slow); <br>        <span class="hljs-keyword">return</span> newChars;<br>    &#125;<br><br>    <span class="hljs-comment">//双指针实现指定范围内字符串反转，可参考字符串反转题解</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>        <span class="hljs-keyword">if</span> (right &gt;= chars.length) &#123;<br>            System.out.println(<span class="hljs-string">&quot;set a wrong right&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            chars[left] ^= chars[right];<br>            chars[right] ^= chars[left];<br>            chars[left] ^= chars[right];<br>            left++;<br>            right--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//3.单词反转</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverseEachWord</span><span class="hljs-params">(<span class="hljs-type">char</span>[] chars)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//end &lt;= s.length() 这里的 = ，是为了让 end 永远指向单词末尾后一个位置，这样 reverse 的实参更好设置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; end &lt;= chars.length; end++) &#123;<br>            <span class="hljs-comment">// end 每次到单词末尾后的空格或串尾,开始反转单词</span><br>            <span class="hljs-keyword">if</span> (end == chars.length || chars[end] == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>                reverse(chars, start, end - <span class="hljs-number">1</span>);<br>                start = end + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>思路三：创建新字符数组填充</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverseWords</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-comment">//源字符数组</span><br>        <span class="hljs-type">char</span>[] initialArr = s.toCharArray();<br>        <span class="hljs-comment">//新字符数组</span><br>        <span class="hljs-type">char</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[initialArr.length+<span class="hljs-number">1</span>];<span class="hljs-comment">//下面循环添加&quot;单词 &quot;，最终末尾的空格不会返回</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">newArrPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//i来进行整体对源字符数组从后往前遍历</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> initialArr.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; initialArr[i] == <span class="hljs-string">&#x27; &#x27;</span>)&#123;i--;&#125;  <span class="hljs-comment">//跳过空格</span><br>            <span class="hljs-comment">//此时i位置是边界或!=空格，先记录当前索引，之后的while用来确定单词的首字母的位置</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-keyword">while</span>(i&gt;=<span class="hljs-number">0</span> &amp;&amp; initialArr[i] != <span class="hljs-string">&#x27; &#x27;</span>)&#123;i--;&#125; <br>            <span class="hljs-comment">//指定区间单词取出(由于i为首字母的前一位，所以这里+1,)，取出的每组末尾都带有一个空格</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt;= right; j++) &#123;<br>                newArr[newArrPos++] = initialArr[j];<br>                <span class="hljs-keyword">if</span>(j == right)&#123;<br>                    newArr[newArrPos++] = <span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//空格</span><br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//若是原始字符串没有单词，直接返回空字符串；若是有单词，返回0-末尾空格索引前范围的字符数组(转成String返回)</span><br>        <span class="hljs-keyword">if</span>(newArrPos == <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(newArr,<span class="hljs-number">0</span>,newArrPos-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>复杂度</strong></p><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(1) 或 O(n)，取决于语言中字符串是否可变</li></ul><h2 id="4-4-右旋转字符串"><a href="#4-4-右旋转字符串" class="headerlink" title="4.4 右旋转字符串"></a>4.4 右旋转字符串</h2><h2 id="4-5-KMP字符串"><a href="#4-5-KMP字符串" class="headerlink" title="4.5 KMP字符串"></a>4.5 KMP字符串</h2><p><strong>题目描述</strong></p><p>实现 strStr() 函数。</p><p>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。</p><p>示例 1: 输入: haystack &#x3D; “hello”, needle &#x3D; “ll” 输出: 2</p><p>示例 2: 输入: haystack &#x3D; “aaaaa”, needle &#x3D; “bba” 输出: -1</p><p>说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。</p><p><strong>思路</strong></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getNext(String s) &#123;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(j) != s.charAt(i)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(s.charAt(j) == s.charAt(i)) &#123;<br>                j ++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> next;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strStr</span><span class="hljs-params">(String haystack, String needle)</span> &#123;<br>        <span class="hljs-keyword">if</span>(needle.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span>[] next = getNext(needle);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; haystack.length(); i++) &#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; needle.charAt(j) != haystack.charAt(i)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(haystack.charAt(i) == needle.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(j == needle.length()) &#123;<br>                <span class="hljs-keyword">return</span> i - j + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-6-最小循环节"><a href="#4-6-最小循环节" class="headerlink" title="4.6 最小循环节"></a>4.6 最小循环节</h2><p><strong>题目描述</strong></p><p>给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，并且长度不超过10000。</p><p>示例 1:</p><ul><li>输入: “abab”</li><li>输出: True</li><li>解释: 可由子字符串 “ab” 重复两次构成。</li></ul><p>示例 2:</p><ul><li>输入: “aba”</li><li>输出: False</li></ul><p>示例 3:</p><ul><li>输入: “abcabcabcabc”</li><li>输出: True</li><li>解释: 可由子字符串 “abc” 重复四次构成。 (或者子字符串 “abcabc” 重复两次构成。</li></ul><p><strong>视频参考</strong></p><p><a href="https://www.acwing.com/video/4635/">AcWing 141. 周期（蓝桥杯集训·每日一题） - AcWing</a></p><p><strong>代码实现</strong></p><ol><li>最小循环节判断准则：len-next[len]能够被len整除</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span>(s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <br>        next[<span class="hljs-number">0</span>] = j;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">while</span>(j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;<br>                j = next[j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(s.charAt(i) == s.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            next[i] = j;<br>        &#125;<br>        <span class="hljs-comment">// 别忘了next[n - 1] = 0时也能被整除，但不符合条件，不能整个字符串看作一个循环节</span><br>        <span class="hljs-keyword">if</span>(next[n - <span class="hljs-number">1</span>] != <span class="hljs-number">0</span> &amp;&amp; n % (n - next[n - <span class="hljs-number">1</span>]) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代码随想录&amp;acwing</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">repeatedSubstringPattern</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (s.equals(<span class="hljs-string">&quot;&quot;</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-comment">// 原串加个空格(哨兵)，使下标从1开始，这样j从0开始，也不用初始化了</span><br>        s = <span class="hljs-string">&quot; &quot;</span> + s;<br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len + <span class="hljs-number">1</span>];<br><br>        <span class="hljs-comment">// 构造 next 数组过程，j从0开始(空格)，i从2开始</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br>            <span class="hljs-comment">// 匹配不成功，j回到前一位置 next 数组所对应的值</span><br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; chars[i] != chars[j + <span class="hljs-number">1</span>]) j = next[j];<br>            <span class="hljs-comment">// 匹配成功，j往后移</span><br>            <span class="hljs-keyword">if</span> (chars[i] == chars[j + <span class="hljs-number">1</span>]) j++;<br>            <span class="hljs-comment">// 更新 next 数组的值</span><br>            next[i] = j;<br>        &#125;<br><br>        <span class="hljs-comment">// 最后判断是否是重复的子字符串，这里 next[len] 即代表next数组末尾的值</span><br>        <span class="hljs-keyword">if</span> (next[len] &gt; <span class="hljs-number">0</span> &amp;&amp; len % (len - next[len]) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>判断字符串s是否由重复子串组成，只要两个s拼接在一起，里面还出现一个s的话，就说明是由重复子串组成</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">repeatedSubstringPattern</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        string t = s + s;<br>        t.<span class="hljs-built_in">erase</span>(t.<span class="hljs-built_in">begin</span>()); t.<span class="hljs-built_in">erase</span>(t.<span class="hljs-built_in">end</span>() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 掐头去尾</span><br>        <span class="hljs-keyword">if</span> (t.<span class="hljs-built_in">find</span>(s) != std::string::npos) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// r</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="6-栈和队列"><a href="#6-栈和队列" class="headerlink" title="6. 栈和队列"></a>6. 栈和队列</h1><h2 id="6-2-队列实现栈"><a href="#6-2-队列实现栈" class="headerlink" title="6.2 队列实现栈"></a>6.2 队列实现栈</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyStack</span> &#123;<br>    Queue&lt;Integer&gt; myQueue;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyStack</span><span class="hljs-params">()</span> &#123;<br>        myQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        myQueue.offer(x);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> myQueue.size();<br>        size--;<br>        <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>) &#123;<br>            myQueue.offer(myQueue.poll());<br>        &#125;<br>        <span class="hljs-keyword">return</span> myQueue.poll(); <br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> myQueue.size();<br>        size--;<br>        <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>) &#123;<br>            myQueue.offer(myQueue.poll());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> myQueue.peek(); <br>        myQueue.offer(myQueue.poll());<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">empty</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> myQueue.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>一个队列实现</li><li>两个队列实现</li></ul><h2 id="6-3-有效的括号"><a href="#6-3-有效的括号" class="headerlink" title="6.3 有效的括号"></a>6.3 有效的括号</h2><p><strong>思路一</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        Stack&lt;Character&gt; symbol = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> a: s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;(&#x27;</span> || a == <span class="hljs-string">&#x27;&#123;&#x27;</span> || a == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>                symbol.push(a);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(symbol.empty()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(symbol.peek() != <span class="hljs-string">&#x27;(&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                symbol.pop();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;&#125;&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(symbol.peek() != <span class="hljs-string">&#x27;&#123;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                symbol.pop();<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a == <span class="hljs-string">&#x27;]&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(symbol.peek() != <span class="hljs-string">&#x27;[&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                symbol.pop();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(symbol.empty()) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思路二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        Deque&lt;Character&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-type">char</span> ch;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            ch = s.charAt(i);<br>            <span class="hljs-comment">//碰到左括号，就把相应的右括号入栈</span><br>            <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                deque.push(<span class="hljs-string">&#x27;)&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br>                deque.push(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>                deque.push(<span class="hljs-string">&#x27;]&#x27;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (deque.isEmpty() || deque.peek() != ch) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//如果是右括号判断是否和栈顶元素匹配</span><br>                deque.pop();<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//最后判断栈中元素是否匹配</span><br>        <span class="hljs-keyword">return</span> deque.isEmpty();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-4-删除字符串中的相邻相同元素"><a href="#6-4-删除字符串中的相邻相同元素" class="headerlink" title="6.4 删除字符串中的相邻相同元素"></a>6.4 删除字符串中的相邻相同元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">removeDuplicates</span><span class="hljs-params">(String s)</span> &#123;<br>        Stack&lt;Character&gt; myStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> a: s.toCharArray()) &#123;<br>            <span class="hljs-keyword">if</span>(!myStack.empty()) &#123;<br>                <span class="hljs-keyword">if</span>(myStack.peek() == a) &#123;<br>                    myStack.pop();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    myStack.push(a);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                myStack.push(a);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> myStack.size();<br>        <span class="hljs-keyword">if</span>(size == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>        <span class="hljs-type">char</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[size];<br>        <span class="hljs-keyword">while</span>(size &gt; <span class="hljs-number">0</span>) &#123;<br>            res[--size] = myStack.pop();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(res);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-5-后缀表达式求值（逆波兰表达式）"><a href="#6-5-后缀表达式求值（逆波兰表达式）" class="headerlink" title="6.5 后缀表达式求值（逆波兰表达式）"></a>6.5 后缀表达式求值（逆波兰表达式）</h2><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成 1 2 + 3 4 + * 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到运算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><p>递归就是用栈来实现的。</p><p>所以<strong>栈与递归之间在某种程度上是可以转换的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evalRPN</span><span class="hljs-params">(String[] tokens)</span> &#123;<br>        Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(String token: tokens) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;+&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> stack.pop();<br>                stack.push(num1 + num2);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;-&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> stack.pop();<br>                stack.push(num1 - num2);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;*&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> stack.pop();<br>                stack.push(num1 * num2);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;/&quot;</span>.equals(token)) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> stack.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> stack.pop();<br>                stack.push(num1 / num2);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                stack.push(Integer.valueOf(token));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Deque用法"><a href="#Deque用法" class="headerlink" title="Deque用法"></a>Deque用法</h4><p>支持在两端插入和移除元素的线性集合。 deque 这个名字是“Double-ended queues”的缩写。此接口定义访问双端元素的方法。提供了插入、删除和获取元素的方法。这些方法中的每一个都以两种形式存在：一种在操作失败时引发异常，另一种返回特殊值（ null 或 false，具体取决于操作）。后一种形式的插入操作专门设计用于容量受限 Deque 的实现;在大多数实现中，插入操作不会失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Deque</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Queue</span>&lt;E&gt;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">*                    第一个元素（头部）               最后一个元素（尾部）<br>* 操作         引发异常          返回特殊值         引发异常       特殊价值<br>* 插入        <span class="hljs-built_in">addFirst</span>(e)      <span class="hljs-built_in">offerFirst</span>(e)    <span class="hljs-built_in">addLast</span>(e)     <span class="hljs-built_in">offerLast</span>(e)<br>* 获取并删除   <span class="hljs-built_in">removeFirst</span>()    <span class="hljs-built_in">pollFirst</span>()      <span class="hljs-built_in">removeLast</span>()   <span class="hljs-built_in">pollLast</span>()<br>* 获取        <span class="hljs-built_in">getFirst</span>()        <span class="hljs-built_in">peekFirst</span>()      <span class="hljs-built_in">getLast</span>()      <span class="hljs-built_in">peekLast</span>()<br></code></pre></td></tr></table></figure><p><strong>1、此接口继承了Queue接口。当双端用作 FIFO（先进先出）行为队列时 Deque的部分方法与 Queue的等价：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">* Queue 方法    等效 Deque 的方法<br>* <span class="hljs-built_in">add</span>(e)         <span class="hljs-built_in">addLast</span>(e)<br>* <span class="hljs-built_in">offer</span>(e)       <span class="hljs-built_in">offerLast</span>(e)<br>* <span class="hljs-built_in">remove</span>()       <span class="hljs-built_in">removeFirst</span>()<br>* <span class="hljs-built_in">poll</span>()         <span class="hljs-built_in">pollFirst</span>()<br>* <span class="hljs-built_in">element</span>()      <span class="hljs-built_in">getFirst</span>()<br>* <span class="hljs-built_in">peek</span>()         <span class="hljs-built_in">peekFirst</span>()<br></code></pre></td></tr></table></figure><p><strong>2、Deque 也可以用作LIFO（后进先出）堆栈。应优先使用此接口而不是旧 Stack 类。当双端面用作堆栈时，元素将从双端的开头推送和弹出。</strong><br>*** 堆栈方法与下表所示的方法完全相同 Deque：**</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">* 堆栈方法   等效 Deque 方法<br>* <span class="hljs-built_in">push</span>(e)    <span class="hljs-built_in">addFirst</span>(e)<br>* <span class="hljs-built_in">pop</span>()      <span class="hljs-built_in">removeFirst</span>()<br>* <span class="hljs-built_in">peek</span>()     <span class="hljs-built_in">peekFirst</span>()<br></code></pre></td></tr></table></figure><p><strong>3、Deque方法详解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Deque</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Queue</span>&lt;E&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果可以在不违反容量限制的情况下立即插入指定的元素，则在此 deque 的前面插入指定的元素，如果当前没有可用空间，则抛出一个 IllegalStateException 。</span><br><span class="hljs-comment">     * 当使用容量受限的双端面时，通常最好使用方法 offerFirst。</span><br><span class="hljs-comment">     * 抛出：IllegalStateException – 如果由于容量限制而此时无法添加元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 要添加的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果可以在不违反容量限制的情况下立即插入指定的元素，则在此 deque 的末尾插入指定的元素，如果当前没有可用空间，则抛出 IllegalStateException 。</span><br><span class="hljs-comment">     * 当使用容量受限的双端面时，通常最好使用方法 offerLast。</span><br><span class="hljs-comment">     * 此方法等效于 add。</span><br><span class="hljs-comment">     * 抛出：IllegalStateException – 如果由于容量限制而此时无法添加元素</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 要添加的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将指定的元素插入到此双端的前面，除非它违反了容量限制。使用容量受限的双端式时，此方法通常比方法更 addFirst 可取，该方法只能通过引发异常来插入元素。</span><br><span class="hljs-comment">     * 返回：true 如果元素已添加到此双端，否则 false</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 要添加的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在此双端插入指定的元素，除非它违反了容量限制。使用容量受限的双端式时，此方法通常比方法更 addLast 可取，该方法只能通过引发异常来插入元素。</span><br><span class="hljs-comment">     * 返回：true 如果元素已添加到此双端，否则 false</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> e 要添加的元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E e)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索并删除此双端面的第一个元素。此方法的不同 pollFirst 之处仅在于如果此 deque 为空，则会引发异常。</span><br><span class="hljs-comment">     * 抛出：NoSuchElementException – 如果此 deque 为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索并删除此双端面的最后一个元素。此方法的不同 pollLast 之处仅在于如果此 deque 为空，则会引发异常。</span><br><span class="hljs-comment">     * 抛出：NoSuchElementException – 如果此</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">removeLast</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索并删除此双端面的第一个元素，如果此双端面为空，则返回 null 。</span><br><span class="hljs-comment">     * 返回：此Deque的头部，或者 null 如果此双端为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pollFirst</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索并删除此双端面的最后一个元素，如果此双端面为空，则返回 null 。</span><br><span class="hljs-comment">     * 返回：此双端面的尾部，或者 null 如果此双端面为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">pollLast</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索但不删除此双端面的第一个元素。此方法的不同 peekFirst 之处仅在于如果此 deque 为空，则会引发异常。</span><br><span class="hljs-comment">     * 返回：这个Deque的头</span><br><span class="hljs-comment">     * 抛出：NoSuchElementException – 如果此 deque 为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索但不删除此双端面的最后一个元素。此方法的不同 peekLast 之处仅在于如果此 deque 为空，则会引发异常。</span><br><span class="hljs-comment">     * 返回：这Deque的尾巴</span><br><span class="hljs-comment">     * 抛出：NoSuchElementException – 如果此 deque 为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">getLast</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索但不删除此双端面格式的第一个元素，如果此双端面为空，则返回 null 。</span><br><span class="hljs-comment">     * 返回：此双克的头部，或者 null 如果此双端为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peekFirst</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 检索但不删除此双端面的最后一个元素，如果此双端面为空，则返回 null 。</span><br><span class="hljs-comment">     * 返回：此双端面的尾部，或者 null 如果此双端面为空</span><br><span class="hljs-comment">     */</span><br>    E <span class="hljs-title function_">peekLast</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从此双端队列中删除指定元素的第一个匹配项。如果双端不包含元素，则保持不变。更正式地说，删除第一个元素 e ，</span><br><span class="hljs-comment">     * 使得 （o==null ？ e==null ： o.equals（e））（ 如果存在这样的元素）。如果此双端面包含指定的元素（或者等效地，如果此双端面由于调用而更改），则返回 true 。</span><br><span class="hljs-comment">     * 参数：o – 要从此 deque 中删除的元素（如果存在）</span><br><span class="hljs-comment">     * 返回：true 如果由于此调用而删除了元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeFirstOccurrence</span><span class="hljs-params">(Object o)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从此双端面中删除指定元素的最后一次出现。如果双端不包含元素，则保持不变。更正式地说，删除最后一个元素 e ，使得 （o==null ？ e==null ： o.equals（e））</span><br><span class="hljs-comment">     * （ 如果存在这样的元素）。如果此双端面包含指定的元素（或者等效地，如果此双端面由于调用而更改），则返回 true 。</span><br><span class="hljs-comment">     * 参数：o – 要从此 deque 中删除的元素（如果存在）</span><br><span class="hljs-comment">     * 返回：true 如果由于此调用而删除了元素</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeLastOccurrence</span><span class="hljs-params">(Object o)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-6-滑动窗口最大值（单调队列）"><a href="#6-6-滑动窗口最大值（单调队列）" class="headerlink" title="6.6 滑动窗口最大值（单调队列）"></a>6.6 滑动窗口最大值（单调队列）</h2><p><strong>思路一：实现自己的单调队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123;<br>    Deque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-comment">//弹出元素时，比较当前要弹出的数值是否等于队列出口的数值，如果相等则弹出</span><br>    <span class="hljs-comment">//同时判断队列当前是否为空</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">poll</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span>(deque.peek() == val) &#123;<br>            deque.pop();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//添加元素时，如果要添加的元素大于入口处的元素，就将入口元素弹出</span><br>    <span class="hljs-comment">//保证队列元素单调递减</span><br>    <span class="hljs-comment">//比如此时队列元素3,1，2将要入队，比1大，所以1弹出，此时队列：3,2</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">while</span>(!deque.isEmpty() &amp;&amp; val &gt; deque.getLast()) &#123;<br>            deque.removeLast();<br>        &#125;<br>        deque.addLast(val);<br>    &#125;<br>    <span class="hljs-comment">//队列队顶元素始终为最大值</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> deque.peek();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-type">MyQueue</span> <span class="hljs-variable">myqueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyQueue</span>();<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>            myqueue.add(nums[i]);<br>        &#125;<br>        res[index++] = myqueue.peek();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k; i &lt; nums.length; i++) &#123;<br>            myqueue.poll(nums[i - k]);<br>            myqueue.add(nums[i]);<br>            res[index++] = myqueue.peek();<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度: O(n)</li><li>空间复杂度: O(k)</li></ul><p><strong>思路二：存储下标</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//解法二</span><br><span class="hljs-comment">//利用双端队列手动实现单调队列</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用一个单调队列来存储对应的下标，每当窗口滑动的时候，直接取队列的头部指针对应的值放入结果集即可</span><br><span class="hljs-comment"> * 单调队列类似 （tail --&gt;） 3 --&gt; 2 --&gt; 1 --&gt; 0 (--&gt; head) (右边为头结点，元素存的是下标)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] maxSlidingWindow(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        ArrayDeque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n - k + <span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idx</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-comment">// 根据题意，i为nums下标，是要在[i - k + 1, i] 中选到最大值，只需要保证两点</span><br>            <span class="hljs-comment">// 1.队列头结点需要在[i - k + 1, i]范围内，不符合则要弹出</span><br>            <span class="hljs-keyword">while</span>(!deque.isEmpty() &amp;&amp; deque.peek() &lt; i - k + <span class="hljs-number">1</span>)&#123;<br>                deque.poll();<br>            &#125;<br>            <span class="hljs-comment">// 2.既然是单调，就要保证每次放进去的数字要比末尾的都大，否则也弹出</span><br>            <span class="hljs-keyword">while</span>(!deque.isEmpty() &amp;&amp; nums[deque.peekLast()] &lt; nums[i]) &#123;<br>                deque.pollLast();<br>            &#125;<br><br>            deque.offer(i);<br><br>            <span class="hljs-comment">// 因为单调，当i增长到符合第一个k范围的时候，每滑动一步都将队列头节点放入结果就行了</span><br>            <span class="hljs-keyword">if</span>(i &gt;= k - <span class="hljs-number">1</span>)&#123;<br>                res[idx++] = nums[deque.peek()];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-7-前k个高频元素"><a href="#6-7-前k个高频元素" class="headerlink" title="6.7 前k个高频元素"></a>6.7 前k个高频元素</h2><p><strong>思路</strong></p><p>优先级队列<code>priority_queue</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] topKFrequent(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k) &#123;<br>        HashMap&lt;Integer,Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[k];<br>        PriorityQueue&lt;<span class="hljs-type">int</span>[]&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((o1, o2) -&gt; o1[<span class="hljs-number">1</span>] - o2[<span class="hljs-number">1</span>]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums.length;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i ++) &#123;<br>            map.put(nums[i], map.getOrDefault(nums[i], <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> x: map.entrySet()) &#123;<br>            <span class="hljs-type">int</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>            tmp[<span class="hljs-number">0</span>] = x.getKey();<br>            tmp[<span class="hljs-number">1</span>] = x.getValue();<br>            pq.offer(tmp);<br>            <span class="hljs-keyword">if</span>(pq.size() &gt; k) &#123;<br>                pq.poll();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            res[i] = pq.poll()[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展</strong></p><p>大家对这个比较运算在建堆时是如何应用的，为什么左大于右就会建立小顶堆，反而建立大顶堆比较困惑。</p><p>确实 例如我们在写快排的cmp函数的时候，<code>return left&gt;right</code> 就是从大到小，<code>return left&lt;right</code> 就是从小到大。</p><p>优先级队列的定义正好反过来了，可能和优先级队列的源码实现有关（我没有仔细研究），我估计是底层实现上优先队列队首指向后面，队尾指向最前面的缘故！</p><p>##栈经典题目</p><p>###栈在系统中的应用</p><p>如果还记得编译原理的话，编译器在词法分析的过程中处理括号、花括号等这个符号的逻辑，就是使用了栈这种数据结构。</p><p>再举个例子，linux系统中，cd这个进入目录的命令我们应该再熟悉不过了。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">cd a/b/c/../../<br></code></pre></td></tr></table></figure><p>这个命令最后进入a目录，系统是如何知道进入了a目录呢 ，这就是栈的应用。<strong>这在leetcode上也是一道题目，编号：71. 简化路径，大家有空可以做一下。</strong></p><p><strong>递归的实现是栈：每一次递归调用都会把函数的局部变量、参数值和返回地址等压入调用栈中</strong>，然后递归返回的时候，从栈顶弹出上一次递归的各项参数，所以这就是递归为什么可以返回上一层位置的原因。</p><p>所以栈在计算机领域中应用是非常广泛的。</p><p>有的同学经常会想学的这些数据结构有什么用，也开发不了什么软件，大多数同学说的软件应该都是可视化的软件例如APP、网站之类的，那都是非常上层的应用了，底层很多功能的实现都是基础的数据结构和算法。</p><p><strong>所以数据结构与算法的应用往往隐藏在我们看不到的地方！</strong></p><h3 id="括号匹配问题"><a href="#括号匹配问题" class="headerlink" title="括号匹配问题"></a>括号匹配问题</h3><p>在<a href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html">栈与队列：系统中处处都是栈的应用 (opens new window)</a>中我们讲解了括号匹配问题。</p><p><strong>括号匹配是使用栈解决的经典问题。</strong></p><p>建议要写代码之前要分析好有哪几种不匹配的情况，如果不动手之前分析好，写出的代码也会有很多问题。</p><p>先来分析一下 这里有三种不匹配的情况，</p><ol><li>第一种情况，字符串里左方向的括号多余了，所以不匹配。</li><li>第二种情况，括号没有多余，但是括号的类型没有匹配上。</li><li>第三种情况，字符串里右方向的括号多余了，所以不匹配。</li></ol><p>这里还有一些技巧，在匹配左括号的时候，右括号先入栈，就只需要比较当前元素和栈顶相不相等就可以了，比左括号先入栈代码实现要简单的多了！</p><h3 id="字符串去重问题"><a href="#字符串去重问题" class="headerlink" title="字符串去重问题"></a>字符串去重问题</h3><p>在<a href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html">栈与队列：匹配问题都是栈的强项 (opens new window)</a>中讲解了字符串去重问题。 1047. 删除字符串中的所有相邻重复项</p><p>思路就是可以把字符串顺序放到一个栈中，然后如果相同的话 栈就弹出，这样最后栈里剩下的元素都是相邻不相同的元素了。</p><h3 id="逆波兰表达式问题"><a href="#逆波兰表达式问题" class="headerlink" title="逆波兰表达式问题"></a>逆波兰表达式问题</h3><p>在<a href="https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html">栈与队列：有没有想过计算机是如何处理表达式的？ (opens new window)</a>中讲解了求逆波兰表达式。</p><p>本题中每一个子表达式要得出一个结果，然后拿这个结果再进行运算，那么<strong>这岂不就是一个相邻字符串消除的过程，和<a href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html">栈与队列：匹配问题都是栈的强项 (opens new window)</a>中的对对碰游戏是不是就非常像了。</strong></p><h2 id="队列的经典题目"><a href="#队列的经典题目" class="headerlink" title="队列的经典题目"></a>队列的经典题目</h2><h3 id="滑动窗口最大值问题"><a href="#滑动窗口最大值问题" class="headerlink" title="滑动窗口最大值问题"></a>滑动窗口最大值问题</h3><p>在<a href="https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html">栈与队列：滑动窗口里求最大值引出一个重要数据结构 (opens new window)</a>中讲解了一种数据结构：单调队列。</p><p>这道题目还是比较绕的，如果第一次遇到这种题目，需要反复琢磨琢磨</p><p>主要思想是<strong>队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了，同时保证队列里的元素数值是由大到小的。</strong></p><p>那么这个维护元素单调递减的队列就叫做<strong>单调队列，即单调递减或单调递增的队列。C++中没有直接支持单调队列，需要我们自己来一个单调队列</strong></p><p>而且<strong>不要以为实现的单调队列就是 对窗口里面的数进行排序，如果排序的话，那和优先级队列又有什么区别了呢。</strong></p><p>设计单调队列的时候，pop，和push操作要保持如下规则：</p><ol><li>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</li><li>push(value)：如果push的元素value大于入口元素的数值，那么就将队列出口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止</li></ol><p>保持如上规则，每次窗口移动的时候，只要问que.front()就可以返回当前窗口的最大值。</p><p>一些同学还会对单调队列都有一些困惑，首先要明确的是，<strong>题解中单调队列里的pop和push接口，仅适用于本题。</strong></p><p><strong>单调队列不是一成不变的，而是不同场景不同写法</strong>，总之要保证队列里单调递减或递增的原则，所以叫做单调队列。</p><p><strong>不要以为本题中的单调队列实现就是固定的写法。</strong></p><p>我们用deque作为单调队列的底层数据结构，C++中deque是stack和queue默认的底层实现容器（这个我们之前已经讲过），deque是可以两边扩展的，而且deque里元素并不是严格的连续分布的。</p><h3 id="求前-K-个高频元素"><a href="#求前-K-个高频元素" class="headerlink" title="求前 K 个高频元素"></a>求前 K 个高频元素</h3><p>在<a href="https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html">栈与队列：求前 K 个高频元素和队列有啥关系？ (opens new window)</a>中讲解了求前 K 个高频元素。</p><p>通过求前 K 个高频元素，引出另一种队列就是<strong>优先级队列</strong>。</p><p>什么是优先级队列呢？</p><p>其实<strong>就是一个披着队列外衣的堆</strong>，因为优先级队列对外接口只是从队头取元素，从队尾添加元素，再无其他取元素的方式，看起来就是一个队列。</p><p>而且优先级队列内部元素是自动依照元素的权值排列。那么它是如何有序排列的呢？</p><p>缺省情况下priority_queue利用max-heap（大顶堆）完成对元素的排序，这个大顶堆是以vector为表现形式的complete binary tree（完全二叉树）。</p><p>什么是堆呢？</p><p><strong>堆是一棵完全二叉树，树中每个结点的值都不小于（或不大于）其左右孩子的值。</strong> 如果父亲结点是大于等于左右孩子就是大顶堆，小于等于左右孩子就是小顶堆。</p><p>所以大家经常说的大顶堆（堆头是最大元素），小顶堆（堆头是最小元素），如果懒得自己实现的话，就直接用priority_queue（优先级队列）就可以了，底层实现都是一样的，从小到大排就是小顶堆，从大到小排就是大顶堆。</p><p>本题就要<strong>使用优先级队列来对部分频率进行排序。</strong> 注意这里是对部分数据进行排序而不需要对所有数据排序！</p><p>所以排序的过程的时间复杂度是 $O(\log k)$ ，整个算法的时间复杂度是 $O(n\log k)$ 。</p><h1 id="7-二叉树"><a href="#7-二叉树" class="headerlink" title="7. 二叉树"></a>7. 二叉树</h1><h2 id="7-1-二叉树理论基础"><a href="#7-1-二叉树理论基础" class="headerlink" title="7.1 二叉树理论基础"></a>7.1 二叉树理论基础</h2><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210219190809451.png" alt="二叉树大纲"></p><h2 id="7-2-二叉树的遍历"><a href="#7-2-二叉树的遍历" class="headerlink" title="7.2 二叉树的遍历"></a>7.2 二叉树的遍历</h2><h3 id="7-2-1-二叉树的递归遍历"><a href="#7-2-1-二叉树的递归遍历" class="headerlink" title="7.2.1 二叉树的递归遍历"></a>7.2.1 二叉树的递归遍历</h3><h3 id="7-2-2-二叉树的迭代遍历"><a href="#7-2-2-二叉树的迭代遍历" class="headerlink" title="7.2.2 二叉树的迭代遍历"></a>7.2.2 二叉树的迭代遍历</h3><h4 id="1-前序遍历-后序遍历"><a href="#1-前序遍历-后序遍历" class="headerlink" title="1. 前序遍历&amp;&amp;后序遍历"></a>1. 前序遍历&amp;&amp;后序遍历</h4><p><strong>前序遍历</strong></p><p>前序遍历是中左右，每次先处理的是中间节点，那么先将根节点放入栈中，然后将右孩子加入栈，再加入左孩子。</p><p>为什么要先加入 右孩子，再加入左孩子呢？ 因为这样出栈的时候才是中左右的顺序。</p><p>动画如下：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树前序遍历（迭代法）"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        st.push(root);<br>        <span class="hljs-keyword">while</span>(!st.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> st.peek();<br>            st.pop();<br>            res.add(tmp.val);<br>            <span class="hljs-keyword">if</span>(tmp.right != <span class="hljs-literal">null</span>) st.push(tmp.right);<br>            <span class="hljs-keyword">if</span>(tmp.left != <span class="hljs-literal">null</span>) st.push(tmp.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>后序遍历</strong></p><p>将前序遍历翻转：</p><p>中左右-&gt;中右左(调换左右节点入栈顺序)-&gt;左右中(翻转最后的结果数组)</p><p>先序遍历是中左右，后序遍历是左右中，那么我们只需要调整一下先序遍历的代码顺序，就变成中右左的遍历顺序，然后在反转result数组，输出的结果顺序就是左右中了，如下图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200808200338924.png" alt="前序到后序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        st.push(root);<br>        <span class="hljs-keyword">while</span>(!st.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> st.pop();<br>            res.add(tmp.val);<br>            <span class="hljs-keyword">if</span>(tmp.left != <span class="hljs-literal">null</span>) st.push(tmp.left);<br>            <span class="hljs-keyword">if</span>(tmp.right != <span class="hljs-literal">null</span>) st.push(tmp.right);<br>        &#125;<br>        <span class="hljs-comment">// 双指针反转数组</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = res.size() - <span class="hljs-number">1</span>; i &lt; j; i++, j--) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> res.get(i);<br>            res.set(i, res.get(j));<br>            res.set(j, tmp);<br>        &#125;<br>        <span class="hljs-comment">// 也可以直接使用java自带的api</span><br>        <span class="hljs-comment">// Collections.reverse(res);</span><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-中序遍历"><a href="#2-中序遍历" class="headerlink" title="2. 中序遍历"></a>2. 中序遍历</h4><p>不同的根本原因：<strong>遍历的顺序与处理的顺序不同</strong></p><p>与其他两种遍历方法相比，需要额外添加一个指针，指向遍历（访问）到的元素。栈用来存放遍历过的顺序。处理的时候按照遍历的逆向顺序进行处理。</p><p>为了解释清楚，我说明一下 刚刚在迭代的过程中，其实我们有两个操作：</p><ol><li><strong>处理：将元素放进result数组中</strong></li><li><strong>访问：遍历节点</strong></li></ol><p>分析一下为什么刚刚写的前序遍历的代码，不能和中序遍历通用呢，因为前序遍历的顺序是中左右，先访问的元素是中间节点，要处理的元素也是中间节点，所以刚刚才能写出相对简洁的代码，<strong>因为要访问的元素和要处理的元素顺序是一致的，都是中间节点。</strong></p><p>那么再看看中序遍历，中序遍历是左中右，先访问的是二叉树顶部的节点，然后一层一层向下访问，直到到达树左面的最底部，再开始处理节点（也就是在把节点的数值放进result数组中），这就造成了<strong>处理顺序和访问顺序是不一致的。</strong></p><p>那么<strong>在使用迭代法写中序遍历，就需要借用指针的遍历来帮助访问节点，栈则用来处理节点上的元素。</strong></p><p>动画如下：</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%EF%BC%88%E8%BF%AD%E4%BB%A3%E6%B3%95%EF%BC%89.gif" alt="二叉树中序遍历（迭代法）"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">while</span>(cur != <span class="hljs-literal">null</span> || !st.isEmpty()) &#123;<br>            <span class="hljs-keyword">if</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>                st.push(cur);<br>                cur = cur.left;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = st.pop();<br>                res.add(cur.val);<br>                cur = cur.right;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-统一迭代法"><a href="#3-统一迭代法" class="headerlink" title="3. 统一迭代法"></a>3. 统一迭代法</h4><p><strong>思路</strong></p><p>在遍历二叉树时，我们先访问的是中间节点，而前序遍历刚好就是要先处理中间节点，访问和处理可以同时进行。后续遍历的代码和前序遍历一样，也是先访问中间节点并处理中间节点，只不过交换左右节点的入栈顺序并且最后翻转一下结果数组。</p><p>但是中序遍历要先处理的是左节点，但是访问时先访问的是中间节点，处理和访问不能同时进行。</p><p><strong>迭代统一写法</strong></p><ul><li>用栈来保存访问过的节点，注意要保证出栈的顺序与遍历顺序一致。比如中序遍历是“左中右”，那么入栈的顺序应该为“右中左”，这样出栈时才是”左中右”。</li><li>我们要处理的节点都是中间节点，只不过三种遍历方式处理中间节点的顺序不一样。在中间节点入栈时我们要标记一下，用于判断该节点是中间节点。怎么标记呢？可以在中间节点入栈后再入栈一个空节点null。</li><li>首先判断根节点是否为空，不为空就入栈。</li><li>开始遍历时，让当前节点指向栈顶节点，分为2种情况：<ul><li>栈顶节点不为空，那么我们要按顺序将该节点和它的左右节点入栈，这里就是三种遍历方式唯一不同的地方。</li><li>栈顶节点为空，说明遇到了可以处理的中间节点，将空节点弹出，然后弹出中间节点，并将它的值加入结果数组。</li></ul></li><li>遍历结束的条件就是栈为空。</li></ul><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">inorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        st.push(root);<br>        <span class="hljs-keyword">while</span>(!st.isEmpty()) &#123;<br>            <span class="hljs-comment">// 指向栈顶结点</span><br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> st.peek();<br>            <span class="hljs-keyword">if</span>(cur != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 要将三个节点入栈，所以要把当前节点弹出，稍后按照顺序入栈</span><br>                st.pop();<br>                <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>这里更换代码顺序即可</span><br>                <span class="hljs-comment">// 出栈顺序与遍历顺序相同，因此要反转顺序，中序：左中右-&gt;右中左</span><br>                <span class="hljs-keyword">if</span>(cur.right != <span class="hljs-literal">null</span>) st.push(cur.right);<br>                st.push(cur);<br>                <span class="hljs-comment">// 在要处理的节点（中间的节点）前（因为栈，所以这里写在后面）用null标识</span><br>                st.push(<span class="hljs-literal">null</span>);<br>                <span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span>) st.push(cur.left);<br>            &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 当前节点为null</span><br>                <span class="hljs-comment">// 弹出空节点</span><br>                st.pop();<br>                <span class="hljs-comment">// 弹出中间节点并将它的值加入结果数组</span><br>                res.add(st.pop().val);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// blog c++</span><br><span class="hljs-type">var</span> <span class="hljs-variable">preorderTraversal</span> <span class="hljs-operator">=</span> function(root) &#123;<br>    <span class="hljs-type">let</span> <span class="hljs-variable">stack</span> <span class="hljs-operator">=</span> []<br>    <span class="hljs-type">let</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> []<br><br>    <span class="hljs-keyword">if</span>(root) stack.push(root)<br><br>    <span class="hljs-keyword">while</span>(stack.length)&#123;<br>        <span class="hljs-comment">// 当前指针指向栈顶节点</span><br>        <span class="hljs-type">let</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> stack[stack.length - <span class="hljs-number">1</span>]<br><br>        <span class="hljs-keyword">if</span>(cur)&#123;    <span class="hljs-comment">// 当前节点不为空</span><br>            stack.pop()<br>            <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>按照各自遍历顺序将节点入栈，入栈中间节点后要入栈一个空节点</span><br>            <span class="hljs-comment">//...</span><br>            <br>            <br>        &#125;<span class="hljs-keyword">else</span>&#123;  <span class="hljs-comment">//当前节点为空</span><br>            <span class="hljs-comment">// 弹出空节点</span><br>            stack.pop()<br>            <span class="hljs-comment">// 弹出中间节点并将它的值加入结果数组</span><br>            ans.push(stack.pop().val)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans<br>&#125;;<br><br></code></pre></td></tr></table></figure><ul><li>前序遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>按照各自遍历顺序将节点入栈，入栈中间节点后要入栈一个空节点</span><br><span class="hljs-comment">// 出栈顺序与遍历顺序相同，因此要反转顺序，前序：中左右-&gt;右左中</span><br><span class="hljs-keyword">if</span>(cur.right != <span class="hljs-literal">null</span>) st.push(cur.right);<br><span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span>) st.push(cur.left);<br>st.push(cur);<br><span class="hljs-comment">// 在要处理的节点（中间的节点）前（因为栈，所以这里写在后面）用null标识</span><br>st.push(<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><ul><li>中序遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 出栈顺序与遍历顺序相同，因此要反转顺序，中序：左中右-&gt;右中左</span><br><span class="hljs-keyword">if</span>(cur.right != <span class="hljs-literal">null</span>) st.push(cur.right);<br>st.push(cur);<br><span class="hljs-comment">// 在要处理的节点（中间的节点）前（因为栈，所以这里写在后面）用null标识</span><br>st.push(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span>) st.push(cur.left);<br></code></pre></td></tr></table></figure><ul><li>后续遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span>按照各自遍历顺序将节点入栈，入栈中间节点后要入栈一个空节点</span><br><span class="hljs-comment">// 出栈顺序与遍历顺序相同，因此要反转顺序，后序：左右中-&gt;中右左</span><br>st.push(cur);<br><span class="hljs-comment">// 在要处理的节点（中间的节点）前（因为栈，所以这里写在后面）用null标识</span><br>st.push(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span>(cur.right != <span class="hljs-literal">null</span>) st.push(cur.right);<br><span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span>) st.push(cur.left);<br></code></pre></td></tr></table></figure><h3 id="7-2-3-二叉树的层序遍历"><a href="#7-2-3-二叉树的层序遍历" class="headerlink" title="7.2.3 二叉树的层序遍历"></a>7.2.3 二叉树的层序遍历</h3><p><strong>思路</strong></p><p>二叉树的层序遍历可以借助队列来实现。</p><p>按照实现方法的不同，可以分为递归和迭代两种方式。</p><p><strong>方法一：迭代，借助队列实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Queue&lt;TreeNode&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        q.offer(root);<br>        <span class="hljs-keyword">while</span>(!q.isEmpty()) &#123;<br>            List&lt;Integer&gt; res_layer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> q.size();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> q.poll();<br>                res_layer.add(tmp.val);<br>                <span class="hljs-keyword">if</span>(tmp.left != <span class="hljs-literal">null</span>) q.offer(tmp.left);<br>                <span class="hljs-keyword">if</span>(tmp.right != <span class="hljs-literal">null</span>) q.offer(tmp.right);<br>            &#125; <br>            res.add(res_layer);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>方法二：递归</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BFS--递归方式    </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkFun</span><span class="hljs-params">(TreeNode node, List&lt;List&lt;Integer&gt;&gt; resList, Integer deep)</span> &#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (resList.size() == deep) &#123;<br>        <span class="hljs-comment">//当层级增加时，list的Item也增加，利用list的索引值进行层级界定</span><br>        List&lt;Integer&gt; item = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br>        resList.add(item);<br>    &#125;<br>    resList.get(deep).add(node.val);<br><br>    checkFun(node.left, deep + <span class="hljs-number">1</span>);<br>    checkFun(node.right, deep + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; resList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;Integer&gt;&gt;();<br>    checkFun(root, resList, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> resList;<br>&#125;<br><br><span class="hljs-comment">//chatgpt</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode left;<br>    TreeNode right;<br><br>    TreeNode(<span class="hljs-type">int</span> val) &#123;<br>        <span class="hljs-built_in">this</span>.val = val;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LevelOrderTraversal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        traverse(root, <span class="hljs-number">0</span>, result);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traverse</span><span class="hljs-params">(TreeNode node, <span class="hljs-type">int</span> level, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果当前层级不存在，先添加一个空列表</span><br>        <span class="hljs-keyword">if</span> (result.size() &lt;= level) &#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>        &#125;<br><br>        <span class="hljs-comment">// 将当前节点值添加到对应层级</span><br>        result.get(level).add(node.val);<br><br>        <span class="hljs-comment">// 递归遍历左右子树</span><br>        traverse(node.left, level + <span class="hljs-number">1</span>, result);<br>        traverse(node.right, level + <span class="hljs-number">1</span>, result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 示例测试</span><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">1</span>);<br>        root.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">2</span>);<br>        root.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">3</span>);<br>        root.left.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>);<br>        root.left.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">5</span>);<br>        root.right.left = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">6</span>);<br>        root.right.right = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">7</span>);<br><br>        <span class="hljs-type">LevelOrderTraversal</span> <span class="hljs-variable">traversal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LevelOrderTraversal</span>();<br>        List&lt;List&lt;Integer&gt;&gt; result = traversal.levelOrder(root);<br><br>        System.out.println(result); <span class="hljs-comment">// [[1], [2, 3], [4, 5, 6, 7]]</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明</strong></p><p><strong>递归逻辑</strong>：</p><ul><li>传递当前节点和层级信息，递归遍历树。</li><li>如果当前层级的 <code>List</code> 尚未创建，则新建一个。</li><li>将节点值添加到相应层级列表中。</li></ul><p><strong>终止条件</strong>：</p><ul><li>如果节点为空（<code>node == null</code>），直接返回。</li></ul><p><strong>时间复杂度</strong>：</p><ul><li>每个节点被访问一次，因此时间复杂度为 $O(n)$，其中 n 是节点总数。</li></ul><p><strong>空间复杂度</strong>：</p><ul><li>递归栈的深度等于树的高度，最坏情况下空间复杂度为 $O(h)$，其中 h 是树的高度。</li></ul><h2 id="7-3-翻转二叉树"><a href="#7-3-翻转二叉树" class="headerlink" title="7.3 翻转二叉树"></a>7.3 翻转二叉树</h2><p>关键在于<strong>遍历顺序</strong>，前中后序应该选哪一种遍历顺序？ </p><p>遍历的过程中去翻转每一个节点的左右孩子就可以达到整体翻转的效果。</p><p><strong>注意只要把每一个节点的左右孩子翻转一下，就可以达到整体翻转的效果</strong></p><p>这道题目使用前序遍历和后序遍历都可以，<strong>唯独中序遍历不方便</strong>，因为中序遍历会把某些节点的左右孩子翻转了两次！建议拿纸画一画，就理解了</p><p>那么层序遍历可以不可以呢？<strong>依然可以的！只要把每一个节点的左右孩子翻转一下的遍历方式都是可以的！</strong></p><h3 id="思路一：递归法"><a href="#思路一：递归法" class="headerlink" title="思路一：递归法"></a><strong>思路一：递归法</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 这里实现的是前序遍历（中，左，右）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">if</span>(node == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>();<br>        <span class="hljs-comment">// 这里交换左右孩子</span><br>        tmp = node.left;<br>        node.left = node.right;<br>        node.right = tmp;<br>        <br>        reverse(node.left);<br>        reverse(node.right);<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        reverse(root);<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们下文以前序遍历为例，通过动画来看一下翻转的过程:</p><p><img src="https://code-thinking.cdn.bcebos.com/gifs/%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91.gif" alt="翻转二叉树"></p><p>我们来看一下递归三部曲：</p><ol><li>确定递归函数的参数和返回值</li></ol><p>参数就是要传入节点的指针，不需要其他参数了，通常此时定下来主要参数，如果在写递归的逻辑中发现还需要其他参数的时候，随时补充。</p><p>返回值的话其实也不需要，但是题目中给出的要返回root节点的指针，可以直接使用题目定义好的函数，所以就函数的返回类型为<code>TreeNode*</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span></span><br></code></pre></td></tr></table></figure><ol><li>确定终止条件</li></ol><p>当前节点为空的时候，就返回</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> root;<br></code></pre></td></tr></table></figure><ol start="2"><li>确定单层递归的逻辑</li></ol><p>因为是先前序遍历，所以先进行交换左右孩子节点，然后反转左子树，反转右子树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">swap</span>(root-&gt;left, root-&gt;right);<br><span class="hljs-built_in">invertTree</span>(root-&gt;left);<br><span class="hljs-built_in">invertTree</span>(root-&gt;right);<br></code></pre></td></tr></table></figure><p>基于这递归三步法，代码基本写完，C++代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> root;<br>        <span class="hljs-built_in">swap</span>(root-&gt;left, root-&gt;right);  <span class="hljs-comment">// 中</span><br>        <span class="hljs-built_in">invertTree</span>(root-&gt;left);         <span class="hljs-comment">// 左</span><br>        <span class="hljs-built_in">invertTree</span>(root-&gt;right);        <span class="hljs-comment">// 右</span><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="思路二：迭代法"><a href="#思路二：迭代法" class="headerlink" title="思路二：迭代法"></a><strong>思路二：迭代法</strong></h3><ol><li>深度优先遍历（前序、后序遍历）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">preorderTraversal</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        st.push(root);<br>        <span class="hljs-keyword">while</span>(!st.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> st.peek();<br>            st.pop();<br>            swap(tmp);<br>            <span class="hljs-keyword">if</span>(tmp.right != <span class="hljs-literal">null</span>) st.push(tmp.right);<br>            <span class="hljs-keyword">if</span>(tmp.left != <span class="hljs-literal">null</span>) st.push(tmp.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>广度优先遍历（层序遍历）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">invertTree</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        ArrayDeque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>        deque.offer(root);<br>        <span class="hljs-keyword">while</span> (!deque.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> deque.size();<br>            <span class="hljs-keyword">while</span> (size-- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> deque.poll();<br>                swap(node);<br>                <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) deque.offer(node.left);<br>                <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) deque.offer(node.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> root.left;<br>        root.left = root.right;<br>        root.right = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-4-对称二叉树"><a href="#7-4-对称二叉树" class="headerlink" title="7.4 对称二叉树"></a>7.4 对称二叉树</h2><p><strong>首先想清楚，判断对称二叉树要比较的是哪两个节点，要比较的可不是左右节点！</strong></p><p>对于二叉树是否对称，要比较的是根节点的左子树与右子树是不是相互翻转的，理解这一点就知道了<strong>其实我们要比较的是两个树（这两个树是根节点的左右子树）</strong>，所以在递归遍历的过程中，也是要同时遍历两棵树。</p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210203144624414.png" alt="101. 对称二叉树1" style="zoom: 50%;" /><h3 id="思路一：迭代"><a href="#思路一：迭代" class="headerlink" title="思路一：迭代"></a><strong>思路一：迭代</strong></h3><p>我们可以实现这样一个递归函数，通过「同步移动」两个指针的方法来遍历这棵树，p 指针和 q 指针一开始都指向这棵树的根，随后 p 右移时，q 左移，p 左移时，q 右移。每次检查当前 p 和 q 节点的值是否相等，如果相等再判断左右子树是否对称。</p><p><a href="https://programmercarl.com/0101.%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF">代码随想录 (programmercarl.com)</a></p><p><a href="https://leetcode.cn/problems/symmetric-tree/solutions/2361627/101-dui-cheng-er-cha-shu-fen-zhi-qing-xi-8oba">https://leetcode.cn/problems/symmetric-tree/solutions/2361627/101-dui-cheng-er-cha-shu-fen-zhi-qing-xi-8oba</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(TreeNode left, TreeNode right)</span> &#123;<br>        <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> &amp;&amp; right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left == <span class="hljs-literal">null</span> || right == <span class="hljs-literal">null</span> ) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left.val != right.val)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> compare(left.left, right.right);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> compare(left.right, right.left);<br>        <span class="hljs-keyword">return</span> out&amp;in;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> compare(root.left, root.right);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//简化版</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> check(root.left, root.right);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(TreeNode p, TreeNode q)</span> &#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span> &amp;&amp; q == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span> || q == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> p.val == q.val &amp;&amp; check(p.left, q.right) &amp;&amp; check(p.right, q.left);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路二：递归"><a href="#思路二：递归" class="headerlink" title="思路二：递归"></a><strong>思路二：递归</strong></h3><p>这道题目我们也可以使用迭代法，但要注意，这里的迭代法可不是前中后序的迭代写法，因为本题的本质是判断两个树是否是相互翻转的，其实已经不是所谓二叉树遍历的前中后序的关系了。</p><p>这里我们可以使用队列来比较两个树（根节点的左右子树）是否相互翻转，（<strong>注意这不是层序遍历</strong>）</p><p>还是模仿上述操作，首先比较当前左右节点，判断null-&gt;判断值是否相等-&gt;值相等则将需要比较的节点对加入队列（左节点左孩子，右节点右孩子），（左节点右孩子，右节点左孩子）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        Queue&lt;TreeNode&gt; que = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        que.offer(root.left);<br>        que.offer(root.right);<br>        <span class="hljs-keyword">while</span>(!que.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> que.poll();<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> que.poll();<br>            <span class="hljs-keyword">if</span>(leftNode == <span class="hljs-literal">null</span> &amp;&amp; rightNode == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(leftNode == <span class="hljs-literal">null</span> || rightNode == <span class="hljs-literal">null</span> || (leftNode.val != rightNode.val)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            que.offer(leftNode.left);<br>            que.offer(rightNode.right);<br><br>            que.offer(leftNode.right);<br>            que.offer(rightNode.left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-5-二叉树的最大深度"><a href="#7-5-二叉树的最大深度" class="headerlink" title="7.5 二叉树的最大深度"></a>7.5 二叉树的最大深度</h2><h3 id="思路一：迭代法（层序遍历）"><a href="#思路一：迭代法（层序遍历）" class="headerlink" title="思路一：迭代法（层序遍历）"></a>思路一：迭代法（层序遍历）</h3><p>在二叉树中，一层一层的来遍历二叉树，记录一下遍历的层数就是二叉树的深度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        Queue&lt;TreeNode&gt; que = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> depth;<br>        que.offer(root);<br>        <span class="hljs-keyword">while</span>(!que.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> que.size();<br>            <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> que.poll();<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) que.offer(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) que.offer(node.right);<br>            &#125;<br>            depth ++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> depth;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="思路二：递归法（后序遍历：高度；前序遍历：深度）"><a href="#思路二：递归法（后序遍历：高度；前序遍历：深度）" class="headerlink" title="思路二：递归法（后序遍历：高度；前序遍历：深度）"></a>思路二：递归法（后序遍历：高度；前序遍历：深度）</h3><p>本题可以使用前序（中左右），也可以使用后序遍历（左右中），使用<strong>前序</strong>求的就是<strong>深度</strong>，使用<strong>后序</strong>求的是<strong>高度</strong>。</p><ul><li>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数或者节点数（取决于深度从0开始还是从1开始）</li><li>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数或者节点数（取决于高度从0开始还是从1开始）</li></ul><p>而<strong>根节点的高度就是二叉树的最大深度</strong>，所以本题中我们通过<strong>后序</strong>求的根节点高度来求的二叉树最大深度。</p><h4 id="后序遍历（DFS）"><a href="#后序遍历（DFS）" class="headerlink" title="后序遍历（DFS）"></a>后序遍历（DFS）</h4><p>如果我们知道了左子树和右子树的最大深度 l 和 r，那么该二叉树的最大深度即为$max(l,r)+1$。</p><p>而左子树和右子树的最大深度又可以以同样的方式进行计算。因此我们可以用「深度优先搜索」的方法来计算二叉树的最大深度。具体而言，在计算当前二叉树的最大深度时，可以先递归计算出其左子树和右子树的最大深度，然后在 $O(1) $时间内计算出当前二叉树的最大深度。递归在访问到空节点时退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftDepth</span> <span class="hljs-operator">=</span> maxDepth(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightDepth</span> <span class="hljs-operator">=</span> maxDepth(root.right);<br>        <span class="hljs-keyword">return</span> Math.max(leftDepth, rightDepth) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>####前序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 递归法(求深度法)</span><br><span class="hljs-comment">   */</span><br>    <span class="hljs-comment">//定义最大深度</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxnum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        ans(root,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> maxnum;<br>    &#125;<br>    <br>    <span class="hljs-comment">//递归求解最大深度</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ans</span><span class="hljs-params">(TreeNode tr,<span class="hljs-type">int</span> tmp)</span>&#123;<br>        <span class="hljs-keyword">if</span>(tr==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        tmp++;<br>        maxnum = maxnum&lt;tmp?tmp:maxnum;<br>        ans(tr.left,tmp);<br>        ans(tr.right,tmp);<br>        tmp--;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-6-二叉树的最小深度"><a href="#7-6-二叉树的最小深度" class="headerlink" title="7.6 二叉树的最小深度"></a>7.6 二叉树的最小深度</h2><h3 id="思路一：递归法-1"><a href="#思路一：递归法-1" class="headerlink" title="思路一：递归法"></a>思路一：递归法</h3><p><strong>求二叉树的最小深度和求二叉树的最大深度的差别主要在于处理左右孩子不为空的逻辑。</strong></p><img src="https://code-thinking.cdn.bcebos.com/pics/111.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6.png" alt="111.二叉树的最小深度" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right != <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + minDepth(root.right);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root.left != <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + minDepth(root.left);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + Math.min(minDepth(root.left), minDepth(root.right));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>确定递归函数的参数和返回值</li></ol><p>参数为要传入的二叉树根节点，返回的是int类型的深度。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getDepth</span><span class="hljs-params">(TreeNode* node)</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>确定终止条件</li></ol><p>终止条件也是遇到空节点返回0，表示当前节点的高度为0。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>确定单层递归的逻辑</li></ol><p>这块和求最大深度可就不一样了，一些同学可能会写如下代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> leftDepth = <span class="hljs-built_in">getDepth</span>(node-&gt;left);<br><span class="hljs-type">int</span> rightDepth = <span class="hljs-built_in">getDepth</span>(node-&gt;right);<br><span class="hljs-type">int</span> result = <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>(leftDepth, rightDepth);<br><span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure><p>如果这么求的话，没有左孩子的分支会算为最短深度。</p><p>所以，如果左子树为空，右子树不为空，说明最小深度是 1 + 右子树的深度。</p><p>反之，右子树为空，左子树不为空，最小深度是 1 + 左子树的深度。 最后如果左右子树都不为空，返回左右子树深度最小值 + 1 。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> leftDepth = <span class="hljs-built_in">getDepth</span>(node-&gt;left);           <span class="hljs-comment">// 左</span><br><span class="hljs-type">int</span> rightDepth = <span class="hljs-built_in">getDepth</span>(node-&gt;right);         <span class="hljs-comment">// 右</span><br>                                                <span class="hljs-comment">// 中</span><br><span class="hljs-comment">// 当一个左子树为空，右不为空，这时并不是最低点</span><br><span class="hljs-keyword">if</span> (node-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; node-&gt;right != <span class="hljs-literal">NULL</span>) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + rightDepth;<br>&#125;   <br><span class="hljs-comment">// 当一个右子树为空，左不为空，这时并不是最低点</span><br><span class="hljs-keyword">if</span> (node-&gt;left != <span class="hljs-literal">NULL</span> &amp;&amp; node-&gt;right == <span class="hljs-literal">NULL</span>) &#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + leftDepth;<br>&#125;<br><span class="hljs-type">int</span> result = <span class="hljs-number">1</span> + <span class="hljs-built_in">min</span>(leftDepth, rightDepth);<br><span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure><p>遍历的顺序为后序（左右中），可以看出：<strong>求二叉树的最小深度和求二叉树的最大深度的差别主要在于处理左右孩子不为空的逻辑。</strong></p><h3 id="思路二：迭代法-1"><a href="#思路二：迭代法-1" class="headerlink" title="思路二：迭代法"></a>思路二：迭代法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDepth</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; que = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> depth;<br>        que.offer(root);<br>        <span class="hljs-keyword">while</span>(!que.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> que.size();<br>            depth ++;<br>            <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> que.poll();<br>                <span class="hljs-keyword">if</span>(node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> depth;<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) que.offer(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) que.offer(node.right);<br>            &#125;<br>        &#125; <br>        <span class="hljs-keyword">return</span> depth;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-7-完全二叉树的节点个数"><a href="#7-7-完全二叉树的节点个数" class="headerlink" title="7.7 完全二叉树的节点个数"></a>7.7 完全二叉树的节点个数</h2><h3 id="普通二叉树"><a href="#普通二叉树" class="headerlink" title="普通二叉树"></a>普通二叉树</h3><p><strong>递归</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftCount</span> <span class="hljs-operator">=</span> count(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightCount</span> <span class="hljs-operator">=</span> count(root.right);<br>        <span class="hljs-keyword">return</span> leftCount + rightCount + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> count(root);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>迭代</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 层序遍历</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 迭代法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        queue.offer(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>            <span class="hljs-keyword">while</span> (size -- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">cur</span> <span class="hljs-operator">=</span> queue.poll();<br>                result++;<br>                <span class="hljs-keyword">if</span> (cur.left != <span class="hljs-literal">null</span>) queue.offer(cur.left);<br>                <span class="hljs-keyword">if</span> (cur.right != <span class="hljs-literal">null</span>) queue.offer(cur.right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 针对完全二叉树的解法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 满二叉树的结点数为：2^depth - 1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> root.left;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> root.right;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftDepth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, rightDepth = <span class="hljs-number">0</span>; <span class="hljs-comment">// 这里初始为0是有目的的，为了下面求指数方便</span><br>        <span class="hljs-keyword">while</span> (left != <span class="hljs-literal">null</span>) &#123;  <span class="hljs-comment">// 求左子树深度</span><br>            left = left.left;<br>            leftDepth++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (right != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 求右子树深度</span><br>            right = right.right;<br>            rightDepth++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (leftDepth == rightDepth) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> &lt;&lt; leftDepth) - <span class="hljs-number">1</span>; <span class="hljs-comment">// 注意(2&lt;&lt;1) 相当于2^2，所以leftDepth初始为0</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 自己的写法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countNodes</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">leftNode</span> <span class="hljs-operator">=</span> root.left;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">rightNode</span> <span class="hljs-operator">=</span> root.right;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(leftNode != <span class="hljs-literal">null</span>) &#123;<br>            leftNode = leftNode.left;<br>            l++;<br>        &#125;<br>        <span class="hljs-keyword">while</span>(rightNode != <span class="hljs-literal">null</span>) &#123;<br>            rightNode = rightNode.right;<br>            r++;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l == r) &#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">2</span> &lt;&lt; l) - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> countNodes(root.left) + countNodes(root.right) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度：O(log n × log n)</li><li>空间复杂度：O(log n)</li></ul><h2 id="7-8-平衡二叉树"><a href="#7-8-平衡二叉树" class="headerlink" title="7.8 平衡二叉树"></a>7.8 平衡二叉树</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a><strong>递归</strong></h3><p>要求比较高度，必然是要后序遍历。</p><p>递归三步曲分析：</p><ol><li><p>明确递归函数的参数和返回值</p><p>参数：当前传入节点。 返回值：以当前传入节点为根节点的树的高度。</p><p>那么如何标记左右子树是否差值大于1呢？</p><p>如果当前传入节点为根节点的二叉树已经不是二叉平衡树了，还返回高度的话就没有意义了。</p><p>所以如果已经不是二叉平衡树了，可以返回-1 来标记已经不符合平衡树的规则了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// -1 表示已经不是平衡二叉树了，否则返回值是以该节点为根节点树的高度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">(TreeNode* node)</span></span><br></code></pre></td></tr></table></figure></li><li><p>明确终止条件</p><p>递归的过程中依然是遇到空节点了为终止，返回0，表示当前节点为根节点的树高度为0</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>明确单层递归的逻辑</p><p>如何判断以当前传入节点为根节点的二叉树是否是平衡二叉树呢？当然是其左子树高度和其右子树高度的差值。</p><p>分别求出其左右子树的高度，然后如果差值小于等于1，则返回当前二叉树的高度，否则返回-1，表示已经不是二叉平衡树了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> leftHeight = <span class="hljs-built_in">getHeight</span>(node-&gt;left); <span class="hljs-comment">// 左</span><br><span class="hljs-keyword">if</span> (leftHeight == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> rightHeight = <span class="hljs-built_in">getHeight</span>(node-&gt;right); <span class="hljs-comment">// 右</span><br><span class="hljs-keyword">if</span> (rightHeight == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br><span class="hljs-type">int</span> result;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(leftHeight - rightHeight) &gt; <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 中</span><br>    result = <span class="hljs-number">-1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    result = <span class="hljs-number">1</span> + <span class="hljs-built_in">max</span>(leftHeight, rightHeight); <span class="hljs-comment">// 以当前节点为根节点的树的最大高度</span><br>&#125;<br><br><span class="hljs-keyword">return</span> result;<br><br><span class="hljs-comment">// 精简</span><br><span class="hljs-type">int</span> leftHeight = <span class="hljs-built_in">getHeight</span>(node-&gt;left);<br><span class="hljs-keyword">if</span> (leftHeight == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-type">int</span> rightHeight = <span class="hljs-built_in">getHeight</span>(node-&gt;right);<br><span class="hljs-keyword">if</span> (rightHeight == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(leftHeight - rightHeight) &gt; <span class="hljs-number">1</span> ? <span class="hljs-number">-1</span> : <span class="hljs-number">1</span> + <span class="hljs-built_in">max</span>(leftHeight, rightHeight);<br></code></pre></td></tr></table></figure></li></ol><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftHeight</span> <span class="hljs-operator">=</span> getHeight(root.left);<br>        <span class="hljs-keyword">if</span>(leftHeight == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightHeight</span> <span class="hljs-operator">=</span> getHeight(root.right);<br>        <span class="hljs-keyword">if</span>(rightHeight == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br>        <span class="hljs-keyword">if</span>(Math.abs(leftHeight - rightHeight) &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + Math.max(leftHeight, rightHeight);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> getHeight(root) == -<span class="hljs-number">1</span> ? <span class="hljs-literal">false</span> : <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Leetcode思路</strong></p><p><strong>方法一：自顶向下的递归</strong></p><p>定义函数 height，用于计算二叉树中的任意一个节点 p 的高度：</p><img src="../../../../AppData/Roaming/Typora/typora-user-images/image-20241127145051014.png" alt="image-20241127145051014" style="zoom:50%;" /><p>有了计算节点高度的函数，即可判断二叉树是否平衡。具体做法类似于二叉树的前序遍历，即对于当前遍历到的节点，首先计算左右子树的高度，如果左右子树的高度差是否不超过 1，再分别递归地遍历左右子节点，并判断左子树和右子树是否平衡。这是一个自顶向下的递归的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Math.abs(height(root.left) - height(root.right)) &lt;= <span class="hljs-number">1</span> &amp;&amp; isBalanced(root.left) &amp;&amp; isBalanced(root.right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Math.max(height(root.left), height(root.right)) + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>复杂度分析</p><ul><li><p>时间复杂度：$O(n^2)$，其中 n 是二叉树中的节点个数。</p><p>最坏情况下，二叉树是满二叉树，需要遍历二叉树中的所有节点，时间复杂度是 O(n)。</p><p>对于节点 p，如果它的高度是 d，则 height(p) 最多会被调用 d 次（即遍历到它的每一个祖先节点时）。对于平均的情况，一棵树的高度 h 满足 O(h)&#x3D;O(logn)，因为 d≤h，所以总时间复杂度为 O(nlogn)。对于最坏的情况，二叉树形成链式结构，高度为 O(n)，此时总时间复杂度为 O(n2)。</p></li><li><p>空间复杂度：O(n)，其中 n 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p></li></ul><p><strong>方法二：自底向上的递归</strong></p><p>方法一由于是自顶向下递归，因此对于同一个节点，函数 height 会被重复调用，导致时间复杂度较高。如果使用自底向上的做法，则对于每个节点，函数 height 只会被调用一次。</p><p>自底向上递归的做法类似于后序遍历，对于当前遍历到的节点，先递归地判断其左右子树是否平衡，再判断以当前节点为根的子树是否平衡。如果一棵子树是平衡的，则返回其高度（高度一定是非负整数），否则返回 −1。如果存在一棵子树不平衡，则整个二叉树一定不平衡。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> height(root) &gt;= <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">height</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftHeight</span> <span class="hljs-operator">=</span> height(root.left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightHeight</span> <span class="hljs-operator">=</span> height(root.right);<br>        <span class="hljs-keyword">if</span> (leftHeight == -<span class="hljs-number">1</span> || rightHeight == -<span class="hljs-number">1</span> || Math.abs(leftHeight - rightHeight) &gt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> Math.max(leftHeight, rightHeight) + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>时间复杂度：O(n)，其中 n 是二叉树中的节点个数。使用自底向上的递归，每个节点的计算高度和判断是否平衡都只需要处理一次，最坏情况下需要遍历二叉树中的所有节点，因此时间复杂度是 O(n)。</p></li><li><p>空间复杂度：O(n)，其中 n 是二叉树中的节点个数。空间复杂度主要取决于递归调用的层数，递归调用的层数不会超过 n。</p></li></ul><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a><strong>迭代</strong></h3><p>本题的迭代方式可以先定义一个函数，专门用来求高度。</p><p>这个函数通过栈模拟的后序遍历找每一个节点的高度（其实是通过求传入节点为根节点的最大深度来求的高度）</p><p>然后再用栈来模拟后序遍历，遍历每一个节点的时候，再去判断左右孩子的高度是否符合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 迭代法，效率较低，计算高度时会重复遍历</span><br><span class="hljs-comment">     * 时间复杂度：O(n^2)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (root!= <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">inNode</span> <span class="hljs-operator">=</span> stack.peek();<br>            <span class="hljs-comment">// 右结点为null或已经遍历过</span><br>            <span class="hljs-keyword">if</span> (inNode.right == <span class="hljs-literal">null</span> || inNode.right == pre) &#123;<br>                <span class="hljs-comment">// 比较左右子树的高度差，输出</span><br>                <span class="hljs-keyword">if</span> (Math.abs(getHeight(inNode.left) - getHeight(inNode.right)) &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                stack.pop();<br>                pre = inNode;<br>                root = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 当前结点下，没有要遍历的结点了</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                root = inNode.right;<span class="hljs-comment">// 右结点还没遍历，遍历右结点</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 层序遍历，求结点的高度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        Deque&lt;TreeNode&gt; deque = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        deque.offer(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">depth</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!deque.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> deque.size();<br>            depth++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">poll</span> <span class="hljs-operator">=</span> deque.poll();<br>                <span class="hljs-keyword">if</span> (poll.left != <span class="hljs-literal">null</span>) &#123;<br>                    deque.offer(poll.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (poll.right != <span class="hljs-literal">null</span>) &#123;<br>                    deque.offer(poll.right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> depth;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 优化迭代法，针对暴力迭代法的getHeight方法做优化，利用TreeNode.val来保存当前结点的高度，这样就不会有重复遍历</span><br><span class="hljs-comment">     * 获取高度算法时间复杂度可以降到O(1)，总的时间复杂度降为O(n)。</span><br><span class="hljs-comment">     * 时间复杂度：O(n)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        Stack&lt;TreeNode&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span> || !stack.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(root);<br>                root = root.left;<br>            &#125;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">inNode</span> <span class="hljs-operator">=</span> stack.peek();<br>            <span class="hljs-comment">// 右结点为null或已经遍历过</span><br>            <span class="hljs-keyword">if</span> (inNode.right == <span class="hljs-literal">null</span> || inNode.right == pre) &#123;<br>                <span class="hljs-comment">// 输出</span><br>                <span class="hljs-keyword">if</span> (Math.abs(getHeight(inNode.left) - getHeight(inNode.right)) &gt; <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                stack.pop();<br>                pre = inNode;<br>                root = <span class="hljs-literal">null</span>;<span class="hljs-comment">// 当前结点下，没有要遍历的结点了</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                root = inNode.right;<span class="hljs-comment">// 右结点还没遍历，遍历右结点</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 求结点的高度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftHeight</span> <span class="hljs-operator">=</span> root.left != <span class="hljs-literal">null</span> ? root.left.val : <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rightHeight</span> <span class="hljs-operator">=</span> root.right != <span class="hljs-literal">null</span> ? root.right.val : <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> Math.max(leftHeight, rightHeight) + <span class="hljs-number">1</span>;<br>        root.val = height;<span class="hljs-comment">// 用TreeNode.val来保存当前结点的高度</span><br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过本题可以了解求二叉树深度 和 二叉树高度的差异，求深度适合用前序遍历，而求高度适合用后序遍历。</p><p>本题迭代法其实有点复杂，大家可以有一个思路，也不一定说非要写出来。</p><h2 id="7-9-二叉树的所有路径"><a href="#7-9-二叉树的所有路径" class="headerlink" title="7.9 二叉树的所有路径"></a>7.9 二叉树的所有路径</h2><p>四种解法：<a href="https://leetcode.cn/problems/binary-tree-paths/solutions/400434/257-er-cha-shu-de-suo-you-lu-jing-tu-wen-jie-xi-by">https://leetcode.cn/problems/binary-tree-paths/solutions/400434/257-er-cha-shu-de-suo-you-lu-jing-tu-wen-jie-xi-by</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目要求从根节点到叶子的路径，所以需要<strong>前序遍历</strong>，这样才方便让父节点指向孩子节点，找到对应的路径。</p><p>在这道题目中将第一次涉及到<strong>回溯</strong>，因为我们要把路径记录下来，需要回溯来回退一个路径再进入另一个路径。</p><h4 id="解法一：递归"><a href="#解法一：递归" class="headerlink" title="解法一：递归"></a>解法一：递归</h4><ol><li>递归函数参数以及返回值</li></ol><p>要传入根节点，记录每一条路径的path，和存放结果集的result，这里递归不需要返回值，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traversal</span><span class="hljs-params">(TreeNode* cur, vector&lt;<span class="hljs-type">int</span>&gt;&amp; path, vector&lt;string&gt;&amp; result)</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>确定递归终止条件</li></ol><p>在写递归的时候都习惯了这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur == <span class="hljs-literal">NULL</span>) &#123;<br>    终止处理逻辑<br>&#125;<br></code></pre></td></tr></table></figure><p>但是本题的终止条件这样写会很麻烦，因为本题要找到叶子节点，就开始结束的处理逻辑了（把路径放进result里）。</p><p><strong>那么什么时候算是找到了叶子节点？</strong> 是当 cur不为空，其左右孩子都为空的时候，就找到叶子节点。</p><p>所以本题的终止条件是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="hljs-literal">NULL</span>) &#123;<br>    终止处理逻辑<br>&#125;<br></code></pre></td></tr></table></figure><p>为什么没有判断cur是否为空呢，因为下面的逻辑可以控制空节点不入循环。</p><p>再来看一下终止处理的逻辑。</p><p><strong>那么为什么使用了vector 结构来记录路径呢？</strong> 因为在下面处理单层递归逻辑的时候，要做回溯，使用vector方便来做回溯。</p><p>可能有的同学问了，我看有些人的代码也没有回溯啊。</p><p><strong>其实是有回溯的，只不过隐藏在函数调用时的参数赋值里</strong>，即String + ‘-&gt;’ 。</p><p>这里我们先使用vector结构的path容器来记录路径，那么终止处理逻辑如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; cur-&gt;right == <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 遇到叶子节点</span><br>    string sPath;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; path.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++) &#123; <span class="hljs-comment">// 将path里记录的路径转为string格式</span><br>        sPath += <span class="hljs-built_in">to_string</span>(path[i]);<br>        sPath += <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>    &#125;<br>    sPath += <span class="hljs-built_in">to_string</span>(path[path.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>]); <span class="hljs-comment">// 记录最后一个节点（叶子节点）</span><br>    result.<span class="hljs-built_in">push_back</span>(sPath); <span class="hljs-comment">// 收集一个路径</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>确定单层递归逻辑</li></ol><p>因为是前序遍历，需要先处理中间节点，中间节点就是我们要记录路径上的节点，先放进path中。</p><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ocaml">path.push_back(cur-&gt;<span class="hljs-keyword">val</span>);<br></code></pre></td></tr></table></figure><p>然后是递归和回溯的过程，上面说过没有判断cur是否为空，那么在这里递归的时候，如果为空就不进行下一层递归了。</p><p>所以递归前要加上判断语句，下面要递归的节点是否为空，如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur-&gt;left) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;left, path, result);<br>&#125;<br><span class="hljs-keyword">if</span> (cur-&gt;right) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;right, path, result);<br>&#125;<br></code></pre></td></tr></table></figure><p>此时还没完，递归完，要做回溯啊，因为path 不能一直加入节点，它还要删节点，然后才能加入新的节点。</p><p>那么回溯要怎么回溯呢，一些同学会这么写，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur-&gt;left) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;left, path, result);<br>&#125;<br><span class="hljs-keyword">if</span> (cur-&gt;right) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;right, path, result);<br>&#125;<br>path.<span class="hljs-built_in">pop_back</span>();<br></code></pre></td></tr></table></figure><p>这个回溯就有很大的问题，我们知道，<strong>回溯和递归是一一对应的，有一个递归，就要有一个回溯</strong>，这么写的话相当于把递归和回溯拆开了， 一个在花括号里，一个在花括号外。</p><p><strong>所以回溯要和递归永远在一起，世界上最遥远的距离是你在花括号里，而我在花括号外！</strong></p><p>那么代码应该这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (cur-&gt;left) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;left, path, result);<br>    path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 回溯</span><br>&#125;<br><span class="hljs-keyword">if</span> (cur-&gt;right) &#123;<br>    <span class="hljs-built_in">traversal</span>(cur-&gt;right, path, result);<br>    path.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 回溯</span><br>&#125;<br></code></pre></td></tr></table></figure><p>整体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递归法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">// 存最终的结果</span><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        List&lt;Integer&gt; paths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<span class="hljs-comment">// 作为结果中的路径</span><br>        traversal(root, paths, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traversal</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; paths, List&lt;String&gt; res)</span> &#123;<br>        paths.add(root.val);<span class="hljs-comment">// 前序遍历，中</span><br>        <span class="hljs-comment">// 遇到叶子结点</span><br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 输出</span><br>            <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<span class="hljs-comment">// StringBuilder用来拼接字符串，速度更快</span><br>            <span class="hljs-comment">// 也可以直接使用 string += xxx来实现 </span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; paths.size() - <span class="hljs-number">1</span>; i++) &#123;<br>                sb.append(paths.get(i)).append(<span class="hljs-string">&quot;-&gt;&quot;</span>);<br>            &#125;<br>            sb.append(paths.get(paths.size() - <span class="hljs-number">1</span>));<span class="hljs-comment">// 记录最后一个节点</span><br>            res.add(sb.toString());<span class="hljs-comment">// 收集一个路径</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 递归和回溯是同时进行，所以要放在同一个花括号里</span><br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 左</span><br>            traversal(root.left, paths, res);<br>            paths.remove(paths.size() - <span class="hljs-number">1</span>);<span class="hljs-comment">// 回溯</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 右</span><br>            traversal(root.right, paths, res);<br>            paths.remove(paths.size() - <span class="hljs-number">1</span>);<span class="hljs-comment">// 回溯</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化版代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式二</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        deal(root, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deal</span><span class="hljs-params">(TreeNode node, String s)</span> &#123;<br>        <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(s).append(node.val).toString());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(s).append(node.val).append(<span class="hljs-string">&quot;-&gt;&quot;</span>).toString();<br>        deal(node.left, tmp);<br>        deal(node.right, tmp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我自己写的时候实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">path</span><span class="hljs-params">(TreeNode cur, String path, List&lt;String&gt; res)</span> &#123;<br>        <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        path += Integer.toString(cur.val);<br>        <span class="hljs-keyword">if</span>(cur.left == <span class="hljs-literal">null</span> &amp;&amp; cur.right == <span class="hljs-literal">null</span>) &#123;<br>            res.add(path);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            path += <span class="hljs-string">&quot;-&gt;&quot;</span>;<br>            path(cur.left, path, res);<br>            path(cur.right, path, res);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        path(root, <span class="hljs-string">&quot;&quot;</span>, res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是leetcode题解的写法，和上述差不多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    dfs(root, <span class="hljs-string">&quot;&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, String path, List&lt;String&gt; res)</span> &#123;<br>    <span class="hljs-comment">//如果为空，直接返回</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//如果是叶子节点，说明找到了一条路径，把它加入到res中</span><br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>        res.add(path + root.val);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果不是叶子节点，在分别遍历他的左右子节点</span><br>    dfs(root.left, path + root.val + <span class="hljs-string">&quot;-&gt;&quot;</span>, res);<br>    dfs(root.right, path + root.val + <span class="hljs-string">&quot;-&gt;&quot;</span>, res);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="解法二：迭代"><a href="#解法二：迭代" class="headerlink" title="解法二：迭代"></a>解法二：迭代</h4><p><strong>栈实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> res;<br>        <span class="hljs-comment">//栈中节点和路径都是成对出现的，路径表示的是从根节点到当前</span><br>        <span class="hljs-comment">//节点的路径，如果到达根节点，说明找到了一条完整的路径</span><br>        Stack&lt;Object&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-comment">//当前节点和路径同时入栈</span><br>        stack.push(root);<br>        stack.push(root.val + <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">while</span> (!stack.isEmpty()) &#123;<br>            <span class="hljs-comment">//节点和路径同时出栈</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (String) stack.pop();<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (TreeNode) stack.pop();<br>            <span class="hljs-comment">//如果是叶子节点，说明找到了一条完整路径，把它加入到集合中</span><br>            <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>                res.add(path);<br>            &#125;<br>            <span class="hljs-comment">//右子节点不为空就把右子节点和路径压栈</span><br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(node.right);<br>                stack.push(path + <span class="hljs-string">&quot;-&gt;&quot;</span> + node.right.val);<br>            &#125;<br>            <span class="hljs-comment">//左子节点不为空就把左子节点和路径压栈</span><br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                stack.push(node.left);<br>                stack.push(path + <span class="hljs-string">&quot;-&gt;&quot;</span> + node.left.val);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>队列实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">binaryTreePaths</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    List&lt;String&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">return</span> res;<br>    <span class="hljs-comment">//队列，节点和路径成对出现，路径就是从根节点到当前节点的路径</span><br>    Queue&lt;Object&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    queue.add(root.val + <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> (TreeNode) queue.poll();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (String) queue.poll();<br>        <span class="hljs-comment">//如果到叶子节点，说明找到了一条完整路径</span><br>        <span class="hljs-keyword">if</span> (node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>) &#123;<br>            res.add(path);<br>        &#125;<br><br>        <span class="hljs-comment">//右子节点不为空就把右子节点和路径存放到队列中</span><br>        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>            queue.add(node.right);<br>            queue.add(path + <span class="hljs-string">&quot;-&gt;&quot;</span> + node.right.val);<br>        &#125;<br><br>        <span class="hljs-comment">//左子节点不为空就把左子节点和路径存放到队列中</span><br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>            queue.add(node.left);<br>            queue.add(path + <span class="hljs-string">&quot;-&gt;&quot;</span> + node.left.val);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="7-10-左子叶之和"><a href="#7-10-左子叶之和" class="headerlink" title="7.10 左子叶之和"></a>7.10 左子叶之和</h2><p>这道题目要求左叶子之和，其实是比较绕的，因为不能判断本节点是不是左叶子节点。</p><p>此时就要通过节点的父节点来判断其左孩子是不是左叶子了。</p><h3 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h3><p><img src="/../../../../AppData/Roaming/Typora/typora-user-images/image-20241127222135189.png" alt="image-20241127222135189"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//leetcode官方题解，更好理解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> root != <span class="hljs-literal">null</span> ? dfs(root) : <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">// 如果左节点不为空，则判断左节点是否为叶子节点，是的话直接加其值，否则递归</span><br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>            ans += isLeafNode(node.left) ? node.left.val : dfs(node.left);<br>        &#125;<br>        <span class="hljs-comment">// 累加右子树</span><br>        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span> &amp;&amp; !isLeafNode(node.right)) &#123;<br>            ans += dfs(node.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeafNode</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">return</span> node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 代码随想录</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumLeftLeaf</span><span class="hljs-params">(TreeNode cur)</span> &#123;<br>        <span class="hljs-keyword">if</span>(cur == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> sumLeftLeaf(cur.left);<br>        <span class="hljs-comment">// 如果左子树就是左叶子</span><br>        <span class="hljs-keyword">if</span>(cur.left != <span class="hljs-literal">null</span> &amp;&amp; cur.left.left == <span class="hljs-literal">null</span> &amp;&amp; cur.left.right == <span class="hljs-literal">null</span>) left = cur.left.val;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> sumLeftLeaf(cur.right);<br>        <span class="hljs-keyword">return</span> left + right;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">return</span> sumLeftLeaf(root);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化版：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == NULL) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (root-&gt;left != NULL &amp;&amp; root-&gt;left-&gt;left == NULL &amp;&amp; root-&gt;left-&gt;right == NULL) &#123;<br>            leftValue = root-&gt;left-&gt;val;<br>        &#125;<br>        <span class="hljs-keyword">return</span> leftValue + sumOfLeftLeaves(root-&gt;left) + sumOfLeftLeaves(root-&gt;right);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><p>前中后序遍历均可，只需要判断当前节点左孩子是否是叶子节点即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 前序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        Stack&lt;TreeNode&gt; st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        st.push(root);<br>        <span class="hljs-keyword">while</span>(!st.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> st.pop();<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span> &amp;&amp; node.left.left == <span class="hljs-literal">null</span> &amp;&amp; node.left.right == <span class="hljs-literal">null</span>) sum += node.left.val;<br>            <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) st.push(node.left);<br>            <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) st.push(node.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//层序遍历</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sumOfLeftLeaves</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        queue.offer(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (isLeafNode(node.left)) &#123;<br>                    ans += node.left.val;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    queue.offer(node.left);<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (!isLeafNode(node.right)) &#123;<br>                    queue.offer(node.right);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeafNode</span><span class="hljs-params">(TreeNode node)</span> &#123;<br>        <span class="hljs-keyword">return</span> node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-11-找树左下角的值"><a href="#7-11-找树左下角的值" class="headerlink" title="7.11 找树左下角的值"></a>7.11 找树左下角的值</h2><h3 id="迭代法-1"><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>        queue&lt;TreeNode*&gt; que;<br>        <span class="hljs-keyword">if</span> (root != NULL) que.push(root);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!que.empty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> que.size();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                TreeNode* node = que.front();<br>                que.pop();<br>                <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) result = node-&gt;val; <span class="hljs-comment">// 记录最后一行第一个元素</span><br>                <span class="hljs-keyword">if</span> (node-&gt;left) que.push(node-&gt;left);<br>                <span class="hljs-keyword">if</span> (node-&gt;right) que.push(node-&gt;right);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">// 我自己的，多余了，不应该全部存储下来</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        Queue&lt;TreeNode&gt; que = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        que.offer(root);<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">while</span>(!que.isEmpty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> que.size();<br>            List&lt;Integer&gt; tmp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">while</span>(size-- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> que.poll();<br>                tmp.add(node.val);<br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) que.offer(node.left);<br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>) que.offer(node.right);<br>            &#125;<br>            res.add(tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.get(res.size() - <span class="hljs-number">1</span>).get(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归法-1"><a href="#递归法-1" class="headerlink" title="递归法"></a>递归法</h3><p>我们来分析一下题目：在树的<strong>最后一行</strong>找到<strong>最左边的值</strong>。</p><p>首先要是最后一行，然后是最左边的值。</p><p>如果使用递归法，如何判断是最后一行呢，其实就是深度最大的叶子节点一定是最后一行。</p><p>所以要找深度最大的叶子节点。</p><p>那么如何找最左边的呢？可以使用前序遍历（当然中序，后序都可以，因为本题没有 中间节点的处理逻辑，只要左优先就行），保证优先左边搜索，然后记录深度最大的叶子节点，此时就是树的最后一行最左边的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 递归法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">Deep</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>        value = root.val;<br>        findLeftValue(root,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findLeftValue</span> <span class="hljs-params">(TreeNode root,<span class="hljs-type">int</span> deep)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (deep &gt; Deep) &#123;<br>                value = root.val;<br>                Deep = deep;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) findLeftValue(root.left,deep + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) findLeftValue(root.right,deep + <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归三部曲：</p><ol><li><p>确定递归函数的参数和返回值</p><p>参数必须有要遍历的树的根节点，还有就是一个int型的变量用来记录最长深度。 这里就不需要返回值了，所以递归函数的返回类型为void。</p><p>本题还需要类里的两个全局变量，maxLen用来记录最大深度，result记录最大深度最左节点的数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> maxDepth = INT_MIN;   <span class="hljs-comment">// 全局变量 记录最大深度</span><br><span class="hljs-type">int</span> result;       <span class="hljs-comment">// 全局变量 最大深度最左节点的数值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traversal</span><span class="hljs-params">(TreeNode* root, <span class="hljs-type">int</span> depth)</span></span><br></code></pre></td></tr></table></figure></li><li><p>确定终止条件</p><p>当遇到叶子节点的时候，就需要统计一下最大的深度了，所以需要遇到叶子节点来更新最大深度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-keyword">if</span> (depth &gt; maxDepth) &#123;<br>        maxDepth = depth;           <span class="hljs-comment">// 更新最大深度</span><br>        result = root-&gt;val;   <span class="hljs-comment">// 最大深度最左面的数值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>确定单层递归的逻辑</p><p>在找最大深度的时候，递归的过程中依然要使用回溯，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp">                    <span class="hljs-comment">// 中</span><br><span class="hljs-keyword">if</span> (root-&gt;left) &#123;   <span class="hljs-comment">// 左</span><br>    depth++; <span class="hljs-comment">// 深度加一</span><br>    <span class="hljs-built_in">traversal</span>(root-&gt;left, depth);<br>    depth--; <span class="hljs-comment">// 回溯，深度减一</span><br>&#125;<br><span class="hljs-keyword">if</span> (root-&gt;right) &#123; <span class="hljs-comment">// 右</span><br>    depth++; <span class="hljs-comment">// 深度加一</span><br>    <span class="hljs-built_in">traversal</span>(root-&gt;right, depth);<br>    depth--; <span class="hljs-comment">// 回溯，深度减一</span><br>&#125;<br><span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="7-12-路经总和"><a href="#7-12-路经总和" class="headerlink" title="7.12 路经总和"></a>7.12 路经总和</h2><h3 id="※什么时候递归需要返回值？"><a href="#※什么时候递归需要返回值？" class="headerlink" title="※什么时候递归需要返回值？"></a>※什么时候递归需要返回值？</h3><ul><li>如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。（这种情况就是本文下半部分介绍的113.路径总和ii）</li><li>如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。 （这种情况我们在<a href="https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html">236. 二叉树的最近公共祖先 (opens new window)</a>中介绍）</li><li>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</li></ul><h3 id="递归法-2"><a href="#递归法-2" class="headerlink" title="递归法"></a>递归法</h3><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>这里的回溯指 利用 DFS 找出从根节点到叶子节点的所有路径，只要有任意一条路径的 和 等于 <code>sum</code>，就返回 <code>True</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 我的解法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traversal</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> pathSum, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span>(pathSum == targetSum) &#123;<br>                res = <span class="hljs-literal">true</span>;<br>            &#125; <br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.left != <span class="hljs-literal">null</span>) &#123;<br>            traversal(root.left, pathSum + root.left.val, targetSum);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.right != <span class="hljs-literal">null</span>) &#123;<br>            traversal(root.right, pathSum + root.right.val, targetSum);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        traversal(root, root.val, targetSum);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用vector存储path</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> dfs(root, sum, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> target, List&lt;Integer&gt; path)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        path.add(root.val);<br>        <span class="hljs-keyword">if</span> (target == <span class="hljs-number">0</span> &amp;&amp; root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">leftFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>, rightFlag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            leftFlag = dfs(root.left, target - root.val, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            rightFlag = dfs(root.right, target - root.val, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<br>        &#125;<br>        path.remove(path.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// Backtrack</span><br>        <span class="hljs-keyword">return</span> leftFlag || rightFlag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="leetcode-代码随想录解法"><a href="#leetcode-代码随想录解法" class="headerlink" title="leetcode&amp;&amp;代码随想录解法"></a><strong>leetcode&amp;&amp;代码随想录解法</strong></h4><ol><li><p>确定递归函数的参数和返回类型</p><p>参数：需要二叉树的根节点，还需要一个计数器，这个计数器用来计算二叉树的一条边之和是否正好是目标和，计数器为int型。</p><p>返回值：boolean</p></li><li><p>确定终止条件</p><p>首先计数器如何统计这一条路径的和呢？</p><p>不要去累加然后判断是否等于目标和，那么代码比较麻烦，可以用<strong>递减</strong>，让计数器count初始为目标和，然后<strong>每次减去遍历路径节点上的数值</strong>。</p><p>如果最后count &#x3D;&#x3D; 0，同时到了叶子节点的话，说明找到了目标和。</p><p>如果遍历到了叶子节点，count不为0，就是没找到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 遇到叶子节点，并且计数为0</span><br><span class="hljs-keyword">if</span> (!cur-&gt;left &amp;&amp; !cur-&gt;right) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 遇到叶子节点而没有找到合适的边，直接返回</span><br></code></pre></td></tr></table></figure></li><li><p>确定单层递归的逻辑</p><p>因为终止条件是判断叶子节点，所以递归的过程中就不要让空节点进入递归了。</p><p>递归函数是有返回值的，如果递归函数返回true，说明找到了合适的路径，应该立刻返回。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span> (cur-&gt;left) &#123; <span class="hljs-comment">// 左 （空节点不遍历）</span><br>    <span class="hljs-comment">// 遇到叶子节点返回true，则直接返回true</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">traversal</span>(cur-&gt;left, count - cur-&gt;left-&gt;val)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 注意这里有回溯的逻辑</span><br>&#125;<br><span class="hljs-keyword">if</span> (cur-&gt;right) &#123; <span class="hljs-comment">// 右 （空节点不遍历）</span><br>    <span class="hljs-comment">// 遇到叶子节点返回true，则直接返回true</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">traversal</span>(cur-&gt;right, count - cur-&gt;right-&gt;val)) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 注意这里有回溯的逻辑</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br></code></pre></td></tr></table></figure></li></ol><p><strong>leetcode思路及算法</strong></p><p>观察要求我们完成的函数，我们可以归纳出它的功能：询问是否存在从当前节点 root 到叶子节点的路径，满足其路径和为 sum。</p><p>假定从根节点到当前节点的值之和为 val，我们可以将这个大问题转化为一个小问题：是否存在从当前节点的子节点到叶子的路径，满足其路径和为 sum - val。</p><p>不难发现这满足递归的性质，若当前节点就是叶子节点，那么我们直接判断 sum 是否等于 val 即可（因为路径和已经确定，就是当前节点的值，我们只需要判断该路径和是否满足条件）。若当前节点不是叶子节点，我们只需要递归地询问它的子节点是否能满足条件即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">haspathsum</span><span class="hljs-params">(treenode root, <span class="hljs-type">int</span> targetsum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        targetsum -= root.val;<br>        <span class="hljs-comment">// 叶子结点</span><br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> targetsum == <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> haspathsum(root.left, targetsum);<br>            <span class="hljs-keyword">if</span> (left) &#123;      <span class="hljs-comment">// 已经找到</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> haspathsum(root.right, targetsum);<br>            <span class="hljs-keyword">if</span> (right) &#123;     <span class="hljs-comment">// 已经找到</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// lc112 简洁方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">haspathsum</span><span class="hljs-params">(treenode root, <span class="hljs-type">int</span> targetsum)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 为空退出</span><br><br>        <span class="hljs-comment">// 叶子节点判断是否符合</span><br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> root.val == targetsum;<br><br>        <span class="hljs-comment">// 求两侧分支的路径和</span><br>        <span class="hljs-keyword">return</span> haspathsum(root.left, targetsum - root.val) || haspathsum(root.right, targetsum - root.val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迭代法-2"><a href="#迭代法-2" class="headerlink" title="迭代法"></a>迭代法</h3><h4 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h4><p>首先我们可以想到使用广度优先搜索的方式，记录从根节点到当前节点的路径和，以防止重复计算。</p><p>这样我们使用两个队列，分别存储将要遍历的节点，以及根节点到这些节点的路径和即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> sum)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        Queue&lt;TreeNode&gt; queNode = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;TreeNode&gt;();<br>        Queue&lt;Integer&gt; queVal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;Integer&gt;();<br>        queNode.offer(root);<br>        queVal.offer(root.val);<br>        <span class="hljs-keyword">while</span> (!queNode.isEmpty()) &#123;<br>            <span class="hljs-type">TreeNode</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> queNode.poll();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> queVal.poll();<br>            <span class="hljs-keyword">if</span> (now.left == <span class="hljs-literal">null</span> &amp;&amp; now.right == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">if</span> (temp == sum) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (now.left != <span class="hljs-literal">null</span>) &#123;<br>                queNode.offer(now.left);<br>                queVal.offer(now.left.val + temp);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (now.right != <span class="hljs-literal">null</span>) &#123;<br>                queNode.offer(now.right);<br>                queVal.offer(now.right.val + temp);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈的迭代"><a href="#栈的迭代" class="headerlink" title="栈的迭代"></a>栈的迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">haspathsum</span><span class="hljs-params">(treenode root, <span class="hljs-type">int</span> targetsum)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        stack&lt;treenode&gt; stack1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">stack</span>&lt;&gt;();<br>        stack&lt;integer&gt; stack2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">stack</span>&lt;&gt;();<br>        stack1.push(root);<br>        stack2.push(root.val);<br>        <span class="hljs-keyword">while</span>(!stack1.isempty()) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> stack1.size();<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>                <span class="hljs-type">treenode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> stack1.pop();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> stack2.pop();<br><br>                <span class="hljs-comment">// 如果该节点是叶子节点了，同时该节点的路径数值等于sum，那么就返回true</span><br>                <span class="hljs-keyword">if</span>(node.left == <span class="hljs-literal">null</span> &amp;&amp; node.right == <span class="hljs-literal">null</span> &amp;&amp; sum == targetsum) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>                <span class="hljs-comment">// 右节点，压进去一个节点的时候，将该节点的路径数值也记录下来</span><br>                <span class="hljs-keyword">if</span>(node.right != <span class="hljs-literal">null</span>)&#123;<br>                    stack1.push(node.right);<br>                    stack2.push(sum + node.right.val);<br>                &#125;<br>                <span class="hljs-comment">// 左节点，压进去一个节点的时候，将该节点的路径数值也记录下来</span><br>                <span class="hljs-keyword">if</span>(node.left != <span class="hljs-literal">null</span>) &#123;<br>                    stack1.push(node.left);<br>                    stack2.push(sum + node.left.val);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="113-路径总和ii"><a href="#113-路径总和ii" class="headerlink" title="113. 路径总和ii"></a>113. 路径总和ii</h2><h3 id="迭代——回溯法"><a href="#迭代——回溯法" class="headerlink" title="迭代——回溯法"></a>迭代——回溯法</h3><p>加法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">traversal</span><span class="hljs-params">(TreeNode root, List&lt;Integer&gt; path, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        path.add(root.val);<br>        <span class="hljs-keyword">if</span>(root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: path) sum += i;<br>            <span class="hljs-keyword">if</span>(sum == targetSum) res.add(path);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.left != <span class="hljs-literal">null</span>) &#123;<br>            traversal(root.left, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path), targetSum);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.right != <span class="hljs-literal">null</span>) &#123;<br>            traversal(root.right, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path), targetSum);<br>        &#125;<br>        path.remove(path.size() - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">pathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetSum)</span> &#123;<br>        <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res;<br>        List&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        traversal(root, path, targetSum);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>减法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">pathsum</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetsum)</span> &#123;<br>        List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> res; <span class="hljs-comment">// 非空判断</span><br><br>        List&lt;Integer&gt; path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        preorderdfs(root, targetsum, res, path);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preorderdfs</span><span class="hljs-params">(TreeNode root, <span class="hljs-type">int</span> targetsum, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; path)</span> &#123;<br>        path.add(root.val);<br>        <span class="hljs-comment">// 遇到了叶子节点</span><br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 找到了和为 targetsum 的路径</span><br>            <span class="hljs-keyword">if</span> (targetsum - root.val == <span class="hljs-number">0</span>) &#123;<br>                res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<br>            &#125;<br>            <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果和不为 targetsum，返回</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>            preorderdfs(root.left, targetsum - root.val, res, path);<br>            path.remove(path.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 回溯</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>            preorderdfs(root.right, targetsum - root.val, res, path);<br>            path.remove(path.size() - <span class="hljs-number">1</span>); <span class="hljs-comment">// 回溯</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解法2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; result;<br>    LinkedList&lt;Integer&gt; path;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">pathSum</span> <span class="hljs-params">(TreeNode root,<span class="hljs-type">int</span> targetSum)</span> &#123;<br>        result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        path = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>        travesal(root, targetSum);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">travesal</span><span class="hljs-params">(TreeNode root,  <span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<br>        path.offer(root.val);<br>        count -= root.val;<br>        <span class="hljs-keyword">if</span> (root.left == <span class="hljs-literal">null</span> &amp;&amp; root.right == <span class="hljs-literal">null</span> &amp;&amp; count == <span class="hljs-number">0</span>) &#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(path));<br>        &#125;<br>        travesal(root.left, count);<br>        travesal(root.right, count);<br>        path.removeLast(); <span class="hljs-comment">// 回溯</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-13-由中序和后序遍历序列构建二叉树"><a href="#7-13-由中序和后序遍历序列构建二叉树" class="headerlink" title="7.13 由中序和后序遍历序列构建二叉树"></a>7.13 由中序和后序遍历序列构建二叉树</h2><p>以下两种遍历顺序的组合可以构建二叉树：</p><ul><li>前序+中序</li><li>中序+后序</li></ul><p>前序和后序不能唯一确定一棵二叉树！，因为没有中序遍历无法确定左右部分，也就是无法分割。</p><p><strong>实现思路</strong></p><p>过程模拟，遵循循环不变量原则，在切分中序和后序数组的时候坚持左闭右开区间。</p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    Map&lt;Integer, Integer&gt; map;  <span class="hljs-comment">// 方便根据数值查找位置</span><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; inorder.length; i++) &#123; <span class="hljs-comment">// 用map保存中序序列的数值对应位置</span><br>            map.put(inorder[i], i);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> findNode(inorder,  <span class="hljs-number">0</span>, inorder.length, postorder,<span class="hljs-number">0</span>, postorder.length);  <span class="hljs-comment">// 前闭后开</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span> inBegin, <span class="hljs-type">int</span> inEnd, <span class="hljs-type">int</span>[] postorder, <span class="hljs-type">int</span> postBegin, <span class="hljs-type">int</span> postEnd)</span> &#123;<br>        <span class="hljs-comment">// 参数里的范围都是前闭后开</span><br>        <span class="hljs-keyword">if</span> (inBegin &gt;= inEnd || postBegin &gt;= postEnd) &#123;  <span class="hljs-comment">// 不满足左闭右开，说明没有元素，返回空树</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rootIndex</span> <span class="hljs-operator">=</span> map.get(postorder[postEnd - <span class="hljs-number">1</span>]);  <span class="hljs-comment">// 找到后序遍历的最后一个元素在中序遍历中的位置</span><br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(inorder[rootIndex]);  <span class="hljs-comment">// 构造结点</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">lenOfLeft</span> <span class="hljs-operator">=</span> rootIndex - inBegin;  <span class="hljs-comment">// 保存中序左子树个数，用来确定后序数列的个数</span><br>        root.left = findNode(inorder, inBegin, rootIndex,<br>                            postorder, postBegin, postBegin + lenOfLeft);<br>        root.right = findNode(inorder, rootIndex + <span class="hljs-number">1</span>, inEnd,<br>                            postorder, postBegin + lenOfLeft, postEnd - <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> Map&lt;Integer, Integer&gt; map;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">buildTree</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span>[] postorder)</span> &#123;<br>        map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i: inorder) &#123;<br>            map.put(i, count++);<br>        &#125;<br>        <span class="hljs-keyword">return</span> findNode(inorder, <span class="hljs-number">0</span>, inorder.length, postorder, <span class="hljs-number">0</span>, postorder.length);<br>    &#125;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-title function_">findNode</span><span class="hljs-params">(<span class="hljs-type">int</span>[] inorder, <span class="hljs-type">int</span> inBegin, <span class="hljs-type">int</span> inEnd, <span class="hljs-type">int</span>[] postorder, <span class="hljs-type">int</span> postBegin, <span class="hljs-type">int</span> postEnd)</span> &#123;<br>        <span class="hljs-keyword">if</span>(inBegin &gt;= inEnd || postBegin &gt;= postEnd) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> map.get(postorder[postEnd - <span class="hljs-number">1</span>]);<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(inorder[index]);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> index - inBegin;<br>        node.left = findNode(inorder, inBegin, index, postorder, postBegin, postBegin + len);<br>        node.right = findNode(inorder, index + <span class="hljs-number">1</span>, inEnd, postorder, postBegin + len, postEnd - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> node;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-14-最大二叉树"><a href="#7-14-最大二叉树" class="headerlink" title="7.14 最大二叉树"></a>7.14 最大二叉树</h2><h3 id="递归法-3"><a href="#递归法-3" class="headerlink" title="递归法"></a>递归法</h3><h3 id="迭代法-3"><a href="#迭代法-3" class="headerlink" title="迭代法"></a>迭代法</h3><h2 id="7-15-合并二叉树"><a href="#7-15-合并二叉树" class="headerlink" title="7.15 合并二叉树"></a>7.15 合并二叉树</h2><h3 id="递归法-4"><a href="#递归法-4" class="headerlink" title="递归法"></a>递归法</h3><h3 id="迭代法-4"><a href="#迭代法-4" class="headerlink" title="迭代法"></a>迭代法</h3>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Hot 100 刷题 [31-40]</title>
    <link href="/2022/08/02/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-31-40/"/>
    <url>/2022/08/02/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-31-40/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Hot-100-31-40"><a href="#LeetCode-Hot-100-31-40" class="headerlink" title="LeetCode Hot 100 [31-40]"></a>LeetCode Hot 100 [31-40]</h1><blockquote><p>刷完了《剑指Offer》，下一阶段，开始 LeetCode Hot 100。 之前一直都用思维导图记录，今天发现思维导图可以导出成markdown，简单编辑一下就可以成为文章。相比Xmind，博客文章打开和查看更加方便，所以之后每次Xmind记录之后，会再在这里同时同步一下</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HOT100，之前的文章传送门<br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot100-shua-ti-1-10.html">LeetCode Hot 100 刷题 [1-10]</a><br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot-100-shua-ti-11-20.html">LeetCode Hot 100 刷题 [11-20]</a><br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot-100-shua-ti-21-30.html">LeetCode Hot 100 刷题 [21-30]</a></p><h2 id="31-求所有子集"><a href="#31-求所有子集" class="headerlink" title="31. 求所有子集"></a>31. 求所有子集</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。</li></ul></blockquote><ul><li>说明：解集不能包含重复的子集。</li><li>输入: nums &#x3D; [1,2,3]</li><li>输出:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">2</span>],<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>  []<br>]<br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/subsets/">link</a></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="解法1：集合迭代扩充"><a href="#解法1：集合迭代扩充" class="headerlink" title="解法1：集合迭代扩充"></a>解法1：集合迭代扩充</h4><ul><li>原理：每次向集合中新加入一个元素，新元素与已有元素组合形成新的元素</li><li>思路过程</li></ul><ol><li>首先，集合内无元素，所以只有一个空子集</li><li>依次将元素加入到集合中，每次加入后，新元素与已有子集成新的子集<ul><li>遍历已有的子集，每个子集后边追加新元素，然后加入到集合中</li></ul></li></ol><ul><li><ol start="3"><li>直到所有的元素都加入到了集合中</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsets</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       ArrayList&lt;List&lt;Integer&gt;&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;());<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> result.size();<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; size; j++)&#123;<br>               ArrayList&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(result.get(j));<br>               ans.add(nums[i]);<br>               result.add(ans);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> result;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N* 2^N)</li><li>空间复杂度O(1)</li></ul></li></ul><h4 id="解法2：DFS-回溯"><a href="#解法2：DFS-回溯" class="headerlink" title="解法2：DFS + 回溯"></a>解法2：DFS + 回溯</h4><ul><li>对不同长度的子集分别进行遍历</li><li><code>dfs(int start, int len，List path)</code><ul><li>start，子集候选元素的起始区间</li><li>len，子集剩余长度</li><li>path，目前子集中的元素</li></ul></li><li>回溯过程<ul><li>依次尝试从start 开始的各个元素，加入到path中</li><li>尝试后，下次dfs的start从该元素的下个开始， len-1</li><li>尝试结束后，回溯</li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">// 回溯算法</span><br>    ArrayList&lt;List&lt;Integer&gt;&gt; result;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsets</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        ArrayList&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i &lt;= nums.length; i++ )&#123;<br>            dfs(nums,<span class="hljs-number">0</span>,i,ans);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> len, List&lt;Integer&gt; ans)</span>&#123;<br>        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)&#123;<br>            result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(ans));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; nums.length-len+<span class="hljs-number">1</span>; i++)&#123;<br>            ans.add(nums[i]);<br>            dfs(nums, i+<span class="hljs-number">1</span>, len-<span class="hljs-number">1</span>, ans);<br>            ans.remove(ans.size()-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N*2^N)</li><li>空间复杂度O(N*2^N)</li></ul></li></ul><h4 id="解法3：二进制位掩码法"><a href="#解法3：二进制位掩码法" class="headerlink" title="解法3：二进制位掩码法"></a>解法3：二进制位掩码法</h4><ul><li><p>通过生成从 0…0 到 1….1 的二进制掩码，掩码每一位对应该元素是否被选中</p></li><li><p><strong>如何生成从 0…0 到 1…1的所有掩码</strong></p><ul><li>设掩码需要 N 位</li><li>则，0 &lt;&#x3D; num &lt; pow(2, N)</li></ul></li><li><p><strong>如何读取判断掩码每一位是否为1</strong></p><ul><li>右移</li><li>与1  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>( bitMask != <span class="hljs-number">0</span> )&#123;<br>    <span class="hljs-keyword">if</span>((bitMask&amp;<span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)&#123;<br>        ans.add(nums[index]);<br>    &#125;<br>    index++;<br>    bitMask = bitMask &gt;&gt; <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;List&lt;Integer&gt;&gt; result;<br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsets</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)Math.pow(<span class="hljs-number">2</span>, nums.length);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; max; i++)&#123;<br>        ArrayList&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bitMask</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-keyword">while</span>( bitMask != <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">if</span>((bitMask&amp;<span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)&#123;<br>                ans.add(nums[index]);<br>            &#125;<br>            index++;<br>            bitMask = bitMask &gt;&gt; <span class="hljs-number">1</span>;<br>        &#125;<br>        result.add(ans);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N * 2^N)</li><li>空间复杂度O(1)</li></ul></li></ul><h2 id="32-矩形中搜索单词"><a href="#32-矩形中搜索单词" class="headerlink" title="32. 矩形中搜索单词"></a>32. 矩形中搜索单词</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</li></ul></blockquote><ul><li>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">board =<br>[<br>  [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>],<br>  [<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>],<br>  [<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>]<br>]<br></code></pre></td></tr></table></figure></li><li>给定 word &#x3D; “ABCCED”, 返回 true</li><li>给定 word &#x3D; “SEE”, 返回 true</li><li>给定 word &#x3D; “ABCB”, 返回 false</li><li><a href="https://leetcode-cn.com/problems/word-search/">leetcode link</a></li></ul><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>纯种的深度优先遍历算法DFS+回溯</p></li><li><p>思路与过程</p><ul><li>变量设计<ul><li>visited矩阵判断该位置是否访问过</li><li>dfs(int i, int j, int index)<ul><li>i,j为当前字符所在坐标</li><li>index为当前匹配到哪个字符了</li></ul></li></ul></li><li>DFS依次尝试上、下、左、右四个方向<ul><li>该方向元素匹配下一个字符，且该元素没被访问过，才会被尝试</li></ul></li></ul></li><li><p>代码实现</p><ul><li>查找过程  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> [][] board;<br>   <span class="hljs-type">boolean</span>[][] visited;<br>   String word;<br>   ArrayList&lt;List&lt;Integer&gt;&gt; direct;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">exist</span><span class="hljs-params">(<span class="hljs-type">char</span>[][] board, String word)</span> &#123;<br>       <span class="hljs-built_in">this</span>.board = board;<br>       <span class="hljs-built_in">this</span>.visited = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span> [board.length][board[<span class="hljs-number">0</span>].length];<br>       <span class="hljs-built_in">this</span>.word = word;<br>       direct = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       direct.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-keyword">new</span> ))<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; board.length; i++)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; board[<span class="hljs-number">0</span>].length; j++)&#123;<br>               <span class="hljs-keyword">if</span>(board[i][j] == word.charAt(<span class="hljs-number">0</span>))&#123;<br>                   <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> dfs(i,j, <span class="hljs-number">1</span>);<br>                   <span class="hljs-keyword">if</span>(result)&#123;<br>                       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>DFS过程  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j,<span class="hljs-type">int</span> index)</span>&#123;<br>       <span class="hljs-keyword">if</span>(index == word.length())&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       visited[i][j] = <span class="hljs-literal">true</span>;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>       <span class="hljs-keyword">if</span>(i-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i-<span class="hljs-number">1</span>][j] == word.charAt(index) &amp;&amp; visited[i-<span class="hljs-number">1</span>][j] == <span class="hljs-literal">false</span>)&#123;<br>           res = dfs(i-<span class="hljs-number">1</span>,j,index+<span class="hljs-number">1</span>);<br>           visited[i-<span class="hljs-number">1</span>][j] = <span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">if</span>(res) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(i+<span class="hljs-number">1</span> &lt; board.length &amp;&amp; board[i+<span class="hljs-number">1</span>][j] == word.charAt(index)&amp;&amp; visited[i+<span class="hljs-number">1</span>][j] == <span class="hljs-literal">false</span>)&#123;<br>           res = dfs(i+<span class="hljs-number">1</span>,j,index+<span class="hljs-number">1</span>);<br>           visited[i+<span class="hljs-number">1</span>][j] = <span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">if</span>(res) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(j+<span class="hljs-number">1</span> &lt; board[<span class="hljs-number">0</span>].length &amp;&amp; board[i][j+<span class="hljs-number">1</span>] == word.charAt(index)&amp;&amp; visited[i][j+<span class="hljs-number">1</span>] == <span class="hljs-literal">false</span>)&#123;<br>           res = dfs(i,j+<span class="hljs-number">1</span>,index+<span class="hljs-number">1</span>);<br>           visited[i][j+<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">if</span>(res) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(j-<span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; board[i][j-<span class="hljs-number">1</span>] == word.charAt(index)&amp;&amp; visited[i][j-<span class="hljs-number">1</span>] == <span class="hljs-literal">false</span>)&#123;<br>           res = dfs(i,j-<span class="hljs-number">1</span>,index+<span class="hljs-number">1</span>);<br>           visited[i][j-<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>           <span class="hljs-keyword">if</span>(res) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>       &#125;  <br>       visited[i][j] = <span class="hljs-literal">false</span>;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>四个方向，也可以通过一个direction数组来表示，这样四个分支可以通过一个循环搞定</li></ul></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N<em>M</em>K)</li><li>空间复杂度O(N<em>M</em>4*K)</li></ul></li></ul><h2 id="33-柱状图中最大的矩形"><a href="#33-柱状图中最大的矩形" class="headerlink" title="33.柱状图中最大的矩形"></a>33.柱状图中最大的矩形</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</li></ul></blockquote><ul><li>求在该柱状图中，能够勾勒出来的矩形的最大面积。</li><li>输入: [2,1,5,6,2,3]</li><li>输出: 10</li><li><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">Leetcode LinK</a></li></ul><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>想到接雨水、剑指Offer中的问题<ul><li>接雨水中，由最高的墙分割区间</li><li>本题中，面积最大，由最矮的墙分割区间</li></ul></li></ul><h4 id="思路1：迭代按列计算"><a href="#思路1：迭代按列计算" class="headerlink" title="思路1：迭代按列计算"></a>思路1：迭代按列计算</h4><ul><li><p>原理：依次计算以各个列作为高度的最大面积</p></li><li><p>高度为该列的高度</p></li><li><p>宽度</p><ul><li>向左找到第一个比自己小的，其右边的 left</li><li>向右找到第一个比自己大的，其左边的 right</li><li>之间的距离便是宽度， right - left + 1</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">largestRectangleArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] heights)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxArea</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; heights.length; i++) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i, right = i;<br>           <span class="hljs-comment">// 向左寻找第一个比自己小的</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>               <span class="hljs-keyword">if</span>(heights[j] &lt; heights[i])&#123;<br>                   left = j+<span class="hljs-number">1</span>;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(j == <span class="hljs-number">0</span>)&#123;<br>                   left = <span class="hljs-number">0</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">// 向右寻找第一个比自己小的</span><br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; heights.length; j++) &#123;<br>               <span class="hljs-keyword">if</span>(heights[j] &lt; heights[i])&#123;<br>                   right = j - <span class="hljs-number">1</span>;<br>                   <span class="hljs-keyword">break</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(j == heights.length-<span class="hljs-number">1</span>)&#123;<br>                   right = heights.length-<span class="hljs-number">1</span>;<br>               &#125;<br>           &#125;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> right - left + <span class="hljs-number">1</span>;<br>           maxArea = Math.max(maxArea, width * heights[i]);<br>       &#125;<br>       <span class="hljs-keyword">return</span> maxArea;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N^2)</li><li>空间复杂度O(1)</li></ul></li></ul><h4 id="思路2：递归分治计算"><a href="#思路2：递归分治计算" class="headerlink" title="思路2：递归分治计算"></a>思路2：递归分治计算</h4><ul><li>每个列以他为高度的矩形的宽度是由区间中最矮的列决定的</li><li>与接雨水问题相反，用最矮的列不断对区间进行分割</li><li>思路与过程</li></ul><ol><li>找到区间中的最矮的列，其将区间分成左右两个部分</li><li>继续对左右区间再查找最矮列</li><li>递归计算各个子区间中的最大面积<ul><li>最大面积为三者中的最大值<ul><li>左区间的最大面积</li><li>右区间的最大面积</li><li>以当前区间最矮列为高，区间长度为宽度的面积</li></ul></li></ul></li></ol><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">largestRectangleArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] heights)</span> &#123;<br>        <span class="hljs-keyword">return</span> recv(heights, <span class="hljs-number">0</span>, heights.length-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recv</span><span class="hljs-params">(<span class="hljs-type">int</span> [] heights,<span class="hljs-type">int</span> left , <span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(left &gt; right) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> left, index = left;<br>        <span class="hljs-keyword">while</span>(index &lt;= right)&#123;<br>            <span class="hljs-keyword">if</span>(heights[index] &lt; heights[minIndex])&#123;<br>                minIndex = index;<br>            &#125;<br>            index++;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> right - left + <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> heights[minIndex];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> width * height;<br>        area = Math.max(area, recv(heights, left, minIndex-<span class="hljs-number">1</span>));<br>        area = Math.max(area, recv(heights, minIndex+<span class="hljs-number">1</span>, right));<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N^2)</li><li>空间复杂度O(N)</li></ul></li></ul><h4 id="思路3：单调栈"><a href="#思路3：单调栈" class="headerlink" title="思路3：单调栈"></a>思路3：单调栈</h4><ul><li>是解决该类矩形面积问题的较优解法</li><li>原理和思路1是一样的，也是按列计算</li><li>以空间换时间<ul><li>用单调栈来减少查找左右最小值的时间复杂度</li></ul></li><li>思路与过程</li></ul><ol start="0"><li>栈中存储的是列的数组下标</li><li>当栈为空、当前列高度大于等于栈顶下标对应的列，<ul><li>则，将当前列坐标入栈</li><li>目的是找到第一个递减的列，出现递减，则其前边的几个列便可以确定宽度了</li><li>循环，直到不满足条件</li></ul></li><li>当出现当前列高度小于栈顶下标对应的列<ul><li>设当前列的索引为 rightIndex， 它是栈顶列右边第一个小于它的</li><li>poll出栈顶坐标 index，获取其高度 height[ index]，作为矩形的height</li><li>leftIndex 为栈顶下标，栈顶下标是 index列左边第一个小于它的</li><li>宽度为 (rightIndex-1) - (leftIndex+1) + 1</li><li>循环，直到栈顶元素高度大于 rightIndex 的高度<ul><li>然后将rightIndex入栈，即，始终要保持栈中元素式单调非减的</li></ul></li><li>继续 从1循环</li></ul></li><li>当列从左向右都遍历一遍了，栈中应该还会剩下一些元素<ol><li>取出栈顶元素下标作为rightIndex</li><li>循环，直到栈为空<ol><li>poll出栈顶坐标index，获得矩形高度为height[index]</li><li>leftIndex &#x3D; 新的栈顶元素下标，如果栈为空了，则leftIndex为0</li><li>宽度为，rightIndex - leftIndex + 1</li><li>更新maxArea</li></ol></li></ol></li></ol><ul><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">largestRectangleArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] heights)</span> &#123;<br>       <span class="hljs-keyword">if</span>(heights.length == <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxArea</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-comment">// 栈中保存的是元素的数组下标</span><br>       Deque&lt;Integer&gt; stack= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayDeque</span>&lt;&gt;();<br>       stack.push(<span class="hljs-number">0</span>);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (index &lt; heights.length)&#123;<br>           <span class="hljs-keyword">if</span>(heights[index] &gt;= heights[stack.peek()])&#123;<br>               stack.push(index);<br>               index++;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-comment">// 遇到第一个比栈顶小的了</span><br>           <span class="hljs-keyword">while</span> (!stack.isEmpty() &amp;&amp; heights[index] &lt; heights[stack.peek()])&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> heights[stack.poll()];<br>               <span class="hljs-type">int</span> <span class="hljs-variable">leftIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>               <span class="hljs-keyword">if</span>(!stack.isEmpty())&#123;<br>                   leftIndex = stack.peek() + <span class="hljs-number">1</span>;<br>               &#125;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> index - leftIndex;<br>               maxArea = Math.max(maxArea, width* height);<br>           &#125;<br>           stack.push(index);<br>           index++;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(!stack.isEmpty())&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">rightIndex</span> <span class="hljs-operator">=</span> stack.peek();<br>           <span class="hljs-keyword">while</span> (!stack.isEmpty())&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> heights[stack.poll()];<br>               <span class="hljs-type">int</span> <span class="hljs-variable">leftIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>               <span class="hljs-keyword">if</span>(!stack.isEmpty())&#123;<br>                   leftIndex = stack.peek() + <span class="hljs-number">1</span>;                    <br>               &#125;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">width</span> <span class="hljs-operator">=</span> rightIndex - leftIndex + <span class="hljs-number">1</span>;<br>               maxArea = Math.max(maxArea, width * height);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> maxArea;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度 O(N)</li><li>空间复杂度O(N)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Hot 100 刷题 [21-30]</title>
    <link href="/2022/07/28/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-21-30/"/>
    <url>/2022/07/28/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-21-30/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Hot-100-11-20"><a href="#LeetCode-Hot-100-11-20" class="headerlink" title="LeetCode Hot 100 [11-20]"></a>LeetCode Hot 100 [11-20]</h1><blockquote><p>刷完了《剑指Offer》，下一阶段，开始 LeetCode Hot 100。 之前一直都用思维导图记录，今天发现思维导图可以导出成markdown，简单编辑一下就可以成为文章。相比Xmind，博客文章打开和查看更加方便，所以之后每次Xmind记录之后，会再在这里同时同步一下</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HOT100，之前的文章传送门<br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot100-shua-ti-1-10.html">LeetCode Hot 100 刷题 [1-10]</a><br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot-100-shua-ti-11-20.html">LeetCode Hot 100 刷题 [11-20]</a></p><h2 id="21-接雨水问题"><a href="#21-接雨水问题" class="headerlink" title="21.接雨水问题"></a>21.接雨水问题</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</li></ul></blockquote><ul><li>输入: [0,1,0,2,1,0,1,3,2,1,2,1]</li><li>输出: 6</li><li><a href="https://leetcode-cn.com/problems/trapping-rain-water/">题目地址</a></li><li>这是一道Hard题</li></ul><p></p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1：暴力算法"><a href="#思路1：暴力算法" class="headerlink" title="思路1：暴力算法"></a>思路1：暴力算法</h4><ul><li>按列，统计每个列上可以存的雨水的量</li><li>如何计算某个列上存水的量<ol><li>遍历找出该列左边的最大高度，maxleft</li><li>遍历找出该列右边的最大高度，maxRight</li><li>水的高度取决于maxLeft和maxRight中的较小者</li><li>这个列上水的深度为水的高度 - 该列的高度</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">trap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; height.length; i++)&#123;<br>          <span class="hljs-comment">// find max left</span><br>          <span class="hljs-type">int</span> <span class="hljs-variable">leftMax</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br>              leftMax = Math.max(leftMax, height[j]);<br>          &#125;<br>          <span class="hljs-comment">// find max right</span><br>          <span class="hljs-type">int</span> <span class="hljs-variable">rightMax</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>          <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j&lt;height.length; j++)&#123;<br>              rightMax = Math.max(rightMax, height[j]);<br>          &#125;<br>          <span class="hljs-type">int</span> <span class="hljs-variable">validHeight</span> <span class="hljs-operator">=</span> Math.min(leftMax,rightMax);<br>          res += Math.max(<span class="hljs-number">0</span>, validHeight-height[i]);<br>      &#125;<br>      <span class="hljs-keyword">return</span> res;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>算法复杂度<ul><li>时间复杂度O(N^2)</li></ul></li></ul><h4 id="思路2：动态规划"><a href="#思路2：动态规划" class="headerlink" title="思路2：动态规划"></a>思路2：动态规划</h4><ul><li>对思路1进行优化，思路1中查找左右最大值的过程可以通过DP优化</li><li>定义maxLeftDP[ i ] 为 i 左边的最大高度，同理，maxRightDp[ i ]为 i 右边的最大高度 </li><li>maxLeftDP[ i ] &#x3D; Max{ maxLeftDP[ i-1 ] , height[ i-1 ] }</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">trap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> [] maxLeftDP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [height.length];<br>       <span class="hljs-type">int</span> [] maxRightDP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [height.length];<br>       <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> height.length;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; size-<span class="hljs-number">1</span>; i++)&#123;<br>           maxLeftDP[i] = Math.max(maxLeftDP[i-<span class="hljs-number">1</span>], height[i-<span class="hljs-number">1</span>]);<br>           maxRightDP[size-<span class="hljs-number">1</span>- i] = Math.max(maxRightDP[ size-i], height[size-i]);<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; height.length-<span class="hljs-number">1</span>; i++)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">validHeight</span> <span class="hljs-operator">=</span> Math.min(maxLeftDP[i],maxRightDP[i]);<br>           res += Math.max(<span class="hljs-number">0</span>, validHeight-height[i]);<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul></li></ul><h4 id="思路3：双指针解法"><a href="#思路3：双指针解法" class="headerlink" title="思路3：双指针解法"></a>思路3：双指针解法</h4><ul><li>对思路2中的空间复杂度还可以进一步优化</li><li>DP递推方程中，maxLeft和maxRight其实只用到左右边的一个，其实可以不用数组来存储</li><li>maxLeftDP是直接可以用变量来替代的，但是maxRightDP的求解是从右向左的，不方便直接用变量来替代</li><li>思路与过程<ul><li>left、right双指针从两端进行更新</li><li>maxLeft、maxRight记录left和right位置对应的左右最大值</li><li>maxLeft和maxRight中，起作用的是他们中的较小值，所以每次left和right指针更新较小值的一端</li></ul></li><li>如何选择更新哪一段<ul><li>maxLeft &lt; maxRight<ul><li>可以保证maxLeft为left左边最大值，且它是起作用的</li><li>left指针前进，同时更新maxleft<br>  maxLeft &gt; maxRight</li><li>同理，可以保障maxRight为right右边最大值，且它比maxLeft要小，所以即便加上右边还没检查的部分，最终的maxLeft还是比maxRight大，即起作用的还是maxRight</li><li>所以，right指针前进，同时更新maxRight</li></ul></li><li>让我想起了类似的用双指针求最大面积的题目<ul><li>每次搜索高度较小的一边</li></ul></li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">trap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = height.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxLeft</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, maxRight = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>( left &lt;= right)&#123;<br>           <span class="hljs-comment">// maxLeft 起作用</span><br>           <span class="hljs-keyword">if</span>( height[left] &lt; maxRight &amp;&amp; maxLeft &lt; maxRight )&#123;<br>               <span class="hljs-keyword">if</span>( height[left] &gt; maxLeft )&#123;<br>                   maxLeft = height[left];<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   res += maxLeft - height[left];<br>               &#125; <br>               left++;<br>           &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// maxRight 起作用</span><br>               <span class="hljs-keyword">if</span>( height[right] &gt; maxRight )&#123;<br>                   maxRight = height[right];<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   res += maxRight - height[right];<br>               &#125; <br>               right--;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul></li></ul><h2 id="22-旋转图像"><a href="#22-旋转图像" class="headerlink" title="22.旋转图像"></a>22.旋转图像</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个 n × n 的二维矩阵表示一个图像。</li></ul></blockquote><ul><li>将图像顺时针旋转 90 度。</li><li>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</li><li>给定 matrix &#x3D; <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],<br>  [<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>]<br></code></pre></td></tr></table></figure></li><li>原地旋转输入矩阵，使其变为:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">8</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>],<br>  [<span class="hljs-number">9</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]<br>]<br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/rotate-image">题目地址</a></li></ul><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1：转置-行交换"><a href="#思路1：转置-行交换" class="headerlink" title="思路1：转置+行交换"></a>思路1：转置+行交换</h4><ul><li>思路与过程<ol><li>将行按照对称的方式进行交换<ul><li>a[i][j] 与 a[ len-i-1 ][j]交换</li></ul></li><li>将处理后的矩阵按对角进行转置<ul><li>a[i][j] 与 a[j][i]交换</li></ul></li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> &#123;<br>       <span class="hljs-comment">// 水平交换</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = matrix.length-<span class="hljs-number">1</span>;<br><br>       <span class="hljs-keyword">while</span>( left &lt; right)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix[<span class="hljs-number">0</span>].length;i++)&#123;<br>               rowSwap(matrix, left, right, i);<br>           &#125;<br>           left++;<br>           right--;<br>       &#125;<br>       <span class="hljs-comment">// 对角线对称</span><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;matrix.length; i++)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j&lt; i; j++)&#123;<br>               angleSwap(matrix,i,j);<br>           &#125;<br>       &#125;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rowSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> [][] matrix, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right , <span class="hljs-type">int</span> i)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> matrix[left][i];<br>       matrix[left][i] = matrix[right][i];<br>       matrix[right][i] = temp;<br>   &#125;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">angleSwap</span><span class="hljs-params">(<span class="hljs-type">int</span> [][] matrix, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> matrix[i][j];<br>       matrix[i][j] = matrix[j][i];<br>       matrix[j][i] = temp;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度评估<ul><li>时间复杂度O(N^2)</li></ul></li></ul><h2 id="23-字母异位词分组"><a href="#23-字母异位词分组" class="headerlink" title="23.字母异位词分组"></a>23.字母异位词分组</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</li></ul></blockquote><ul><li>输入: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]</li><li>输出:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-string">&quot;ate&quot;</span>,<span class="hljs-string">&quot;eat&quot;</span>,<span class="hljs-string">&quot;tea&quot;</span>],<br>  [<span class="hljs-string">&quot;nat&quot;</span>,<span class="hljs-string">&quot;tan&quot;</span>],<br>  [<span class="hljs-string">&quot;bat&quot;</span>]<br>]<br>```<br>- 所有输入均为小写字母。<br>- 不考虑答案输出的顺序。<br>- [题目地址](https:<span class="hljs-comment">//leetcode-cn.com/problems/group-anagrams/)</span><br><br>### 解题思路<br>#### 思路<span class="hljs-number">1</span>：排序 + HashMap<br>- 对每一个字符串的字符按字典序进行排序<br>- 将排序后的结果作为HashMap的key，value为列表<br>- 最终将HashMap的values输出为列表<br>    - values()，返回的是数组，不是List，需要将数组转化成list<br>- Java8 Stream API:`hashMap.values().stream().collect(Collectors.toList())`<br>- Java8之前：`<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(hashMap.values())`<br>- 代码实现<br>```java<br><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        HashMap&lt;String, List&lt;String&gt;&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-keyword">for</span>(String str : strs)&#123;<br>            <span class="hljs-type">char</span> [] values = str.toCharArray();<br>            Arrays.sort(values);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(values);<br>            <span class="hljs-keyword">if</span>(hashMap.containsKey(key))&#123;<br>                hashMap.get(key).add(str);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>                list.add(str);<br>                hashMap.put(key,list);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hashMap.values().stream().collect(Collectors.toList());<br>    &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(Nklogk)</li><li>空间复杂度O(NK)</li></ul></li></ul><h4 id="思路2：字符计数-HashMap"><a href="#思路2：字符计数-HashMap" class="headerlink" title="思路2：字符计数 + HashMap"></a>思路2：字符计数 + HashMap</h4><ul><li>与思路1基本类似，只是key的生成方式不一样</li><li>思路1需要排序，O(klogk)，还是比较高的</li><li>可以统计每个字符串中26个字母出现的次数，作为模式，模式作为hashmap的key<ul><li>计数模式：<code>int [ ] count = new int [26]</code></li><li>最后的模式串：<code>1#0#6#...</code></li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>       HashMap&lt;String, List&lt;String&gt;&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>       <span class="hljs-type">int</span> [] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [<span class="hljs-number">26</span>];<br>       <span class="hljs-keyword">for</span>(String str : strs)&#123;<br>           <span class="hljs-type">char</span> [] values = str.toCharArray();<br>           Arrays.fill(count, <span class="hljs-number">0</span>);<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> ch : values)&#123;<br>               count[ch-<span class="hljs-string">&#x27;a&#x27;</span>]++;<br>           &#125;<br>           <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:count)&#123;<br>               builder.append(num);<br>               builder.append(<span class="hljs-string">&#x27;,&#x27;</span>);<br>           &#125;<br>           <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> builder.toString();<br>           <span class="hljs-keyword">if</span>(hashMap.containsKey(key))&#123;<br>               hashMap.get(key).add(str);<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>               list.add(str);<br>               hashMap.put(key,list);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> hashMap.values().stream().collect(Collectors.toList());<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(NK)</li><li>空间复杂度O(NK)</li></ul></li></ul><h2 id="24-跳跃游戏"><a href="#24-跳跃游戏" class="headerlink" title="24.跳跃游戏"></a>24.跳跃游戏</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个非负整数数组，你最初位于数组的第一个位置。</li></ul></blockquote><ul><li>数组中的每个元素代表你在该位置可以跳跃的最大长度。</li><li>判断你是否能够到达最后一个位置。</li><li>输入: [2,3,1,1,4]</li><li>输出: true</li><li>解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。</li><li><a href="https://leetcode-cn.com/problems/jump-game/">题目地址</a></li></ul><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1：排除法"><a href="#思路1：排除法" class="headerlink" title="思路1：排除法"></a>思路1：排除法</h4><ul><li>研究什么时候跳不到终点<ol><li>序列中有 0 的时候，才会可能跳不到终点</li><li>当 0 前边所有的数都无法跳过 0 ，则必定跳不过去<ul><li>即该位置的值，小于等于该位置距离0的格数</li></ul></li><li>最后一个为0不影响</li></ol></li><li>思路过程</li></ul><ol><li>遍历数组，检索所有的0<ul><li>最后一个位置是否为0不影响，所以不用判断</li></ul></li><li>对每一个0， 向前遍历，是否存在能跳跃过它的数</li><li>所有的都满足，则可以到达最后一个位置</li></ol><ul><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;        <br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-comment">// 最后一个是0还是非0对结果不影响</span><br>           <span class="hljs-keyword">if</span>(nums[i] == <span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-type">int</span> j,dis=<span class="hljs-number">1</span>;<br>               <span class="hljs-keyword">for</span>(j = i-<span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--,dis++)&#123;<br>                   <span class="hljs-keyword">if</span>(nums[j] &gt; dis) <span class="hljs-keyword">break</span>;<br>               &#125;<br>               <span class="hljs-keyword">if</span>(j &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N^2)</li><li>空间复杂度O(1)</li></ul></li></ul><h4 id="思路2：贪心算法"><a href="#思路2：贪心算法" class="headerlink" title="思路2：贪心算法"></a>思路2：贪心算法</h4><ul><li>是本题的最优解法，也应该是主要的考察点</li><li>比较不容易想到贪心规则</li><li>某一位置可达，则该位置之前的位置均是可达的</li><li>所以，只要保障能到达的位置超过数组最后一个位置就可以了<ul><li>因此，每次都尽可能的向远处跳</li></ul></li><li>思路过程</li></ul><ol><li>mostFarIndex 标识目前能到达的最远位置</li><li>当前位置在最远位置或之前，则说明最远位置可能还可以更大，更新最远位置</li><li>若当前位置在最远位置之后了，则最远位置再也没法更新了，也就最终无法超越最后一个位置了</li></ol><ul><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;        <br>       <span class="hljs-type">int</span> <span class="hljs-variable">mostFarIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i &lt; nums.length-<span class="hljs-number">1</span>; i++)&#123; <span class="hljs-comment">// 最后一个不影响</span><br>           <span class="hljs-keyword">if</span>( i &lt;= mostFarIndex )&#123;<br>               mostFarIndex = Math.max(mostFarIndex, i + nums[i]);<br>               <span class="hljs-keyword">if</span>(mostFarIndex &gt;= nums.length-<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> mostFarIndex &gt;= nums.length-<span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul></li></ul><h2 id="25-合并区间"><a href="#25-合并区间" class="headerlink" title="25.合并区间"></a>25.合并区间</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>出一个区间的集合，请合并所有重叠的区间。</li></ul></blockquote><ul><li>示例</li><li>输入: [[1,3],[2,6],[8,10],[15,18]]</li><li>输出: [[1,6],[8,10],[15,18]]</li><li>解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</li><li><a href="https://leetcode-cn.com/problems/merge-intervals">题目链接</a></li></ul><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>先将区间按照左边界的大小排序<ul><li>lambda实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(intervals, (<span class="hljs-type">int</span> [] a, <span class="hljs-type">int</span> [] b)-&gt;&#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>];<br>&#125;);<br></code></pre></td></tr></table></figure></li></ul></li><li>然后遍历区间数组，相邻的区间能合并则合并</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] merge(<span class="hljs-type">int</span>[][] intervals) &#123;<br>       <span class="hljs-keyword">if</span>(intervals.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>       ArrayList&lt;<span class="hljs-type">int</span> []&gt; res = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>       <span class="hljs-comment">// 按第一个排序</span><br>       Arrays.sort(intervals, (<span class="hljs-type">int</span> [] a, <span class="hljs-type">int</span> [] b)-&gt;&#123;<br>           <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>] - b[<span class="hljs-number">0</span>];<br>       &#125;);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> intervals[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], end = intervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;intervals.length; i++)&#123;<br>           <span class="hljs-keyword">if</span>(intervals[i][<span class="hljs-number">0</span>] &lt;= end)&#123;<br>               end = Math.max(end, intervals[i][<span class="hljs-number">1</span>]);<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;start, end&#125;);<br>               start = intervals[i][<span class="hljs-number">0</span>];<br>               end = intervals[i][<span class="hljs-number">1</span>];<br>           &#125;<br>       &#125;<br>       res.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;start, end&#125;);<br>       <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[res.size()][<span class="hljs-number">2</span>]);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>O(NlogN)</li></ul></li></ul><h2 id="26-不同路径"><a href="#26-不同路径" class="headerlink" title="26.不同路径"></a>26.不同路径</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。</li></ul></blockquote><ul><li>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</li><li>问总共有多少条不同的路径？</li><li><a href="https://leetcode-cn.com/problems/unique-paths">题目链接</a></li></ul><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>典型的深度优先遍历，动态规划解题</li></ul><h4 id="思路1：DFS-回溯"><a href="#思路1：DFS-回溯" class="headerlink" title="思路1：DFS+回溯"></a>思路1：DFS+回溯</h4><ul><li>从左上角出发，分别尝试向下和向右，然后回溯</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        dfs(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,m,n);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span>(i &gt;= m || j &gt;= n) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>( i == m-<span class="hljs-number">1</span> &amp;&amp; j == n-<span class="hljs-number">1</span>)&#123;<br>            count++;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-comment">// 向右尝试</span><br>        <span class="hljs-keyword">if</span>(j &lt; n-<span class="hljs-number">1</span>)&#123;<br>            dfs(i,j+<span class="hljs-number">1</span>,m,n);<br>        &#125;<br>        <span class="hljs-comment">// 向左尝试</span><br>        <span class="hljs-keyword">if</span>(i &lt; m -<span class="hljs-number">1</span>)&#123;<br>            dfs(i+<span class="hljs-number">1</span>, j, m,n);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O((M+N)^2)</li><li>空间复杂度O(（M+N）^2)</li></ul></li></ul><h4 id="思路2：动态规划-1"><a href="#思路2：动态规划-1" class="headerlink" title="思路2：动态规划"></a>思路2：动态规划</h4><ul><li>dp[ i ][ j ]：到达坐标(i,j)位置有多少个路径<ul><li>&#x3D; dp[ i-1 ]dp[ j ] + dp[ i ][ j-1 ]</li></ul></li><li>思路过程<ol><li>创建二维dp数组，并进行初始化</li><li>dp数组的第一行和第一类初始化为1，因为可以确定只有1个路径</li><li>对dp数组进行填表操作</li></ol></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> [][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [m][n];<br>    Arrays.fill(dp[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] + dp[i][j-<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(M*N)</li><li>空间复杂度O(M*N)</li></ul></li></ul><h4 id="思路3：动态规划空间优化"><a href="#思路3：动态规划空间优化" class="headerlink" title="思路3：动态规划空间优化"></a>思路3：动态规划空间优化</h4><ul><li>思路2中的dp二维数组，可以继续优化成一维数组</li><li>因为递归关系中，只使用到了坐标左边和左边上边的位置</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> [] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [n];<br>    Arrays.fill(dp, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br>            dp[j] = dp[j-<span class="hljs-number">1</span>] + dp[j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n-<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="27-最小路径和"><a href="#27-最小路径和" class="headerlink" title="27. 最小路径和"></a>27. 最小路径和</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</li></ul></blockquote><ul><li>说明：每次只能向下或者向右移动一步。</li><li>输入:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>]<br></code></pre></td></tr></table></figure></li><li>输出: 7</li><li>解释: 因为路径 1→3→1→1→1 的总和最小。</li><li><a href="https://leetcode-cn.com/problems/minimum-path-sum">link</a></li></ul><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>思路明显，二维数组动态规划</li><li>dp[ i ][ j ]：从起点到达 (i , j)位置的路径和<ul><li>dp[ i ][ j ] &#x3D; Math.min(dp[ i ][j-1], dp[ i-1 ][ j ]) + grid[i][j];</li><li>只用到了左边和上边的位置，所以可以优化到一维数组</li><li>初始状态，i&#x3D;0 以及 j &#x3D; 0，第0行和第0列的初始化</li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minPathSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> &#123;<br>       <span class="hljs-keyword">if</span>(grid.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> dp[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [grid[<span class="hljs-number">0</span>].length];<br>       dp[<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> ; i &lt; dp.length; i++)&#123;<br>           dp[i] = dp[i-<span class="hljs-number">1</span>] + grid[<span class="hljs-number">0</span>][i];<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i&lt;grid.length; i++)&#123;<br>           dp[<span class="hljs-number">0</span>] += grid[i][<span class="hljs-number">0</span>]; <br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j&lt;dp.length; j++)&#123;<br>               dp[j] = Math.min(dp[j-<span class="hljs-number">1</span>], dp[j]) + grid[i][j];<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dp[dp.length-<span class="hljs-number">1</span>];<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N*M)</li><li>空间复杂度O(M)</li></ul></li></ul><h2 id="28-编辑距离"><a href="#28-编辑距离" class="headerlink" title="28. 编辑距离"></a>28. 编辑距离</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。</li></ul></blockquote><ul><li>你可以对一个单词进行如下三种操作：<ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul></li><li>输入：word1 &#x3D; “horse”, word2 &#x3D; “ros”</li><li>输出：3</li><li>解释:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">horse -&gt; rorse (将 <span class="hljs-string">&#x27;h&#x27;</span> 替换为 <span class="hljs-string">&#x27;r&#x27;</span>)<br>rorse -&gt; rose (删除 <span class="hljs-string">&#x27;r&#x27;</span>)<br>rose -&gt; ros (删除 <span class="hljs-string">&#x27;e&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/edit-distance">link</a></li></ul><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>动态规划解题</li></ul><ol><li>求最优解问题</li><li>是可以分阶段进行的<ul><li>每个阶段有插入、删除、替换三个选择</li><li>插入、删除、替换设定都在末尾进行<ul><li>等价的，在中间插入也是可以转换到尾部操作的</li></ul></li></ul></li><li>最优子结构<ul><li>dp[ i ][ j ]，表示将word1的前 i 位 转换成 word2的前 j 位需要的最少操作数</li><li>它可以通过三种方式获得，且取三种方式中的最小值</li></ul><ol><li>word1末尾插入<ul><li>dp[ i ][ j ] &#x3D; dp[ i-1 ][ j ] + 1;</li><li>hors -&gt; ros 需要a步，则horse -&gt; ros 需要 a+1 步</li></ul></li><li>word1末尾删除<ul><li>dp[ i ][ j ] &#x3D; dp[ i ][ j-1 ] + 1;</li><li>hors -&gt; ro需要 b 步，则 hors -&gt; ros 需要 b+1 步</li></ul></li><li>word1末尾替换<ul><li>dp[ i ][ j ] &#x3D; dp[ i-1 ][ j-1 ] + 1 ，如果 i 和 j 字符不同， 则需要额外一次替换操作<ul><li>hors - &gt; ro 为 c， 则horo -&gt; ro需要额外一次替换操作</li></ul></li><li>dp[ i ][ j ] &#x3D; dp[ i-1 ][ j ] , 如果 i 和 j 字符相同，则不需要额外一次操作 <ul><li>hor -&gt; ro 为 d ，则 hors -&gt; ros 为 d</li></ul></li></ul></li></ol></li></ol><ul><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDistance</span><span class="hljs-params">(String word1, String word2)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">len1</span> <span class="hljs-operator">=</span> word1.length(), len2 = word2.length();<br>       <span class="hljs-keyword">if</span>(len1 == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> len2;<br>       <span class="hljs-keyword">if</span>(len2 == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> len1;<br>       <span class="hljs-type">int</span> dp[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [len1 +<span class="hljs-number">1</span> ][len2+<span class="hljs-number">1</span>];<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= len1; i++ )&#123;<br>           dp[i][<span class="hljs-number">0</span>] = i;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;= len2; i++)&#123;<br>           dp[<span class="hljs-number">0</span>][i] = i;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= len1; i++)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= len2; j++)&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">insert</span> <span class="hljs-operator">=</span> dp[i-<span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> dp[i][j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">replace</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>               <span class="hljs-keyword">if</span>(word1.charAt(i-<span class="hljs-number">1</span>) == word2.charAt(j-<span class="hljs-number">1</span>))&#123;<br>                   replace = dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>];<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   replace = dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>               &#125;<br>               dp[i][j] = Stream.of(insert,remove, replace)<br>               .min(Comparator.comparing(Integer::valueOf)).get();<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> dp[len1][len2];<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(M*N)</li><li>空间复杂度O(M*N)</li></ul></li></ul><h2 id="29-颜色排序"><a href="#29-颜色排序" class="headerlink" title="29. 颜色排序"></a>29. 颜色排序</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</li></ul></blockquote><ul><li>此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。</li><li>不能使用代码库中的排序函数来解决这道题。</li><li>输入: [2,0,2,1,1,0]</li><li>输出: [0,0,1,1,2,2]</li><li>进阶<ul><li>一个直观的解决方案是使用计数排序的两趟扫描算法。</li><li>首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。</li><li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li></ul></li><li><a href="https://leetcode-cn.com/problems/sort-colors">题目地址</a></li></ul><p></p><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1：计数排序算法"><a href="#思路1：计数排序算法" class="headerlink" title="思路1：计数排序算法"></a>思路1：计数排序算法</h4><ul><li>计数排序<ol><li>数组统计各种元素的出现频数</li><li>对频数数组进行连续累加，对应的数字便是该类值插入位置的后一个</li><li>读取原数组中的数字，并查找频数数组，确定插入的位置<ul><li>插入成功之后，频数数组对应的值-1</li><li>即，插入位置前移一个</li></ul></li></ol></li><li>这里由于只要对值排序就可以，相同的值之间没有差异，所以得到频数数组之后，直接更改原数组即可</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-type">int</span>[] count = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>           count[nums[i]]++;<br>       &#125;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; count.length; i++) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; count[i]; j++) &#123;<br>               nums[index] = i;<br>               index++;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(K+N)</li><li>空间复杂度O(K)</li></ul></li></ul><h4 id="思路2：双指针算法"><a href="#思路2：双指针算法" class="headerlink" title="思路2：双指针算法"></a>思路2：双指针算法</h4><ul><li>类似三路排序的效果，能够高效处理含有大量重复元素的情况</li><li>一路指针标记0的插入位置，另一路标记2的插入位置，0和2排序好了，中间剩下的1便也排序好了</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sortColors</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> left;<br>       <span class="hljs-keyword">while</span> (index &lt;= right) &#123;<br>           <span class="hljs-keyword">if</span> (nums[index] == <span class="hljs-number">0</span>) &#123;<br>               swap(nums, index, left);<br>               left++;<br>               index++;<br>           &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[index] == <span class="hljs-number">2</span>) &#123;<br>               swap(nums, index, right);<br>               right--;<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               index++;<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul></li></ul><h2 id="30-最小包含子串"><a href="#30-最小包含子串" class="headerlink" title="30.最小包含子串"></a>30.最小包含子串</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。</li></ul></blockquote><ul><li>输入: S &#x3D; “ADOBECODEBANC”, T &#x3D; “ABC”</li><li>输出: “BANC”</li><li>如果 S 中不存这样的子串，则返回空字符串 “”。</li><li>如果 S 中存在这样的子串，我们保证它是唯一的答案。</li><li><a href="https://leetcode-cn.com/problems/minimum-window-substring">link</a></li></ul><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>滑动窗口解题的典型例题</li><li>T字符中可能存在重复字符<ul><li>对字符进行计数</li><li>可以使用数组统计128所有字符</li><li>也可以通过HashMap，只统计出现的字符  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : tValues) &#123;<br>       <span class="hljs-keyword">if</span> (tMap.containsKey(c)) &#123;<br>           tMap.put(c, tMap.get(c) + <span class="hljs-number">1</span>);<br>       &#125; <span class="hljs-keyword">else</span> &#123;<br>           tMap.put(c, <span class="hljs-number">1</span>);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>检测当前窗口是否包含T所有字符<ul><li>distance，即窗口内容与T之间的距离</li><li>当字符出现在T中，且该字符能缩小窗口与T距离的时候，distance++  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 字符在t中，更改distance</span><br>      <span class="hljs-keyword">if</span> (winMap.containsKey(sValues[right])) &#123;<br>          <span class="hljs-keyword">if</span> (winMap.get(sValues[right]) &lt; tMap.get(sValues[right])) &#123;<br>              distance++;<br>          &#125;<br>          winMap.put(sValues[right], winMap.get(sValues[right]) + <span class="hljs-number">1</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          winMap.put(sValues[right], <span class="hljs-number">1</span>);<br>          distance++;<br>      &#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>思路与过程</li></ul><ol><li>通过HashMap，统计T字符串中字符的出现次数</li><li>left，right&#x3D;0，窗口从左出发</li><li>先right右移，right位置元素未在TMap中，则继续右移</li><li>当right位置元素出现在TMap中<ul><li>如果SMap中该字符数目 &lt; TMap中该字符数目<ul><li>distance++</li><li>说明该字符能有效降低窗口和T之间的距离</li><li>若大于等于，说明该元素重复了</li></ul></li><li>然后SMap中该字符数目+1</li></ul></li><li>检测distance<ul><li>如果比T的长度小，则right继续右移</li><li>如果和T长度相等，说明当前窗口是满足包含所有T字符的子串，但需要缩小到最小子串</li></ul></li><li>left指针右移<ul><li>移动到distance不等于T长度为止</li><li>判断left位置字符是否出现在TMap中<ul><li>出现，若SMap中该字符频数 &lt;&#x3D; TMap中该字符频数，distance–</li></ul></li><li>SMap中该字符频数-1</li></ul></li><li>最终left的位置便是子串最左位置的下一个<ul><li>length &#x3D; right -left +2</li><li>更新最短长度以及其实位置</li></ul></li></ol><ul><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">minWindow</span><span class="hljs-params">(String s, String t)</span> &#123;<br>       <span class="hljs-type">char</span>[] sValues = s.toCharArray();<br>       <span class="hljs-type">char</span>[] tValues = t.toCharArray();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>       HashMap&lt;Character, Integer&gt; tMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       HashMap&lt;Character, Integer&gt; winMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">minBegin</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, minLength = Integer.MAX_VALUE;<br><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : tValues) &#123;<br>           <span class="hljs-keyword">if</span> (tMap.containsKey(c)) &#123;<br>               tMap.put(c, tMap.get(c) + <span class="hljs-number">1</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               tMap.put(c, <span class="hljs-number">1</span>);<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">while</span> (right &lt; sValues.length) &#123;<br>           <span class="hljs-comment">// right 右移</span><br>           <span class="hljs-keyword">if</span> (!tMap.containsKey(sValues[right])) &#123;<br>               <span class="hljs-comment">// 字符不在t中，right右移</span><br>               right++;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-comment">// 字符在t中，更改distance</span><br>           <span class="hljs-keyword">if</span> (winMap.containsKey(sValues[right])) &#123;<br>               <span class="hljs-keyword">if</span> (winMap.get(sValues[right]) &lt; tMap.get(sValues[right])) &#123;<br>                   distance++;<br>               &#125;<br>               winMap.put(sValues[right], winMap.get(sValues[right]) + <span class="hljs-number">1</span>);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               winMap.put(sValues[right], <span class="hljs-number">1</span>);<br>               distance++;<br>           &#125;<br>           <span class="hljs-keyword">if</span> (distance &lt; t.length()) &#123;<br>               right++;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-comment">// 判断distance,等于t串长度的时候，left开始左移</span><br>           <span class="hljs-keyword">while</span> (distance == t.length()) &#123;<br>               <span class="hljs-keyword">if</span> (winMap.containsKey(sValues[left])) &#123;<br>                   <span class="hljs-keyword">if</span> (winMap.get(sValues[left]) &lt;= tMap.get(sValues[left])) &#123;<br>                       distance--;<br>                   &#125;<br>                   winMap.put(sValues[left], winMap.get(sValues[left]) - <span class="hljs-number">1</span>);<br>               &#125;<br>               left++;<br>           &#125;<br>           <span class="hljs-comment">// 最终，left为满足条件的左边界的下一个</span><br>           <span class="hljs-keyword">if</span> (right - left + <span class="hljs-number">2</span> &lt; minLength) &#123;<br>               minBegin = left - <span class="hljs-number">1</span>;<br>               minLength = right - left + <span class="hljs-number">2</span>;<br>           &#125;<br>           right++;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (minLength == Integer.MAX_VALUE) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> s.substring(minBegin, minBegin + minLength);<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>复杂度分析<ul><li>时间复杂度O(N+M)</li><li>空间复杂度O(N+M)</li></ul></li></ul><h2 id="下个路口见"><a href="#下个路口见" class="headerlink" title="下个路口见"></a>下个路口见</h2><p>HOT100依然在继续，写在下一篇文章中。<a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot-100-shua-ti-31-40.html">传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Hot 100 刷题 [11-20]</title>
    <link href="/2022/07/23/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-11-20/"/>
    <url>/2022/07/23/LeetCode-Hot-100-%E5%88%B7%E9%A2%98-11-20/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Hot-100-11-20"><a href="#LeetCode-Hot-100-11-20" class="headerlink" title="LeetCode Hot 100 [11-20]"></a>LeetCode Hot 100 [11-20]</h1><blockquote><p>刷完了《剑指Offer》，下一阶段，开始 LeetCode Hot 100。 之前一直都用思维导图记录，今天发现思维导图可以导出成markdown，简单编辑一下就可以成为文章。相比Xmind，博客文章打开和查看更加方便，所以之后每次Xmind记录之后，会再在这里同时同步一下</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HOT100，之前的文章传送门<br><a href="http://blog.zwboy.cn/suan-fa/leetcode/leetcode-hot100-shua-ti-1-10.html">LeetCode Hot 100 刷题 [1-10]</a></p><h2 id="11-合并两个有序链表"><a href="#11-合并两个有序链表" class="headerlink" title="11. 合并两个有序链表"></a>11. 合并两个有序链表</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<ul><li>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</li><li>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</li></ul></li></ul></blockquote><ul><li><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/">题目地址</a></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>和两个有序数组的合并是类似的</li><li>链表有迭代和递归两种实现方式</li></ul><h4 id="迭代实现"><a href="#迭代实现" class="headerlink" title="迭代实现"></a>迭代实现</h4><ul><li><p>思路过程</p><ol><li>两个链表均非空，选择较小头节点进行归并</li><li>当有一个为空了，将非空的直接尾插到结果链表种</li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> tempHead;<br>        <span class="hljs-keyword">while</span>(l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">if</span>(l1.val &lt; l2.val)&#123;<br>                curr.next = l1;<br>                l1 = l1.next;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                curr.next = l2;<br>                l2 = l2.next;<br>            &#125;<br>            curr =  curr.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(l1 == <span class="hljs-literal">null</span>)&#123;<br>            curr.next = l2;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            curr.next = l1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tempHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度O(M+N)</li></ul></li></ul><h4 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h4><ul><li><p>思路与过程</p><ul><li>将两个链表合并的过程看作，<ol><li>先选出一个较小头节点</li><li>再对剩余节点进行合并，结果赋值给较小节点的next</li></ol></li><li>当l1头节点较小时，l1.next &#x3D; recur(l1.next, l2)</li><li>当l2头节点较小时，l2.next &#x3D; recur(l1，l2.next)</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode() &#123;&#125;</span><br><span class="hljs-comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-keyword">if</span>(l1 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> l2;<br>        <span class="hljs-keyword">if</span>(l2 == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> l1;<br>        <span class="hljs-keyword">if</span>(l1.val &lt; l2.val)&#123;<br>            l1.next = mergeTwoLists(l1.next,l2);<br>            <span class="hljs-keyword">return</span>  l1;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            l2.next = mergeTwoLists(l1,l2.next);<br>            <span class="hljs-keyword">return</span> l2;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度O(M+N)</li><li>空间复杂度O(M+N)</li></ul></li></ul><h2 id="12-括号生成"><a href="#12-括号生成" class="headerlink" title="12.括号生成"></a>12.括号生成</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</li></ul></blockquote><ul><li>输入：n &#x3D; 3</li><li>输出： <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>       <span class="hljs-string">&quot;((()))&quot;</span>,<br>       <span class="hljs-string">&quot;(()())&quot;</span>,<br>       <span class="hljs-string">&quot;(())()&quot;</span>,<br>       <span class="hljs-string">&quot;()(())&quot;</span>,<br>       <span class="hljs-string">&quot;()()()&quot;</span><br>     ]<br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/generate-parentheses/">题目地址</a></li></ul><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一-排列组合问题"><a href="#思路一-排列组合问题" class="headerlink" title="思路一:排列组合问题"></a>思路一:排列组合问题</h4><ul><li>属于括号的排列组合, 但不是所有的排列都满足要求</li><li>通过DFS实现排列组合的遍历过程</li><li>回溯:试过左括号之后,再尝试右括号,需要回溯之前的变更</li><li>剪枝:当肯定不满足时,剪枝<ul><li>当右括号数目大于左括号数目,则必不行</li></ul></li><li>判定括号是否匹配<ul><li>balance</li><li>左括号+1</li><li>右括号-1</li><li>遍历字符串过程中,balance必须大于等于0, 出现小于0,则不匹配</li><li>且最终balance&#x3D;0, 才能保障括号匹配</li></ul></li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">// 一共2n个字符</span><br>        <span class="hljs-type">char</span>[] values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">2</span>*n];<br>        dfs(values,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>*n,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">char</span> [] values,<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> end,<span class="hljs-type">int</span> balance)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index == end)&#123;<br>            <span class="hljs-keyword">if</span>(balance==<span class="hljs-number">0</span>)&#123;<br>                list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(values));<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            values[index] = <span class="hljs-string">&#x27;(&#x27;</span>;<br>            dfs(values,index+<span class="hljs-number">1</span>,end,balance+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(balance-<span class="hljs-number">1</span> &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>            values[index] = <span class="hljs-string">&#x27;)&#x27;</span>;<br>            dfs(values,index+<span class="hljs-number">1</span>,end,balance-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复杂度<ul><li>时间复杂度O(2^N)</li><li>空间复杂度O(2^N)</li></ul></li></ul><h3 id="思路二-动态规划问题"><a href="#思路二-动态规划问题" class="headerlink" title="思路二:动态规划问题"></a>思路二:动态规划问题</h3><h2 id="13-合并k个有序链表"><a href="#13-合并k个有序链表" class="headerlink" title="13.合并k个有序链表"></a>13.合并k个有序链表</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</li></ul></blockquote><ul><li>输入:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>,<br>  <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>,<br>  <span class="hljs-number">2</span>-&gt;<span class="hljs-number">6</span><br>]<br></code></pre></td></tr></table></figure></li><li>输出: <code>1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</code></li><li><a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/">题目地址</a></li></ul><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1-归并合并"><a href="#思路1-归并合并" class="headerlink" title="思路1:归并合并"></a>思路1:归并合并</h4><ul><li><p>k个有序链表,两两组合,进行合并</p></li><li><p>在对合并后的两个链表,再此进行两两合并,得到最终的结果</p></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> lists.length;<br>        <br>        <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * i;<br>                <span class="hljs-keyword">if</span>(pos+<span class="hljs-number">1</span> &lt; len)&#123;<br>                    lists[index] = mergeTwoLists(lists[pos],lists[pos+<span class="hljs-number">1</span>]);<br>                    index++;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pos &lt; len)&#123;<br>                    lists[index] = lists[pos];<br>                    index++;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            len = index;<br>            index=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> lists.length==<span class="hljs-number">0</span>?<span class="hljs-literal">null</span> : lists[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// 21题中的两两合并</span><br>    <span class="hljs-keyword">private</span> ListNode <span class="hljs-title function_">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> tempHead;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-literal">null</span> &amp;&amp; l2 != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>                curr.next = l1;<br>                l1 = l1.next;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                curr.next = l2;<br>                l2 = l2.next;<br>            &#125;<br>            curr = curr.next;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (l1 == <span class="hljs-literal">null</span>) &#123;<br>            curr.next = l2;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            curr.next = l1;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tempHead.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度O(kNlogK)</li></ul></li></ul><h4 id="思路2-优先级队列"><a href="#思路2-优先级队列" class="headerlink" title="思路2: 优先级队列"></a>思路2: 优先级队列</h4><ul><li><p>和合并两个有序链表相比,不同的地方</p><ul><li>两个链表中选择最小的头节点</li><li>k个链表中选择最小的头节点</li></ul></li><li><p>k个中选最小,可以通过最小堆来实现PriorityQueue</p><ul><li>需要提供Comparator</li><li>int compare(o1, o2)</li><li>o1 - o2 &lt; 0 则o1优先级更高</li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">mergeKLists</span><span class="hljs-params">(ListNode[] lists)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> result;<br>        PriorityQueue&lt;ListNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;ListNode&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;ListNode&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(ListNode o1, ListNode o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o1.val - o2.val;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; lists.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(lists[i] != <span class="hljs-literal">null</span>)&#123;<br>                queue.add(lists[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty())&#123;<br>            <span class="hljs-type">ListNode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> queue.poll();<br>            <span class="hljs-keyword">if</span>(node.next != <span class="hljs-literal">null</span>)&#123;<br>                queue.add(node.next);<br>            &#125;<br>            node.next=<span class="hljs-literal">null</span>;<br>            curr.next=node;<br>            curr = curr.next;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度 O(kNlogk)</li><li>空间复杂度O(k)</li></ul></li></ul><h2 id="14-下一个排列"><a href="#14-下一个排列" class="headerlink" title="14.下一个排列"></a>14.下一个排列</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</li></ul></blockquote><ul><li>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</li><li>必须原地修改，只允许使用额外常数空间。</li><li>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> → <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span><br><span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span> → <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><br><span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span> → <span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/next-permutation">题目地址</a></li></ul><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>这道题需要观察总结排列数生成中的过程和规律，然后编码实现该过程</p></li><li><p>基础原理就是将第一个大于其前一个的数换到前边，得到稍大于当前排列的值</p></li><li><p>思路与过程</p><ol><li>从右向左遍历排列，找到第一个山峰（即由递增转递减）<ul><li>如果该元素为最左边元素，则直接对整个数组进行排序即可</li><li>如果该元素为最右边元素，则将该元素与倒数第二个元素交换即可</li><li>其他，则走一下步骤</li></ul></li><li>查找到山峰索引为pos，接下来需要从[pos，end]区间中选择一个合适的元素，与 pos-1 位置的交换，（即，选出新的较大的前者）<ul><li>该元素首先必须要比 pos-1 位置的要大，满足字典增序的要求</li><li>该元素为[ pos, end ] 区间中满足上输条件的最小值，即最接近 pos-1 的值</li></ul></li><li>将新元素和 pos-1 交换之后，对 [ pos-1 , end] 再进行依次排序</li><li>即可得到结果</li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextPermutation</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-keyword">if</span>(nums.length &lt;= <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">// 从右向左，第一个增序变减序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(pos &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">if</span>(nums[pos] &gt; nums[pos-<span class="hljs-number">1</span>])&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            pos--;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pos == <span class="hljs-number">0</span>) &#123;<br>            Arrays.sort(nums);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(pos == nums.length-<span class="hljs-number">1</span>) &#123;<br>            swap(nums,pos,pos-<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">// 从pos之后选择大于其前边数字的最小数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">selectIndex</span> <span class="hljs-operator">=</span> pos;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pos+<span class="hljs-number">1</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; nums[pos-<span class="hljs-number">1</span>] &amp;&amp; nums[i] &lt; nums[selectIndex])&#123;<br>                selectIndex = i;<br>            &#125;<br>        &#125;<br>        swap(nums,selectIndex,pos-<span class="hljs-number">1</span>);<br>        Arrays.sort(nums,pos,nums.length);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> aIndex, <span class="hljs-type">int</span> bIndex)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> nums[aIndex];<br>        nums[aIndex] = nums[bIndex];<br>        nums[bIndex] = temp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度：O(NlogN)</li></ul></li></ul><h2 id="15-最长有有效括号"><a href="#15-最长有有效括号" class="headerlink" title="15. 最长有有效括号"></a>15. 最长有有效括号</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个只包含 ‘(‘ 和 ‘)’ 的字符串，找出最长的包含有效括号的子串的长度。</li></ul></blockquote><ul><li>输入: “(()”</li><li>输出: 2</li><li>解释: 最长有效括号子串为 “()”</li><li><a href="https://leetcode-cn.com/problems/longest-valid-parentheses">题目地址</a></li></ul><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路0-如何判断括号串是否有效"><a href="#思路0-如何判断括号串是否有效" class="headerlink" title="思路0. 如何判断括号串是否有效"></a>思路0. 如何判断括号串是否有效</h4><ul><li>balance变量<ul><li>左括号，balance++</li><li>右括号，balance–</li></ul></li><li>遍历过程中，如果balance出现 &lt; 0，则必不是有效的</li><li>遍历结束，只有当balance&#x3D;0，才说明是有效的</li></ul><h4 id="思路1-左右指针遍历"><a href="#思路1-左右指针遍历" class="headerlink" title="思路1. 左右指针遍历"></a>思路1. 左右指针遍历</h4><ul><li><p>思路与过程</p><ol><li>先从左向右遍历，统计balance<ul><li>left、right初始均为0</li><li>如果balance &#x3D;&#x3D; 0，则计算一次length，更新maxLength</li><li>如果balance &lt; 0，则 left和right直接跳到下一个字符重新统计</li></ul></li><li>再从右向左遍历，统计balance<ul><li>因为遍历时候，只有当balance&#x3D;&#x3D;0的时候，才会统计length</li><li>如果遍历结束，最终balance一直维持在 &gt; 0，则不会被统计lenth</li><li>但，balance &gt; 0 不代表没有有效括号，只是很多的左括号没有右括号来匹配它就结束了</li><li>所以需要再从右向左遍历一次，判断过程和从左向右恰好相反</li></ul></li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestValidParentheses</span><span class="hljs-params">(String s)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right =<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(right &lt; s.length())&#123;<br>           <span class="hljs-keyword">if</span>(s.charAt(right) == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>               balance++;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               balance--;<br>               <span class="hljs-keyword">if</span>(balance== <span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> right - left + <span class="hljs-number">1</span>;<br>                   maxLength = Math.max(maxLength,length);<br>               &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(balance &lt; <span class="hljs-number">0</span>)&#123;<br>                   left = right+<span class="hljs-number">1</span>;<br>                   balance=<span class="hljs-number">0</span>;<br>               &#125;<br>           &#125;<br>           right++;<br>       &#125;<br>       <span class="hljs-comment">// 逆序再来一次</span><br>       left = s.length() -<span class="hljs-number">1</span>;<br>       right = left;<br>       balance = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span>(left &gt;= <span class="hljs-number">0</span> )&#123;<br>           <span class="hljs-keyword">if</span>(s.charAt(left) == <span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>               balance++;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               balance--;<br>               <span class="hljs-keyword">if</span>(balance== <span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> right - left + <span class="hljs-number">1</span>;<br>                   maxLength = Math.max(maxLength,length);<br>               &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(balance &lt; <span class="hljs-number">0</span>)&#123;<br>                   right = left - <span class="hljs-number">1</span>;<br>                   balance=<span class="hljs-number">0</span>;<br>               &#125;<br>           &#125;<br>           left--;<br>       &#125;<br>       <span class="hljs-keyword">return</span> maxLength;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="思路2-动态规划"><a href="#思路2-动态规划" class="headerlink" title="思路2. 动态规划"></a>思路2. 动态规划</h4><ul><li><p>dp[ i ] 表示以 i 为结尾的最长有效括号的长度</p></li><li><p>递推方程：dp[ i ] &#x3D;</p><ul><li>0 <ul><li>当s[ i ] &#x3D;&#x3D; ‘ ( ‘，以左括号结尾，长度肯定为0</li></ul></li><li>dp[ i-2 ] + 2<ul><li>以 ‘ ) ‘ 结尾，且，前一个括号为 ‘ ( ‘</li><li>在原有长度上，续上2</li><li>其实这种场景下，dp[ i-1 ] 必定为0</li></ul></li><li>dp[ i-1 ] + 2 + dp[ i - dp[i-1] + 1 ]<ul><li>以 ）结尾，且前一个括号为）</li><li>跳过dp[ i-1 ]对应子串的长度，查看该子串的前一个字符是否是 （，如果是，则可以和目前的）匹配</li><li>匹配，则+2</li><li>同时，匹配后，可能将（前边的子串能连续起来，所以，再加上 （ 前边位置的子串长度，即+dp[ i - dp[i-1] + 1 ]</li></ul></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestValidParentheses</span><span class="hljs-params">(String s)</span> &#123;<br>       <span class="hljs-type">int</span> [] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];<br>       <span class="hljs-comment">//dp[i] 表示以下标 ii 字符结尾的最长有效括号的长度</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i&lt; s.length(); i++)&#123;<br>           <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; s.charAt(i-<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;)&#x27;</span>)&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> dp[i-<span class="hljs-number">1</span>];<br>               <span class="hljs-type">int</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> i - len - <span class="hljs-number">1</span>; <span class="hljs-comment">// 前一个待匹配的左括号</span><br>               <span class="hljs-keyword">if</span>( pre &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>               <span class="hljs-keyword">if</span>(s.charAt( pre ) == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                   <span class="hljs-type">int</span> <span class="hljs-variable">preDP</span> <span class="hljs-operator">=</span> pre == <span class="hljs-number">0</span>? <span class="hljs-number">0</span>: dp[pre-<span class="hljs-number">1</span>];<br>                   dp[i] = dp[i-<span class="hljs-number">1</span>] + <span class="hljs-number">2</span> + preDP;<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;)&#x27;</span> &amp;&amp; s.charAt(i-<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>               dp[i] = i==<span class="hljs-number">1</span> ? <span class="hljs-number">2</span>: dp[i-<span class="hljs-number">2</span>] + <span class="hljs-number">2</span>;<br>           &#125;<br>           maxLength = Math.max(maxLength, dp[i]);<br>       &#125;<br>       <span class="hljs-keyword">return</span> maxLength;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul></li></ul><h4 id="思路3-栈实现"><a href="#思路3-栈实现" class="headerlink" title="思路3. 栈实现"></a>思路3. 栈实现</h4><ul><li><p>栈中存储的元素为读取到的括号所对应的索引下标</p></li><li><p>思路与过程</p><ul><li>用栈来记录左右符号的匹配过程</li><li>过程<ol><li>如果读取到左括号，则将该左括号的索引入栈</li><li>如果读取到右括号，则弹出栈顶元素与其进行匹配<ul><li>同时计算已经匹配的子串的长度</li><li>length &#x3D; 右括号索引 - 前一个左括号索引<ul><li>前一个左括号索引，即栈中左括号的下一个元素</li></ul></li><li>在生成length过程中，记录最大值即可</li></ul></li><li>当读取到右括号，且栈为空，将右括号索引入栈</li></ol></li></ul></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestValidParentheses</span><span class="hljs-params">(String s)</span> &#123;<br>       <span class="hljs-comment">// 用栈来实现</span><br>       Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>();<br>       stack.push(-<span class="hljs-number">1</span>);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;s.length(); i++ )&#123;<br>           <span class="hljs-keyword">if</span>(s.charAt(i) == <span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>               stack.push(i);<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-keyword">if</span>(!stack.isEmpty())&#123;<br>                   stack.pop();<br>                   <span class="hljs-keyword">if</span>(!stack.isEmpty())&#123;<br>                       <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> stack.peek();<br>                       <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> i - pos;<br>                       maxLength = Math.max(maxLength, length);<br>                   &#125;<span class="hljs-keyword">else</span>&#123;<br>                       stack.push(i);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> maxLength;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul></li></ul><h2 id="16-搜索旋转排序数组"><a href="#16-搜索旋转排序数组" class="headerlink" title="16. 搜索旋转排序数组"></a>16. 搜索旋转排序数组</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</li></ul></blockquote><ul><li>( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。</li><li>搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。</li><li>你可以假设数组中不存在重复的元素。</li><li>你的算法时间复杂度必须是 O(log n) 级别。</li><li>输入: nums &#x3D; [4,5,6,7,0,1,2], target &#x3D; 0</li><li>输出: 4</li><li><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array">题目地址</a></li></ul><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>排序数组、O(logN)：显而易见，基于二分查找解题</li><li>查找元素，所以基于模板一</li><li>旋转数组，需要额外考虑旋转点的位置</li></ul><h4 id="1-思路与过程"><a href="#1-思路与过程" class="headerlink" title="1.思路与过程"></a>1.思路与过程</h4><ol><li>如果 mid 位置等于 target，直接返回 mid</li><li>如果 mid 位置大于 target<ul><li>正常情况下，接下来应该选择左侧区间</li><li>考虑选择右边区间的情况<ul><li>target元素被包含在较小段，并被旋转到了数组右边了</li><li>两种情况<ul><li>旋转点在mid右侧<ul><li>只有这种情况下，才是向右搜索</li><li>判断条件<ol><li>nums[ left ] &lt;&#x3D; nums[ mid ]<ul><li>左边是单调递增的</li><li>说明旋转点在右区间</li><li>需要包括等于的情况，否则会死循环<ul><li>没有左区间的时候，向右搜索，避免进入死循环</li><li>因为mid向下取整，当区间长度为2的时候，left &#x3D;&#x3D; mid</li></ul></li></ul></li><li>nums[left] &gt; target<ul><li>左边最小比target大<ul><li>说明更小的被旋转到右边了</li></ul></li></ul></li></ol></li></ul></li><li>旋转点在mid左侧<ul><li>还是向左搜索，所以只要排除上一种情况即可</li></ul></li></ul></li></ul></li></ul></li><li>如果 mid 位置小于 target<ul><li>正常情况下，接下来应该选择右侧区间</li><li>考虑选择左侧区间的情况，即，旋转点位于mid左侧，target在左侧的大值区间中</li><li>判断条件<ul><li>nums[ right ] &gt; nums [ mid ]<ul><li>右侧区间是单调的，说明旋转点在mid或者mid左侧</li></ul></li><li>nums[ right ] &lt; target<ul><li>右侧的最大值比target小，所以右侧肯定搜索不到</li></ul></li></ul></li><li>搜索左侧<ul><li>right &#x3D; mid - 1</li></ul></li></ul></li></ol><ul><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>       <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right-left )/<span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span>(nums[mid] == target)&#123; <br>               <span class="hljs-keyword">return</span> mid;<br>           &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>               <span class="hljs-keyword">if</span>(nums[mid] &lt; nums[left] &amp;&amp; nums[right] &lt; target)&#123;<br>                   right = mid -<span class="hljs-number">1</span>;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   left = mid+<span class="hljs-number">1</span>;<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-keyword">if</span>(nums[mid] &gt;= nums[left] &amp;&amp; nums[left] &gt; target)&#123;<br>                   left = mid+<span class="hljs-number">1</span>;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   right = mid -<span class="hljs-number">1</span>;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li>时间复杂度O(logN)</li></ul><h2 id="17-在排序数组中查找元素的第一个和最后一个"><a href="#17-在排序数组中查找元素的第一个和最后一个" class="headerlink" title="17.在排序数组中查找元素的第一个和最后一个"></a>17.在排序数组中查找元素的第一个和最后一个</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</li></ul></blockquote><ul><li>你的算法时间复杂度必须是 O(log n) 级别。</li><li>如果数组中不存在目标值，返回 [-1, -1]。</li><li><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array">题目地址</a></li></ul><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>最最典型的二分查找模板二的用法</li><li>找第一个: 即查找大于等于target元素的下标<ul><li>即排除小于target的</li></ul></li><li>找最后一个:即查找小于等于target元的的下标<ul><li>即排除大于target的</li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 找第一个大于等于</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findLowBound</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right-left) / <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span>(nums[mid] &lt; target)&#123;<br>               left = mid + <span class="hljs-number">1</span>;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               right = mid;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> nums[left] != target? -<span class="hljs-number">1</span>:left;<br>   &#125;<br>   <span class="hljs-comment">// 第一个小于等于</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findUpBound</span><span class="hljs-params">(<span class="hljs-type">int</span> [] nums,<span class="hljs-type">int</span> target)</span>&#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums.length-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">while</span> (left&lt;right)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> left + (right-left+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>           <span class="hljs-keyword">if</span>(nums[mid] &gt; target)&#123;<br>               right = mid - <span class="hljs-number">1</span>;<br>           &#125;<span class="hljs-keyword">else</span> &#123;<br>               left = mid;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> nums[left] != target? -<span class="hljs-number">1</span>:left;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="18-组合总和"><a href="#18-组合总和" class="headerlink" title="18.组合总和"></a>18.组合总和</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。</li></ul></blockquote><ul><li>所有数字（包括 target）都是正整数。</li><li>candidates 中的数字可以无限制重复被选取。</li><li>解集不能包含重复的组合。 </li><li>输入：candidates &#x3D; [2,3,6,7], target &#x3D; 7,</li><li>所求解集为：</li><li><pre><code class="java"></code></pre></li></ul><p>[<br>  [7],<br>  [2,2,3]<br>]</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs fortran">- [题目地址](https://leetcode-cn.com/problems/combination-<span class="hljs-built_in">sum</span>)<br><br>### 解题思路<br>- 是一个排列组合问题，基于DFS + 回溯为框架<br>- 同时，可以在DFS过程中，进行剪枝<br>    - 当和大于<span class="hljs-keyword">target</span>的时候，剪枝<br>- 思路与过程<br><span class="hljs-number">1.</span> dfs参数设计<br>    - <span class="hljs-built_in">sum</span>，记录当前累加和<br>- path，记录当前路径<br>- <span class="hljs-built_in">index</span>，记录当前已经尝试到了candidates中的哪个数了<br>    - 在之后的dfs中，不会再选择<span class="hljs-built_in">index</span>之前的元素了，这样避免了重复情况<br><span class="hljs-number">2.</span> dfs中，当<span class="hljs-built_in">sum</span> == <span class="hljs-keyword">target</span>，则说明是一个结果<br>    - 基于path中的内容新创建一个list<br>- 不能直接添加path到结果列表中，因为path之后还会回溯，添加做到深拷贝<br><span class="hljs-number">3.</span> dfs中，让<span class="hljs-built_in">sum</span> &gt; <span class="hljs-keyword">target</span>，则剪枝<br><span class="hljs-number">4.</span> 否则，遍历candidats数组，依次尝试每个数<br>    - <span class="hljs-built_in">sum</span> += canditates[i]<br>- path.add(canditates[i])<br>- dfs(<span class="hljs-built_in">index</span>+<span class="hljs-number">1</span>，path，<span class="hljs-built_in">sum</span>)<br>- 回溯，撤销更改，继续尝试下一个<br>- <span class="hljs-built_in">sum</span> -= canditates[i]<br>- path.removeLast()<br>- 代码实现<br><br>```java<br><span class="hljs-keyword">private</span> void dfs(<span class="hljs-built_in">int</span> [] candidates ,LinkedList&lt;<span class="hljs-keyword">Integer</span>&gt; ans,<span class="hljs-built_in">int</span> <span class="hljs-built_in">index</span>,<span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>, <span class="hljs-built_in">int</span> <span class="hljs-keyword">target</span>)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span> == <span class="hljs-keyword">target</span>)&#123;<br>            result.add(new LinkedList(ans));<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span> &gt; <span class="hljs-keyword">target</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        for(<span class="hljs-built_in">int</span> i = <span class="hljs-built_in">index</span>; i &lt; candidates.length; i++)&#123;<br>            <span class="hljs-built_in">sum</span> += candidates[i];<br>            ans.addLast(candidates[i]);<br>            dfs(candidates,ans,i,<span class="hljs-built_in">sum</span>,<span class="hljs-keyword">target</span>);<br>            ans.removeLast();<br>            <span class="hljs-built_in">sum</span> -= candidates[i];<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>复杂度分析<ul><li>时间复杂度,O(N^k)</li><li>空间复杂度,O（1）</li></ul></li></ul><h2 id="19-全排列"><a href="#19-全排列" class="headerlink" title="19.全排列"></a>19.全排列</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个 没有重复 数字的序列，返回其所有可能的全排列。</li></ul></blockquote><ul><li>输入: [1,2,3]</li><li>输出:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>],<br>  [<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],<br>  [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>],<br>  [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>  [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>]<br></code></pre></td></tr></table></figure></li><li><a href="https://leetcode-cn.com/problems/permutations">题目地址</a></li></ul><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>这是典型的全排列问题</li></ul><h4 id="思路一：DFS-回溯-解决重复问题"><a href="#思路一：DFS-回溯-解决重复问题" class="headerlink" title="思路一：DFS + 回溯+解决重复问题"></a>思路一：DFS + 回溯+解决重复问题</h4><ul><li><p>思路过程</p><ol><li>path存储一次排列结果，path长度 &#x3D;&#x3D; length时候，添加到结果列表中</li><li>每次排列从数组中选择一个数，并添加到path中</li><li>避免重复：添加之前，需要检查path中是否已经有该元素了</li><li>回溯刚才选择的元素，尝试添加下一个</li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> [] nums, List&lt;Integer&gt; path )</span>&#123;<br>       <span class="hljs-keyword">if</span>(path.size() == nums.length)&#123;<br>           result.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(path));<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num:nums) &#123;<br>           <span class="hljs-keyword">if</span>(!path.contains(num))&#123;<br>               path.add(num);<br>               dfs(nums,path);<br>               path.remove(path.size()-<span class="hljs-number">1</span>);<br>           &#125;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度分析</p><ul><li>时间复杂度O(N! * N)</li><li>空间复杂度O(N!)</li></ul></li></ul><h4 id="思路二：基于标记的回溯"><a href="#思路二：基于标记的回溯" class="headerlink" title="思路二：基于标记的回溯"></a>思路二：基于标记的回溯</h4><ul><li>通过一个标记数组来决定当前数是否被选择过，以此来解决重复问题</li><li>每次遍历选择一个没有被标记的元素</li><li>和思路一基本类似，只是通过一个标记数组来判断该元素是否使用过了</li></ul><h4 id="思路三：基于交换的回溯"><a href="#思路三：基于交换的回溯" class="headerlink" title="思路三：基于交换的回溯"></a>思路三：基于交换的回溯</h4><ul><li>空间复杂度最低，直接基于已有的数组</li><li>不过最终的排序结果不是按字典序排列的，如果需要，请使用思路一或者二</li><li>index表示当前在尝试第几个位置的元素</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> [] nums,<span class="hljs-type">int</span> index )</span>&#123;<br>       <span class="hljs-keyword">if</span>(index == nums.length)&#123;<br>           result.add(IntStream.of(nums).boxed().collect(Collectors.toList()));<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=index; i&lt; nums.length; i++)&#123;<br>           swap(nums,index,i);<br>           dfs(nums,index+<span class="hljs-number">1</span>);<br>           swap(nums,index,i);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="20-最大子序和"><a href="#20-最大子序和" class="headerlink" title="20.最大子序和"></a>20.最大子序和</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</li></ul></blockquote><ul><li>输入: [-2,1,-3,4,-1,2,1,-5,4]</li><li>输出: 6</li><li>解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。</li><li><a href="https://leetcode-cn.com/problems/maximum-subarray">题目地址</a></li></ul><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一：动态规划"><a href="#思路一：动态规划" class="headerlink" title="思路一：动态规划"></a>思路一：动态规划</h4><ul><li>dp[ i ] 表示以 i 位置为结尾的数列的最大子序和</li><li>dp[ i ] &#x3D; <ul><li>num[ i ] ，当dp[ i-1 ] &lt;&#x3D; 0</li><li>dp[ i-1 ] + nums[ i ] ，当dp[ i-1 ] &gt; 0</li></ul></li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> [] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [nums.length];<br>    dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSum</span> <span class="hljs-operator">=</span> dp[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i&lt;nums.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(dp[i-<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0</span>)&#123;<br>            dp[i] = dp[i-<span class="hljs-number">1</span>] + nums[i];<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            dp[i] = nums[i];<br>        &#125;<br>        maxSum = Math.max(maxSum, dp[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxSum;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="思路二：分治算法，线段树"><a href="#思路二：分治算法，线段树" class="headerlink" title="思路二：分治算法，线段树"></a>思路二：分治算法，线段树</h4><ul><li>待定</li></ul><h2 id="下个路口见"><a href="#下个路口见" class="headerlink" title="下个路口见"></a>下个路口见</h2><p>HOT100依然在继续，写在下一篇文章中。<a href="http://blog.zwboy.cn/ji-zhu/leetcode-hot-100-shua-ti-21-30.html">传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode Hot 100 刷题 [1-10]</title>
    <link href="/2022/07/19/LeetCode-Hot100-%E5%88%B7%E9%A2%98%5B1-10%5D/"/>
    <url>/2022/07/19/LeetCode-Hot100-%E5%88%B7%E9%A2%98%5B1-10%5D/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode-Hot-100-1-10"><a href="#LeetCode-Hot-100-1-10" class="headerlink" title="LeetCode Hot 100 [1-10]"></a>LeetCode Hot 100 [1-10]</h1><blockquote><p>刷完了《剑指Offer》，下一阶段，开始 LeetCode Hot 100。 之前一直都用思维导图记录，今天发现思维导图可以导出成markdown，简单编辑一下就可以成为文章。相比Xmind，博客文章打开和查看更加方便，所以之后每次Xmind记录之后，会再在这里同时同步一下</p></blockquote><h2 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</li></ul></blockquote><ul><li>示例：给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9，因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9，所以返回 [0, 1]</li><li><a href="https://leetcode-cn.com/problems/two-sum/">LeetCode地址</a></li></ul><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路0：排序-双指针（不可行）"><a href="#思路0：排序-双指针（不可行）" class="headerlink" title="思路0：排序+双指针（不可行）"></a>思路0：排序+双指针（不可行）</h4><ul><li>联想到之前一个题的思路，最开始想到的便是这个思路</li><li>但需要返回数组下标，所以不能用排序，且复杂度比O(N)高</li></ul><h4 id="思路1：暴力解法"><a href="#思路1：暴力解法" class="headerlink" title="思路1：暴力解法"></a>思路1：暴力解法</h4><ul><li>两个for循环，两个数依次都搭配组合一下，直到有和target相等的</li><li>在没有很好的思路之前，不妨先试试暴力解法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>          <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;<br>              <span class="hljs-keyword">if</span>(nums[i] + nums[j] == target)&#123;<br>                  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i,j&#125;;<br>              &#125;<br>          &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度O(N^2)，空间复杂度O(1)</li></ul><h4 id="思路2：HashMap快速查找"><a href="#思路2：HashMap快速查找" class="headerlink" title="思路2：HashMap快速查找"></a>思路2：HashMap快速查找</h4><ul><li>暴力解法优化：主要是在元素的查找上耗费，荣国HashMap O(1)的查找能力进行优化</li><li>思路与过程<ol><li>遍历数组，将元素依次以值为key，索引作为value加入到HashMap中</li><li>在将元素加入到HashMap前，计算target-当前元素 &#x3D; left</li><li>检查hashMap中是否有为left的key，如果有，则返回两个数的下标即可</li></ol></li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] twoSum(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) &#123;<br>        HashMap&lt;Integer,Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">diff</span> <span class="hljs-operator">=</span> target - nums[i];<br>            <span class="hljs-keyword">if</span>(hashMap.containsKey(diff))&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;hashMap.get(target-nums[i]),i&#125;;<br>            &#125;<br>            hashMap.put(nums[i],i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>时间复杂度O(N)，空间复杂度O(N)</li></ul><h2 id="2-链表两数加法"><a href="#2-链表两数加法" class="headerlink" title="2.链表两数加法"></a>2.链表两数加法</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</li></ul></blockquote><ul><li>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头</li><li>示例<ul><li>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</li><li>输出：7 -&gt; 0 -&gt; 8</li><li>原因：342 + 465 &#x3D; 807</li></ul></li><li><a href="https://leetcode-cn.com/problems/add-two-numbers/">LeetCode地址</a></li></ul><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>两个链表逆序的，低位在前，对齐，所以比较容易</p></li><li><p>核心就是模拟加法过程，如何写出优雅的代码</p></li></ul><h3 id="思路与过程"><a href="#思路与过程" class="headerlink" title="思路与过程"></a>思路与过程</h3><ol><li>遍历两个链表，依次取值参与加法计算，flag记录加法进位</li><li>结果中对应位 &#x3D; ( a + b + flag )% 10</li><li>进位flag &#x3D;  ( a+b+flag ) &#x2F; 10</li><li>如果有链表遍历空，则对应值赋值0，参与计算</li></ol><ul><li>直到两个链表均遍历完</li></ul><ol start="5"><li>链表遍历完之后，还需要检查是否还有进位，如果flag为1，则再进行依次计算</li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul><li>迭代实现</li></ul><figure class="highlight axapta"><figcaption><span>java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123;<br>    ListNode resultHead = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>    ListNode resCur = resultHead;<br>    ListNode acurr = l1, bcurr = l2;<br>    <span class="hljs-built_in">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, flag = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (acurr != <span class="hljs-literal">null</span> || bcurr != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (acurr != <span class="hljs-literal">null</span>) &#123;<br>            a = acurr.val;<br>            acurr = acurr.<span class="hljs-keyword">next</span>;<br>        &#125;<span class="hljs-keyword">else</span> a=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (bcurr != <span class="hljs-literal">null</span>) &#123;<br>            b = bcurr.val;<br>            bcurr = bcurr.<span class="hljs-keyword">next</span>;<br>        &#125;<span class="hljs-keyword">else</span> b=<span class="hljs-number">0</span>;<br>        resCur.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">new</span> ListNode((a + b + flag) % <span class="hljs-number">10</span>);<br>        flag = (a + b + flag) / <span class="hljs-number">10</span>;<br>        resCur = resCur.<span class="hljs-keyword">next</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">1</span>)&#123;<br>        resCur.<span class="hljs-keyword">next</span> = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultHead.<span class="hljs-keyword">next</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>递归实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(ListNode l1, ListNode l2, ListNode resCurr,<span class="hljs-type">int</span> flag)</span>&#123;<br>       <span class="hljs-keyword">if</span>(l1 == <span class="hljs-literal">null</span> &amp;&amp; l2==<span class="hljs-literal">null</span> &amp;&amp; flag==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">if</span> (l1 != <span class="hljs-literal">null</span>) &#123;<br>           a = l1.val;<br>           l1 = l1.next;<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           a=<span class="hljs-number">0</span>;<br>           l1 = <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (l2 != <span class="hljs-literal">null</span>) &#123;<br>           b = l2.val;<br>           l2 = l2.next;<br>       &#125;<span class="hljs-keyword">else</span> &#123;<br>           b=<span class="hljs-number">0</span>;<br>           l2 = <span class="hljs-literal">null</span>;<br>       &#125;<br>       resCurr.next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>((a + b + flag) % <span class="hljs-number">10</span>);<br>       flag = (a + b+flag) / <span class="hljs-number">10</span>;<br>       recur(l1,l2,resCurr.next,flag);<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><ul><li>时间复杂度O(N)</li><li>空间复杂度O(1)</li></ul><h3 id="问题拓展"><a href="#问题拓展" class="headerlink" title="问题拓展"></a>问题拓展</h3><ul><li><p>如果链表是非逆序的，即高位在前？？？</p><ul><li><p>递归不好做到逆序的感觉，还是要从低位对齐才开始加法</p></li><li><p>可以使用队列或者栈，实现逆序的效果</p></li></ul></li></ul><h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</li></ul></blockquote><ul><li>输入: “abcabcbb”</li><li>输出: 3 <ul><li>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</li></ul></li><li><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">题目地址</a></li></ul><h3 id="解题思路-2"><a href="#解题思路-2" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>这个在剑指offer中有原题</li></ul><h4 id="思路一：双指针-Set集合判断重复-遍历查找区间"><a href="#思路一：双指针-Set集合判断重复-遍历查找区间" class="headerlink" title="思路一：双指针+Set集合判断重复+遍历查找区间"></a>思路一：双指针+Set集合判断重复+遍历查找区间</h4><ul><li>简单，略</li></ul><h4 id="思路二：HashMap，记录字符上次出现的索引坐标"><a href="#思路二：HashMap，记录字符上次出现的索引坐标" class="headerlink" title="思路二：HashMap，记录字符上次出现的索引坐标"></a>思路二：HashMap，记录字符上次出现的索引坐标</h4><ul><li>在判断是否重复的同时</li><li>还可以快速查找到重复元素的坐标</li><li>代码实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">char</span>[] chars = s.toCharArray();<br>        HashMap&lt;Character, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (right &lt; s.length()) &#123;<br>            <span class="hljs-keyword">if</span> (hashMap.containsKey(chars[right])) &#123;<br>                <span class="hljs-keyword">if</span> (hashMap.get(chars[right]) &gt;= left) &#123;<br>                    left = hashMap.get(chars[right]) + <span class="hljs-number">1</span>;<br>                &#125;<br>            &#125;<br>            hashMap.put(chars[right], right);<br>            right++;<br>            maxLength = Math.max(maxLength, right - left);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxLength;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</li></ul></blockquote><ul><li>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</li><li>你可以假设 nums1 和 nums2 不会同时为空。</li><li><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/">地址</a></li></ul><h3 id="解题思路-3"><a href="#解题思路-3" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一：将两个有序列表先归并成一个有序列表，然后再求中位数"><a href="#思路一：将两个有序列表先归并成一个有序列表，然后再求中位数" class="headerlink" title="思路一：将两个有序列表先归并成一个有序列表，然后再求中位数"></a>思路一：将两个有序列表先归并成一个有序列表，然后再求中位数</h4><ul><li>时间复杂度O(m+n)</li><li>空间复杂度O(m+n)</li><li>不符合题意，但比较简单</li></ul><h4 id="思路二：中位数在整个数组中最终的位置索引是已知的，所以不需要对整个数组合并排序"><a href="#思路二：中位数在整个数组中最终的位置索引是已知的，所以不需要对整个数组合并排序" class="headerlink" title="思路二：中位数在整个数组中最终的位置索引是已知的，所以不需要对整个数组合并排序"></a>思路二：中位数在整个数组中最终的位置索引是已知的，所以不需要对整个数组合并排序</h4><ul><li>如果m+n为偶数，则中位数索引为 (m+n) &#x2F; 2，以及其左边的</li><li>如果m+n为奇数，则中位数为(m+n) &#x2F; 2</li><li>所以，只要从两个数组中选出前半部分即可</li><li>时间复杂度仍然为O(m+n)，不可行</li></ul><h4 id="思路三：运用二分查找"><a href="#思路三：运用二分查找" class="headerlink" title="思路三：运用二分查找"></a>思路三：运用二分查找</h4><ul><li>这是运用二分查找的一个比较难的题目</li><li>算法复杂度要求O(log(m+n))，很容易联想到二分查找</li><li>思路与过程</li></ul><h5 id="1-查找的区间"><a href="#1-查找的区间" class="headerlink" title="1. 查找的区间"></a>1. 查找的区间</h5><ul><li>即需要在两个数组中确定一个分割线</li><li>即，在A数组中确定分割线后，B数组中分割线也就定下来了 j &#x3D; (m+n) &#x2F; 2 - i</li><li>i 和 j 表示分割线右边的索引</li></ul><h5 id="2-查找条件-排除条件"><a href="#2-查找条件-排除条件" class="headerlink" title="2. 查找条件&#x2F;排除条件"></a>2. 查找条件&#x2F;排除条件</h5><ul><li>分割线左边元素与右边偶数时相等，奇数时少一个</li><li>A左不能大于B右，A右不能小于A左</li><li>以上两个可以作为排除条件</li></ul><h5 id="3-整个查找过程即"><a href="#3-整个查找过程即" class="headerlink" title="3. 整个查找过程即"></a>3. 整个查找过程即</h5><ul><li>在 0 - m-1 上确定 i 的取值</li><li>最终使得 i 和 j 满足对于的查找条件</li><li>难就难在有很多特殊的边界情况需要特别考虑</li></ul><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2)</span> &#123;<br>       <span class="hljs-keyword">if</span>(nums1.length &gt; nums2.length)&#123;<br>            <span class="hljs-type">int</span> [] temp = nums1;<br>            nums1 = nums2;<br>            nums2 = temp;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = nums1.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> nums1.length + nums2.length;<br>        <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (left + right+<span class="hljs-number">1</span>) / <span class="hljs-number">2</span>; <span class="hljs-comment">// 向上取整</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> len/<span class="hljs-number">2</span> - i;<br>            <span class="hljs-keyword">if</span> (nums1[i - <span class="hljs-number">1</span>] &gt; nums2[j]) &#123;<br>                right = i-<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                left = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> len/<span class="hljs-number">2</span> - i;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLeftNums1</span> <span class="hljs-operator">=</span> i == <span class="hljs-number">0</span>? Integer.MIN_VALUE:nums1[i-<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minRightNums1</span> <span class="hljs-operator">=</span> i== nums1.length? Integer.MAX_VALUE:nums1[i];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLeftNums2</span> <span class="hljs-operator">=</span> j == <span class="hljs-number">0</span>? Integer.MIN_VALUE:nums2[j-<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minRightNums2</span> <span class="hljs-operator">=</span> j==nums2.length? Integer.MAX_VALUE:nums2[j];<br>        <span class="hljs-keyword">if</span>(( len &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) Math.min(minRightNums1,minRightNums2);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>) (Math.min(minRightNums1,minRightNums2) + Math.max(maxLeftNums1,maxLeftNums2)) / <span class="hljs-number">2.0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h5><ul><li>时间复杂度O(log(m+n))</li><li>空间复杂度O(1)</li></ul><h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5. 最长回文子串"></a>5. 最长回文子串</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</li></ul></blockquote><ul><li>输入: “babad”，输出: “bab”，注意: “aba” 也是一个有效答案。</li><li>输入: “cbbd”，输出: “bb”</li></ul><h3 id="解题思路-4"><a href="#解题思路-4" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路1：中间扩散"><a href="#思路1：中间扩散" class="headerlink" title="思路1：中间扩散"></a>思路1：中间扩散</h4><ul><li>依次遍历每个字符，以每个字符为中心，向外扩散，直到获得以该字符为中心的最长回文子串</li><li>需要讨论两种情况<ul><li>奇数 bab：判断 i-j 和 i+j 位置是否相等</li><li>偶数 baab：判断 i-j 和 i-j+1位置是否相等</li></ul></li></ul><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">maxString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt; s.length(); i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(i-j &gt;=<span class="hljs-number">0</span> &amp;&amp; i+j &lt; s.length())&#123;<br>                <span class="hljs-keyword">if</span>(s.charAt(i-j) != s.charAt(i+j))&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                j++;<br>            &#125;<br>            j--;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * j + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>( length &gt; maxLength)&#123;<br>                maxLength = length;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(); <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i-j; k &lt;= i+j;k++)&#123;<br>                    builder.append(s.charAt(k));<br>                &#125;<br>                maxString = builder.toString();<br>            &#125;<br>            j = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span>(i-j &gt;=<span class="hljs-number">0</span> &amp;&amp; i+j+<span class="hljs-number">1</span> &lt; s.length())&#123;<br>                <span class="hljs-keyword">if</span>(s.charAt(i-j) != s.charAt(i+j+<span class="hljs-number">1</span>))&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                j++;<br>            &#125;<br>            j--;<br>            length = <span class="hljs-number">2</span> * (j+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>( length &gt; maxLength)&#123;<br>                maxLength = length;<br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(); <br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i-j; k &lt;= i+j+<span class="hljs-number">1</span>;k++)&#123;<br>                    builder.append(s.charAt(k));<br>                &#125;<br>                maxString = builder.toString();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxString;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h4><ul><li>时间：O(n^2)</li><li>空间:O(1)</li></ul><h3 id="思路2：动态规划"><a href="#思路2：动态规划" class="headerlink" title="思路2：动态规划"></a>思路2：动态规划</h3><h4 id="1-定义dp"><a href="#1-定义dp" class="headerlink" title="1. 定义dp"></a>1. 定义dp</h4><ul><li>dp[i][j] 表示从 i 到 j 是否是回文串</li></ul><h4 id="2-递推方程"><a href="#2-递推方程" class="headerlink" title="2. 递推方程"></a>2. 递推方程</h4><ul><li>dp[i][j] &#x3D; dp[ i+1 ][ j-1 ]  &amp;&amp; s.charAt(i) &#x3D;&#x3D; s.charAt(j)</li></ul><h4 id="3-初始状态"><a href="#3-初始状态" class="headerlink" title="3. 初始状态"></a>3. 初始状态</h4><ul><li>dp[ i ][ i ] &#x3D; true</li><li>dp[ i ][ i+1 ] &#x3D; s.charAt(i) &#x3D;&#x3D; s.charAt(i+1)</li></ul><h4 id="4-填表过程"><a href="#4-填表过程" class="headerlink" title="4. 填表过程"></a>4. 填表过程</h4><ul><li>需要先填 i 大的，j 小的，所以从右下角向左上角填表</li></ul><h3 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(String s)</span> &#123;<br>       <span class="hljs-type">boolean</span> dp[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[s.length()][s.length()];<br>       <span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> s.length() == <span class="hljs-number">0</span> ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">maxString</span> <span class="hljs-operator">=</span> s.length() == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;&quot;</span> : s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>           dp[i][i] = <span class="hljs-literal">true</span>;<br>       &#125;<br>       <span class="hljs-comment">// 倒三角填表</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> s.length() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>           <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; s.length(); j++) &#123;<br>               <span class="hljs-keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;<br>                   dp[i][j] = <span class="hljs-literal">false</span>;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-keyword">if</span>(j-i == <span class="hljs-number">1</span>) dp[i][j] =<span class="hljs-literal">true</span>;<br>                   <span class="hljs-keyword">else</span> dp[i][j] = dp[i + <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                   <span class="hljs-keyword">if</span> (dp[i][j] &amp;&amp; j - i + <span class="hljs-number">1</span> &gt; maxLength) &#123;<br>                       maxLength = j - i + <span class="hljs-number">1</span>;<br>                       maxString = s.substring(i, j + <span class="hljs-number">1</span>);<br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> maxString;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="思路3：manacher算法（马拉车）"><a href="#思路3：manacher算法（马拉车）" class="headerlink" title="思路3：manacher算法（马拉车）"></a>思路3：manacher算法（马拉车）</h3><ul><li>专门用于解决最长回文子串的算法</li></ul><h2 id="6-盛最多水的容器"><a href="#6-盛最多水的容器" class="headerlink" title="6. 盛最多水的容器"></a>6. 盛最多水的容器</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</li></ul></blockquote><ul><li><a href="https://leetcode-cn.com/problems/container-with-most-water/">地址连接</a></li></ul><h3 id="解题思路-5"><a href="#解题思路-5" class="headerlink" title="解题思路"></a>解题思路</h3><p>容纳的水最多，即长乘宽的面积最大</p><h4 id="思路一：暴力算法"><a href="#思路一：暴力算法" class="headerlink" title="思路一：暴力算法"></a>思路一：暴力算法</h4><ul><li>每两个整数之间两两组合，求得最大的</li><li>代码实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt; height.length-<span class="hljs-number">1</span>; i++)&#123;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>; j&lt;height.length;j++)&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> Math.min(height[i],height[j]);<br>               <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> j - i;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> h * w;<br>               <span class="hljs-keyword">if</span>(cap &gt; max)&#123;<br>                   max = cap;<br>               &#125;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> max;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>复杂度<ul><li>时间复杂度O(n^2)</li></ul></li></ul><h4 id="思路二：双指针算法"><a href="#思路二：双指针算法" class="headerlink" title="思路二：双指针算法"></a>思路二：双指针算法</h4><ul><li><p>这是双指针算法的一个很好的例子</p></li><li><p>双指针算法能够将算法复杂度从O(N^2) 优化到O（N），因为避免了两层遍历</p></li><li><p>高度取决于两个整数中较小的那个，宽度取决于下标间的距离</p></li><li><p>思路过程</p><ol><li>首尾双指针，left和right，从两端出发</li><li>计算当前组合的面积，并和当前最大面积比较<ul><li>如果大，则更新最大面积以及下标</li></ul></li><li>继续遍历，缩小较小的边<ul><li>因为当前是较小整数被选中作为高的最大面积了</li><li>再往内部要么不会被选中，要么被选中了，但是宽度没现在大</li><li>所以较小整数可以从遍历的范畴中排除了</li></ul></li></ol></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxArea</span><span class="hljs-params">(<span class="hljs-type">int</span>[] height)</span> &#123;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, right = height.length-<span class="hljs-number">1</span>;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">while</span> (left &lt; right)&#123;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> Math.min(height[left],height[right]);<br>           <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> right - left;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">cap</span> <span class="hljs-operator">=</span> h * w;<br>           <span class="hljs-keyword">if</span>(cap &gt; max) max = cap;<br>           <span class="hljs-keyword">if</span>(height[left] &lt; height[right])&#123;<br>               left++;<br>           &#125;<span class="hljs-keyword">else</span> right--;<br>       &#125;<br>       <span class="hljs-keyword">return</span> max;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>算法复杂度<ul><li>时间复杂度O(N)</li></ul></li></ul><h2 id="7-三数之和"><a href="#7-三数之和" class="headerlink" title="7.三数之和"></a>7.三数之和</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c &#x3D; 0 ？请你找出所有满足条件且不重复的三元组。</li></ul></blockquote><ul><li>注意：答案中不可以包含重复的三元组。</li><li><a href="https://leetcode-cn.com/problems/3sum/">地址连接</a></li></ul><h3 id="解题思路-6"><a href="#解题思路-6" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>想到之前的两数问题</li></ul><h4 id="思路一：暴力算法-1"><a href="#思路一：暴力算法-1" class="headerlink" title="思路一：暴力算法"></a>思路一：暴力算法</h4><ul><li>三重循环，O(N^3)</li><li>同时还存在严重的重复问题</li></ul><h4 id="思路二：排序-暴力"><a href="#思路二：排序-暴力" class="headerlink" title="思路二：排序+暴力"></a>思路二：排序+暴力</h4><ul><li><p>重复问题解决</p><ul><li>对数组提前进行排序</li></ul></li><li><p>遍历时候，跳过同样的元素</p></li><li><p>算法复杂度依然是O(N^3)</p></li></ul><h4 id="思路三：排序-双指针"><a href="#思路三：排序-双指针" class="headerlink" title="思路三：排序+双指针"></a>思路三：排序+双指针</h4><ul><li><p>重复问题</p><ul><li>与思路二一样</li></ul></li><li><p>排序之后，通过比较双指针值和target值，能有效缩小区间</p></li><li><p>思路过程</p><ol><li>第一重循环：选取第一个数 num[ i ]<ul><li>从第个数开始，到不满足targe结束</li><li>因为排序后，第一个数必须小于等于targe才能满足三数和为target</li></ul></li><li>第二重循环：从 num[i] 之后的区间，用双指针选择两个数<ul><li>如果 num[ left ] + num[ right ] &lt; target - num[i]，说明小了，左边界搜索</li><li>反之</li></ul></li><li>跳过重复元素<ul><li>第一重循环，当 i 位置处理结束，要移动到下一个与 i 不一样的元素处</li><li>第二重循环，当 left 和 right 移动时候，要移动到与下一个与当前值不一样的位置</li></ul></li></ol></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>       LinkedList&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br><br>       Arrays.sort(nums);<br>       <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>       <span class="hljs-keyword">while</span> (i &lt; nums.length &amp;&amp; nums[i] &lt;= <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) &#123;<br>               i++;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>, right = nums.length - <span class="hljs-number">1</span>;<br>           <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>               <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[i] + nums[left] + nums[right];<br>               <span class="hljs-keyword">if</span> (sum &gt; <span class="hljs-number">0</span>) &#123;<br>                   right--;<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sum &lt; <span class="hljs-number">0</span>) &#123;<br>                   left++;<br>               &#125; <span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-type">List</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br>                   res.add(nums[i]);<br>                   res.add(nums[left]);<br>                   res.add(nums[right]);<br>                   list.add(res);<br>                   <span class="hljs-keyword">while</span> (left+<span class="hljs-number">1</span>&lt;nums.length &amp;&amp; nums[left]==nums[left+<span class="hljs-number">1</span>])&#123;<br>                       left++;<br>                   &#125;<br>                   left++;<br>                   <span class="hljs-keyword">while</span> (right-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">0</span> &amp;&amp; nums[right] == nums[right-<span class="hljs-number">1</span>])&#123;<br>                       right--;<br>                   &#125;<br>                   right--;<br>               &#125;<br>           &#125;<br>           i++;<br>       &#125;<br>       <span class="hljs-keyword">return</span> list;<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li>算法复杂度<ul><li>时间复杂度O(N)</li></ul></li></ul><h2 id="8-电话号码的字母组合"><a href="#8-电话号码的字母组合" class="headerlink" title="8.电话号码的字母组合"></a>8.电话号码的字母组合</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</li></ul></blockquote><ul><li>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</li><li>输入：”23”</li><li>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”].</li><li><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">题目地址</a></li></ul><h3 id="解题思路-7"><a href="#解题思路-7" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>属于排列组合问题</p></li><li><p>回溯算法遍历所有的情况，多叉树遍历</p></li><li><p>思路过程</p><ol><li>StringBuilder 记录从根到叶子节点的路径</li><li>对多叉树进行遍历，每个阶段将字符加入stringbuilder</li><li>回溯时候，撤销之前添加的字符</li></ol></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-keyword">private</span> HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">letterCombinations</span><span class="hljs-params">(String digits)</span> &#123;<br>        <span class="hljs-keyword">if</span>(digits.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> result;<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;abc&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;def&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;ghi&quot;</span>);<br>        map.put(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;jkl&quot;</span>);<br>        map.put(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;mno&quot;</span>);<br>        map.put(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;pqrs&quot;</span>);<br>        map.put(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;tuv&quot;</span>);<br>        map.put(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;wxyz&quot;</span>);<br>        combinations(digits,<span class="hljs-number">0</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">combinations</span><span class="hljs-params">(String digits, <span class="hljs-type">int</span> index, StringBuilder builder)</span>&#123;<br>        <span class="hljs-keyword">if</span>(index == digits.length()) &#123;<br>            result.add(builder.toString());<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">chars</span> <span class="hljs-operator">=</span> map.get(digits.charAt(index) - <span class="hljs-string">&#x27;0&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; chars.length(); i++) &#123;<br>            builder.append(chars.charAt(i));<br>            combinations(digits,index+<span class="hljs-number">1</span>,builder);<br>            builder.deleteCharAt(builder.length()-<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复杂度<ul><li>时间复杂度：O(4^n)</li><li>空间复杂度：O(4^n)</li></ul></li></ul><h2 id="9-有效的括号组合"><a href="#9-有效的括号组合" class="headerlink" title="9.有效的括号组合"></a>9.有效的括号组合</h2><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</li></ul></blockquote><ul><li>有效字符串需满足：<ul><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ul></li><li>注意空字符串可被认为是有效字符串。</li><li>输入: “([)]”</li><li>输出: false</li><li><a href="https://leetcode-cn.com/problems/valid-parentheses/">题目地址</a></li></ul><h3 id="解题思路-8"><a href="#解题思路-8" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li><p>通过栈来暂存左括号，进行匹配</p></li><li><p>思路过程</p><ol><li><p>读取字符</p><ul><li>如果是左括号，则直接入栈</li><li>如果是右括号，步骤2</li></ul></li><li><p>如果是右括号，检查栈顶是否是该右括号的左括号</p><ul><li>是，则弹出栈顶，读取下一个</li><li>不是，则匹配失败，false</li></ul></li><li><p>最终还需要检查栈是否为空，避免最后一个字符是左括号</p></li></ol></li><li><p>代码实现</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> &#123;<br>        Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (isLeft(s.charAt(i))) &#123;<br>                stack.push(s.charAt(i));<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isRight(s.charAt(i))) &#123;<br>                <span class="hljs-keyword">if</span>(!stack.isEmpty()&amp;&amp;isLeftMatchRight(stack.peek(),s.charAt(i)))&#123;<br>                    stack.pop();<br>                &#125;<span class="hljs-keyword">else</span> &#123; <br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stack.isEmpty();<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeft</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;(&#x27;</span> || c == <span class="hljs-string">&#x27;&#123;&#x27;</span> || c == <span class="hljs-string">&#x27;[&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isRight</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> &#123;<br>        <span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;)&#x27;</span> || c == <span class="hljs-string">&#x27;&#125;&#x27;</span> || c == <span class="hljs-string">&#x27;]&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeftMatchRight</span><span class="hljs-params">(<span class="hljs-type">char</span> left, <span class="hljs-type">char</span> right)</span> &#123;<br>        <span class="hljs-keyword">return</span> left == <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;)&#x27;</span><br>                || left == <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;]&#x27;</span><br>                || left == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>复杂度<ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul></li></ul><h2 id="10-删除链表的倒数第N个节点"><a href="#10-删除链表的倒数第N个节点" class="headerlink" title="10. 删除链表的倒数第N个节点"></a>10. 删除链表的倒数第N个节点</h2><h3 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h3><blockquote><ul><li>给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。</li></ul></blockquote><ul><li><p>示例：给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n &#x3D; 2.</p><ul><li>当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5.</li></ul></li><li><p>给定的 n 保证是有效的。</p></li><li><p>你能尝试使用一趟扫描实现吗？</p></li><li><p><a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">题目地址</a></p></li></ul><h3 id="解题思路-9"><a href="#解题思路-9" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="思路一：两次遍历"><a href="#思路一：两次遍历" class="headerlink" title="思路一：两次遍历"></a>思路一：两次遍历</h4><ul><li>第一次遍历，统计链表个数</li><li>第二次遍历，删除倒数第N个节点</li><li>算法复杂度：O(N)</li></ul><h4 id="思路二：HashMap遍历-一次遍历"><a href="#思路二：HashMap遍历-一次遍历" class="headerlink" title="思路二：HashMap遍历+一次遍历"></a>思路二：HashMap遍历+一次遍历</h4><ul><li>遍历链表，将位置和节点映射关系存入hashmap，同时计数</li><li>计算倒数第N个节点的索引，直接删除</li></ul><h4 id="思路三：递归实现"><a href="#思路三：递归实现" class="headerlink" title="思路三：递归实现"></a>思路三：递归实现</h4><ul><li><p>只需要遍历一次即可</p></li><li><p>思路过程</p><ol><li>递归返回值表示当前倒数第几个节点</li><li>如果head &#x3D;&#x3D; null， ruturn 0；</li><li>如果 返回值恰好为N，则删除该节点<ul><li>head.next &#x3D; head.next.next;</li></ul></li><li>为了方便删除头节点，适用一个哨兵<ul><li>ListNode tempHead &#x3D; new ListNode(1);</li><li>tempHead.next &#x3D; head;</li></ul></li></ol></li><li><p>代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for singly-linked list.</span><br><span class="hljs-comment"> * public class ListNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     ListNode next;</span><br><span class="hljs-comment"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">ListNode</span> <span class="hljs-variable">tempHead</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);<br>        tempHead.next = head;<br>        recur(tempHead,n);<br>        <span class="hljs-keyword">return</span> tempHead.next;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recur</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">if</span>(head == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> recur(head.next,n);<br>        <span class="hljs-keyword">if</span>(num == n)&#123;<br>            <span class="hljs-comment">// 删除</span><br>            head.next = head.next!=<span class="hljs-literal">null</span> ? head.next.next : <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> num+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>复杂度</p><ul><li>时间复杂度O(N)</li><li>空间复杂度O(N)</li></ul></li></ul><h2 id="下个路口见"><a href="#下个路口见" class="headerlink" title="下个路口见"></a>下个路口见</h2><p>HOT100依然在继续，写在下一篇文章中。<a href="http://blog.zwboy.cn/ji-zhu/leetcode-hot-100-shua-ti-11-20.html">传送门</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>LeetCode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LeetCode</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大脑Cache系列 -- Java快速梳理，方便随时load到大脑，减少低级bug（三）</title>
    <link href="/2022/01/27/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97-Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%8C%E6%96%B9%E4%BE%BF%E9%9A%8F%E6%97%B6load%E5%88%B0%E5%A4%A7%E8%84%91%EF%BC%8C%E5%87%8F%E5%B0%91%E4%BD%8E%E7%BA%A7bug%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2022/01/27/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97-Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%8C%E6%96%B9%E4%BE%BF%E9%9A%8F%E6%97%B6load%E5%88%B0%E5%A4%A7%E8%84%91%EF%BC%8C%E5%87%8F%E5%B0%91%E4%BD%8E%E7%BA%A7bug%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><ul><li>Java程序常常会遇到一些蛋疼的bug，最后发现，都是在一些很基础的方面造成的。大量的时间花在调试代码找低级bug上是十分没有性价比的。所以，再系统梳理下Java，是十分必要的。</li><li>已经反复学习和使用Java多次了，但只要有段时间没用Java之后，每次使用前都想要重头再梳理一遍。本文章将更注重Java只是的系统性，而不是细节性。</li><li>本文是本人大脑的专属Cache，所以逻辑上可能只有我自己能够看懂，见谅。</li></ul></blockquote><h3 id="一、目录"><a href="#一、目录" class="headerlink" title="一、目录"></a>一、目录</h3><ul><li>Java泛型</li><li>Java集合</li><li>Java部署</li></ul><span id="more"></span><h3 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h3><ul><li>在不支持泛型之前，Java是通过继承实现对不同类型数据的支持，缺点是每次都需要进行格式转换</li><li>泛型：<strong>类型参数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 泛型类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;T, U&gt; &#123; <span class="hljs-comment">// 类型参数，支持多个</span><br>  <span class="hljs-keyword">private</span> T first;<br>  <span class="hljs-keyword">private</span> T second;<br><br>  <span class="hljs-comment">// 泛型方法，</span><br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span> &#123; <span class="hljs-comment">// 类型参数放在修饰符后边，返回类型前边 </span><br>    <span class="hljs-keyword">return</span> first;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><strong>泛型方法可以定义在泛型类中，也可以定义在普通类中</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> first;<br>  <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">// 泛型方法可以定义在普通类中</span><br>    <span class="hljs-keyword">return</span> first;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>类型变量的限定</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BindType1</span> &amp; BindType2&gt; <span class="hljs-comment">// T必须是绑定类型的子类，对类型变量做了限定</span><br></code></pre></td></tr></table></figure><h5 id="泛型的虚拟机实现——类型擦除"><a href="#泛型的虚拟机实现——类型擦除" class="headerlink" title="泛型的虚拟机实现——类型擦除"></a>泛型的虚拟机实现——类型擦除</h5><ul><li><strong>虚拟机中并没有泛型类的对象，所有的对象都属于普通类</strong></li><li><strong>类型擦除</strong><ul><li><strong>原始类型</strong>：每一个泛型类型，都提供一个相应的原始类型。</li><li>原始类型名为泛型类删除类型参数</li><li>擦除类中的类型变量，替换为限定类型(第一个限定类型)，没有限定则为Object类型</li><li>比如Pair<T>类的原始类型为<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span> &#123;<br>  <span class="hljs-keyword">private</span> Object first;<br>  <span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getFirst</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> first;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li>程序调用泛型方法的时候，在虚拟机层面实际执行两条指令，多出来的一条为插入的类型转换指令，目的是回复擦除的类型。<ul><li>多出来的虚拟机指令是编译器添加的，在字节码中添加</li></ul></li></ul><h5 id="泛型的注意点"><a href="#泛型的注意点" class="headerlink" title="泛型的注意点"></a>泛型的注意点</h5><ul><li><strong>不能用基本类型作为类型参数</strong>，比如int,double，而要改用Integer，Double</li><li><strong>不对泛型类型对象做类型检查</strong><ul><li><strong>getClass返回的总是原始类型，而不是泛型类型</strong></li><li>同样的**a instanceof Pair<String>**，编译错误</li></ul></li><li><strong>不能实例化创建参数化类型的数组</strong><ul><li><code>Pair&lt;String&gt; [] table = new Pair&lt;String&gt;[10]; // error</code></li></ul></li></ul><h5 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h5><ul><li><code>Pair&lt;Employee&gt;</code>和<code>Pair&lt;Manager&gt;</code>之间没有继承关系。</li></ul><h3 id="Java集合框架"><a href="#Java集合框架" class="headerlink" title="Java集合框架"></a>Java集合框架</h3><ul><li>传统的支持：Vector,Stack,HashTable,BitSet,Enumeration接口等</li></ul><h5 id="Java集合框架将集合的接口与实现分离"><a href="#Java集合框架将集合的接口与实现分离" class="headerlink" title="Java集合框架将集合的接口与实现分离"></a>Java集合框架将集合的接口与实现分离</h5><ul><li>队列接口Queue(interface)<ul><li>队尾添加元素，队头删除元素，先进先出，且能够获得队列元素数目</li><li>接口方法：add(E element),remove(),size()</li><li>集合实现这个接口就可以实现一个队列</li></ul></li><li>Collection集合接口<ul><li>Java集合类的<strong>基本接口</strong>，主要有两个重要的方法</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Collection</span>&lt;E&gt; &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E element)</span>; <span class="hljs-comment">// 添加元素，不允许重复</span><br>  Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 返回实现了迭代器接口的对象，通过该迭代器对象可以依次访问集合中的元素</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 返回元素数目</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>; <br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object obj)</span>; <span class="hljs-comment">// 集合中是否存在该元素</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Object obj)</span>; <span class="hljs-comment">// 如果存在obj，则删除</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 情况集合内容</span><br>  Object[] toArray(); <span class="hljs-comment">// 将集合转化为数组</span><br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>迭代器Iterator<ul><li>for each循环需要集合实现iterator接口</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>  <span class="hljs-comment">// 类比编辑软件的光标、插入以及删除效果</span><br>  E <span class="hljs-title function_">next</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 越过当前元素，迭代到下一个（光标后移），并返回越过元素的内容</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 判断是否能够越过当前元素</span><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 删除光标之前的元素</span><br>  <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachRemaining</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> E&gt; action)</span>; <span class="hljs-comment">// Java8</span><br>&#125;<br><span class="hljs-comment">// 使用,比如foreach的实际实现</span><br>Collection&lt;String&gt; str = ...<br>Iterator&lt;String&gt; iter = str.iterator();<br><span class="hljs-keyword">while</span>(iter.hasNext())&#123;<br>  <span class="hljs-type">String</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> iter.next();<br>  dosomething...<br>&#125;<br><span class="hljs-comment">// Java8中直接通过forEachRemaining和lamabda表达式实现</span><br>itertor.forEachRemaining(element -&gt; &#123;<br>  <span class="hljs-keyword">do</span> something with element<br>&#125;)<br></code></pre></td></tr></table></figure><ul><li><p>元素的迭代顺序由具体的集合来决定</p></li><li><p>与C++中的迭代器不同（基于索引下标，不需要查找操作，直接通过索引i++），Java中的迭代器是<strong>查找操作与位置变更是紧密相连的，查找一个元素的唯一方法是调用next(),在执行查找操作的同时，迭代器已经就指向下一个元素了，返回上一个元素</strong></p></li><li><p><strong>next和remove方法的调用具有互相依赖性，在调用remove之前，如果没有调用next，将会抛出一个非法异常</strong></p></li><li><p><strong>删除两个相邻的元素的元素不能直接连续remove，必须调用next越到下一个元素</strong></p></li><li><p>Java集合框架中各种集合接口的关系</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">- Iterable        可迭代接口<br>  - Collection    集合类的基础类<br>    - List        有序集合，能够有序访问和随机访问<br>    - Set <br>      - SortSet<br>    - Queue<br>      - Deque<br>- Map             key value 映射<br>  - SortedMap<br>- Iterator<br>  - ListIterator  针对于List的迭代器<br></code></pre></td></tr></table></figure><h5 id="Java中的具体集合类"><a href="#Java中的具体集合类" class="headerlink" title="Java中的具体集合类"></a>Java中的具体集合类</h5><ul><li>以Map结尾的都实现了Map接口，没有的都实现了Collection接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">- AbstractCollection<br>  - AbstractList        有序集合<br>    - ArrayList         支持动态增长和缩减的索引序列<br>    - LinkedList        链表类，支持高效插入和删除<br>  - AbstractSet         数学中的集合，没有重复元素<br>    - HashSet           没有重复元素的无序集合<br>      - LinkedHashSet   可以记住元素插入顺序的集合<br>    - TreeSet           有序集合<br>    - EnumSet           包含枚举类型值的集合<br>  - AbstractQueue<br>    - PriorityQueue     优先级队列，高效删除最小元素的集合<br>    - ArrayDequeue      循环数组实现的双端队列<br>- AbstractMap           映射表<br>  - HashMap             普通常用的键值对<br>    - LinkedHashMap     在能记录键值对的添加次序<br>  - TreeMap             键值有序排列<br>  - EnumMap             键值为枚举类型的映射表<br>  - WeakHashMap         一种当其值无用武之地的时候，可以被垃圾回收器回收的引射表<br>  - IdentityHashMap     一种用===而不是queals比较键值的映射表<br></code></pre></td></tr></table></figure><h5 id="链表LinkedList"><a href="#链表LinkedList" class="headerlink" title="链表LinkedList"></a>链表LinkedList</h5><ul><li>数组Array和数组列表类对象ArrayList有个缺陷，在数组中间位置添加和删除的代价很大</li><li>Java的链表实际上是<strong>双向链表</strong>，有找到前向和后继的引用</li><li>链表实现了Collection接口，但Collection接口的add()方法只支持向链表最后添加元素，不支持链表的任意位置添加元素</li><li>在中间位置插入元素，通过ListIterator接口提供的方法实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 面向LinkedList链表的迭代器</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">ListIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E element)</span>; <span class="hljs-comment">// 链表的插入方式，在当前迭代位置后加入一个元素</span><br>  ...<br>  E <span class="hljs-title function_">previous</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 反向遍历链表，访问上一个元素</span><br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPrevious</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 与hasNext()类似</span><br>&#125;<br><span class="hljs-comment">// 使用链表，并从中间加入元素</span><br>List&lt;String&gt; staff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>staff.add(<span class="hljs-string">&quot;1&quot;</span>);<br>staff.add(<span class="hljs-string">&quot;3&quot;</span>);<br>staff.add(<span class="hljs-string">&quot;4&quot;</span>);<br>ListIterator&lt;String&gt; iter = staff.listIterator();<br>iter.next(); <span class="hljs-comment">// 跳过第一个元素，没有next的话，就是作为链表头</span><br>iter.add(<span class="hljs-string">&quot;2&quot;</span>); <span class="hljs-comment">// 最终的结果，1234</span><br><span class="hljs-comment">// n长度的链表，有n+1个插入位置</span><br>|ABC<br>A|BC<br>AB|C<br>ABC|<br><span class="hljs-comment">// 链表提供了一个set()方法来替换值，不用先删除再添加了</span><br>ListIteartor&lt;String&gt; iter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListIteartor</span>&lt;&gt;();<br><span class="hljs-type">String</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> iter.next(); <span class="hljs-comment">// 得到第一个元素</span><br>iter.set(newvalue); <span class="hljs-comment">// 将第一个元素赋予新值</span><br></code></pre></td></tr></table></figure><ul><li>可以创建多个链表迭代器，比如用于并发，但是同时只能有一个迭代器用来修改链表集合，其他迭代器只能读取，多个迭代器同时修改会抛出异常。</li><li>链表作为一个List，也是支持有序访问和通过索引访问的的，但对于链表不推荐使用get(i)和set(i,value)</li></ul><h5 id="数组列表ArrayList"><a href="#数组列表ArrayList" class="headerlink" title="数组列表ArrayList"></a>数组列表ArrayList</h5><ul><li>有序列表，动态扩展和收缩</li><li>ArrayList不是同步的，是线程不安全的，适合在非并发的时候使用</li><li>Vector是同步的，线程安全的，但是同步操作上会耗费大量的时间，只在并发的时候使用</li></ul><h5 id="散列集HashSet"><a href="#散列集HashSet" class="headerlink" title="散列集HashSet"></a>散列集HashSet</h5><ul><li>不关注元素的顺序，只想要能够快速查找到元素，且无重复元素的集合Set</li><li>通过散列表来实现，散列表为每个对象计算一个散列码HashCode，对象的hashCode()方法在这个时候使用</li><li>装填因子，散列函数，桶，散列冲突等概念</li><li>对散列集的遍历顺序是随机的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;String&gt; words = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>words.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>Iterator&lt;String&gt; iter = words.iterator();<br>iter.hasNext();<br><span class="hljs-type">String</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> iter.next();<br></code></pre></td></tr></table></figure><h5 id="树集TreeSet"><a href="#树集TreeSet" class="headerlink" title="树集TreeSet"></a>树集TreeSet</h5><ul><li>有序集合，内部是树结构，按照树的顺序进行遍历（红黑树）</li><li>每次添加元素，都将元素添加到树中的正确位置。</li></ul><h5 id="队列Queue与双端队列ArrayDeque"><a href="#队列Queue与双端队列ArrayDeque" class="headerlink" title="队列Queue与双端队列ArrayDeque"></a>队列Queue与双端队列ArrayDeque</h5><ul><li>Queue</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 队尾添加</span><br>- <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E element)</span> <br>- <span class="hljs-type">boolean</span> <span class="hljs-title function_">offer</span><span class="hljs-params">(E element)</span> <br><span class="hljs-comment">// 对首删除并返回</span><br>- E <span class="hljs-title function_">remove</span><span class="hljs-params">()</span><br>- E <span class="hljs-title function_">poll</span><span class="hljs-params">()</span><br><span class="hljs-comment">// 只返回对首元素，不删除</span><br>- E <span class="hljs-title function_">element</span><span class="hljs-params">()</span><br>- E <span class="hljs-title function_">peek</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><ul><li>Deque</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">addFirst</span><span class="hljs-params">(E element)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">addLast</span><span class="hljs-params">(E element)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">offerFirst</span><span class="hljs-params">(E element)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">offerLast</span><span class="hljs-params">(E element)</span><br>E <span class="hljs-title function_">removeFirst</span><span class="hljs-params">()</span><br>...<br></code></pre></td></tr></table></figure><h5 id="优先级队列PriorityQueue"><a href="#优先级队列PriorityQueue" class="headerlink" title="优先级队列PriorityQueue"></a>优先级队列PriorityQueue</h5><ul><li>支持任意顺序的插入，而每次remove，返回的都是队列中的最小值</li><li>内部通过堆来实现，是一个能够自我调整的二叉树，在对树进行add和remove操作中，能始终保证最小的元素移动到根</li><li>优先级队列用于任务调度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// E 必须是支持比较的元素类型</span><br>PriorityQueue&lt;E&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br>queue.add(element1); <span class="hljs-comment">// 按照随机顺序加入，自动调整排序</span><br>queue.add(element2);<br>queue.add(element3);<br><span class="hljs-type">E</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> queue.remove(); <span class="hljs-comment">// 返回最小值</span><br></code></pre></td></tr></table></figure><h5 id="映射Map"><a href="#映射Map" class="headerlink" title="映射Map"></a>映射Map</h5><ul><li>HashSet是以对象副本来查找元素，不好用</li><li>映射通过键值对来查找元素</li><li>有<code>HashMap</code>和<code>TreeMap</code>两种<ul><li><code>HashMap</code>，通过对键进行散列，进而访问值</li><li><code>TreeMap</code>，利用键的顺序，对元素进行排序</li></ul></li><li>和集合一样，散列稍微快一些，如果不需要按照排列顺序访问键，推荐使用散列映射</li><li>Map的键使用的是字符串</li><li>添加键值对：<code>V put(K key,V value)</code><ul><li>重复用同一个key添加，会覆盖之前添加的值,返回之前的值</li><li>添加一个新的键，返回的值为null</li></ul></li><li>查找键值对:<code>V get(Object key)</code><ul><li>如果不存在该key，则返回null</li><li><code>V getOrDefault(Object key, V defaultValue)</code></li></ul></li><li>删除键值对：<code>remove(Object key)</code></li><li>判断是否有键：<code>boolean containsKey(Object key)</code></li><li>判断是否有值：<code>boolean containerValue(Object value)</code></li><li>遍历键值对：<code>hashMap.forEach((k,v)=&#123;do...&#125;)</code></li><li>三个视图View: keySet,valueSet,entrySet</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String,E&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,E&gt;();<br>hashMap.put(<span class="hljs-string">&quot;first&quot;</span>,element1);<br>hashMap.put(<span class="hljs-string">&quot;second&quot;</span>,element2);<br>hashMap.get(<span class="hljs-string">&quot;first&quot;</span>);<br>Set&lt;String&gt; keySet = hashMap.keySet();<span class="hljs-comment">// &#123;first,second&#125;</span><br>Set&lt;E&gt; valueSet = hashMap.valueSet();<br>Set&lt;Map.Entry&lt;String,E&gt;&gt; entrySet = hashMap.entrySet();<br></code></pre></td></tr></table></figure><h5 id="弱散列集合WeakHashMap"><a href="#弱散列集合WeakHashMap" class="headerlink" title="弱散列集合WeakHashMap"></a>弱散列集合WeakHashMap</h5><ul><li>能够自动回收那些无用的键值对</li><li>如果有一个值，对应的键已经不再使用了，那么该键值对将无法从Map中删除</li><li>对于长期存活的Map，需要手动删除，或者直接使用WeakHashMap</li><li>内部实现中，WeakHashMap使用的弱引用(wek references)来保存键。<ul><li>弱引用对象将引用保存到另外一个对象中，在这里，就是散列键</li><li>如果某个对象，只有WeakReference引用，那么垃圾回收器可以回收它。</li></ul></li></ul><h5 id="链接散列集与映射LinkedHashSet与LinkedHashMap"><a href="#链接散列集与映射LinkedHashSet与LinkedHashMap" class="headerlink" title="链接散列集与映射LinkedHashSet与LinkedHashMap"></a>链接散列集与映射LinkedHashSet与LinkedHashMap</h5><ul><li>在实现HashSet与HashMap的基础上，还能够记录元素的添加顺序，即迭代遍历顺序</li><li>实现方式是在Hash表的基础上，再通过链表的方式将添加的元素顺序链接起来。</li></ul><h5 id="枚举集与映射EnumSet"><a href="#枚举集与映射EnumSet" class="headerlink" title="枚举集与映射EnumSet"></a>枚举集与映射EnumSet</h5><ul><li>如果key的类型为枚举，那么可以使用EnumSet</li><li>使用位序列进行了优化</li></ul><h5 id="表示散列映射IdentityHashMap"><a href="#表示散列映射IdentityHashMap" class="headerlink" title="表示散列映射IdentityHashMap"></a>表示散列映射IdentityHashMap</h5><ul><li>特殊用途：<strong>对象遍历算法</strong></li><li>hash计算不再通过对象的hashCode计算，而是通过System.identityHashCode计算，返回的是根据对象的内存地址计算的Hash值</li><li>所以不能用equal()来判断相等了，而是用&#x3D;&#x3D;号来判断</li><li><strong>不同的键值对，即便内容一样，也被视为不一样的对象</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>大脑Cache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大脑Cache系列 -- Java快速梳理，方便随时load到大脑，减少低级bug（二） </title>
    <link href="/2022/01/06/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97-Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%8C%E6%96%B9%E4%BE%BF%E9%9A%8F%E6%97%B6load%E5%88%B0%E5%A4%A7%E8%84%91%EF%BC%8C%E5%87%8F%E5%B0%91%E4%BD%8E%E7%BA%A7bug%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/01/06/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97-Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%8C%E6%96%B9%E4%BE%BF%E9%9A%8F%E6%97%B6load%E5%88%B0%E5%A4%A7%E8%84%91%EF%BC%8C%E5%87%8F%E5%B0%91%E4%BD%8E%E7%BA%A7bug%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><ul><li>Java程序常常会遇到一些蛋疼的bug，最后发现，都是在一些很基础的方面造成的。大量的时间花在调试代码找低级bug上是十分没有性价比的。所以，再系统梳理下Java，是十分必要的。</li><li>已经反复学习和使用Java多次了，但只要有段时间没用Java之后，每次使用前都想要重头再梳理一遍。本文章将更注重Java只是的系统性，而不是细节性。</li><li>本文是本人大脑的专属Cache，所以逻辑上可能只有我自己能够看懂，见谅。</li></ul></blockquote><h3 id="一、目录"><a href="#一、目录" class="headerlink" title="一、目录"></a>一、目录</h3><ul><li>Java继承</li><li>Java反射</li><li>Java接口</li><li>Lambda表达式</li><li>Java异常</li></ul><span id="more"></span><h3 id="二、Java继承"><a href="#二、Java继承" class="headerlink" title="二、Java继承"></a>二、Java继承</h3><h5 id="Java与C-继承"><a href="#Java与C-继承" class="headerlink" title="Java与C++继承"></a>Java与C++继承</h5><ul><li>子类 extends 父类，而C++是：符号</li><li>Java只有公有继承，C++有公有继承和私有继承</li><li>Java只支持单继承，多继承通过接口实现</li><li>子类从父类继承所有的数据域和方法，但有一些不一定能够访问到。</li><li>此外，子类只能通过覆盖来修改，以及增加方法，但绝对无法删除父类的任何方法和数据域。</li></ul><h5 id="覆盖方法"><a href="#覆盖方法" class="headerlink" title="覆盖方法"></a>覆盖方法</h5><ul><li>覆盖：子类方法重写父类的方法，父类方法将会被覆盖，区别重载（本类方法之间）</li><li>覆盖时，子类和父类要严格一致（访问类型，返回值，方法名，参数列表）<ul><li>可以通过@Override来对子类的覆盖方法进行标记，来保障子类该方法成功覆盖了一个父类的方法，而不是定义了一个毫无相关的方法（没有匹配父类方法的时候，会编译报错）</li></ul></li><li>被覆盖的父类方法依然可以通过super方法调用。</li><li>super并不是像this那样是一个对象引用，<strong>super只是一个指示编译器调用父类方法的特殊关键字，所以不能将super赋值给另一个变量。</strong></li><li>super()调用父类的构造器</li></ul><h5 id="多态与动态绑定"><a href="#多态与动态绑定" class="headerlink" title="多态与动态绑定"></a>多态与动态绑定</h5><ul><li>多态：父类对象变量可以引用子类对象，且能够通过父类对象正确调用该对象的方法。</li><li>动态绑定：在运行时，能够自动选择调用哪个方法。</li><li>用途：有一组不同类型的对象数据，可以直接通过他们父类类型的数组来统一组织</li><li>不能将父类引用赋值给子类变量，但是可以将子类引用赋值给父类对象，且不需要强制类型转换。</li></ul><h5 id="方法调用的过程"><a href="#方法调用的过程" class="headerlink" title="方法调用的过程"></a>方法调用的过程</h5><ul><li><strong>对象在调用方法的时候，除了方法显式的参数之外，还有一个隐式参数，那便是对象本身，隐式参数不属于函数签名</strong></li><li>1.根据方法名，选出本类和父类中所有候选方法（父类中的方法需要是public的）</li><li>2.根据参数列表，进行重载解析，获得调用方法名字和参数类型，即函数签名（考虑子类覆盖父类）</li><li>3.如果该方法是private、static、final、或者构造器，那么编辑器就可以确定调用哪个方法了，这个称为静态绑定</li><li>4.可能存在多态的情况时，虚拟机会考虑到隐式参数对象的实际类型，选择调用对应类中的方法。依次实现运行时的动态绑定。</li></ul><h5 id="阻止继承-final类和方法"><a href="#阻止继承-final类和方法" class="headerlink" title="阻止继承 final类和方法"></a>阻止继承 final类和方法</h5><ul><li>final类，不允许被继承</li><li>final方法，子类不允许覆盖这个方法，final类中的所有方法都是final的。</li></ul><h5 id="对象强制类型转换"><a href="#对象强制类型转换" class="headerlink" title="对象强制类型转换"></a>对象强制类型转换</h5><ul><li>只能在继承链上进行类型转换</li><li>在将父类转成子类之前，最好使用instanceof检查是否转换错误</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(child <span class="hljs-keyword">instanceof</span> Manager)&#123; <span class="hljs-comment">// 不需要判null</span><br>  manager = child;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在一些参数传递的时候可能会使用</li></ul><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><ul><li>为了进一步提升父类的通用能力</li><li>抽象类：含有一个或者多个抽象方法的类，就是抽象类<ul><li>抽象类和抽象方法需要使用abstract来修饰</li><li>抽象类中是可以存在具体数据和具体方法的，可以存在一个抽象方法</li></ul></li><li>抽象类是可以不包含抽象方法的</li><li><strong>抽象类不能被实例化</strong>，必须通过子类实现所有的抽象方法才可以。</li><li>虽然抽象类不能实例化，但可以通过抽象类变量引用子类对象（这是正常的父类子类特点）。</li></ul><h5 id="受保护的访问"><a href="#受保护的访问" class="headerlink" title="受保护的访问"></a>受保护的访问</h5><ul><li>private：仅对本类可见</li><li>public：对所有类可见，无限制</li><li>protected：对本类和子类，以及本包类可见<ul><li><strong>如果想一个方法或者数据能够被子类访问，需要设置protected修饰符</strong></li></ul></li><li>默认情况：对本包类可见，<strong>对子类不可见</strong></li></ul><table><thead><tr><th align="center">修饰符</th><th align="center">本类</th><th align="center">本包</th><th align="center">子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td></tr><tr><td align="center">private</td><td align="center">yes</td><td align="center">no</td><td align="center">no</td><td align="center">no</td></tr><tr><td align="center">protected</td><td align="center">yes</td><td align="center">yes</td><td align="center">yes</td><td align="center">no</td></tr><tr><td align="center">default</td><td align="center">yes</td><td align="center">yes</td><td align="center"><strong>no</strong></td><td align="center">no</td></tr></tbody></table><h5 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h5><ul><li>所有类的超类</li><li>Java中只有基本类型不是对象，其他都是对象，都具有Object的方法和数据</li><li>equals():<ul><li><strong>在没重写的情况下，与&#x3D;&#x3D;的效果是一致的，判断的是地址而不是实际的内容。</strong></li><li>String，Integer等类已经对equals()进行重写了。</li><li>我们在实现自己类的时候，需要自己来实现equals。（在实现自己实现equals后，还需要实现hashcode）（很套路，很多IDE是支持一键自动生成的）</li></ul></li><li>Class getClass()：获得该对象所属于的类<ul><li>class.getName获得类名</li></ul></li><li>hashcode(): 返回对象的散列值<ul><li>规定：<strong>两个对象，如果equals为true，那么hashcode一定要保证相同</strong>，即相等的对象有相同的hashcode。</li><li>默认的的hashcode都是参考了存储地址的，所以两个对象，默认的hashcode一定不一样，即便他们值可能是一样的。</li><li>因此<strong>当自己实现equals的时候，对应的也要实现hashcode，来保证重要规则</strong></li><li><strong>两个相等的对象必须要返回相同的hashcode码，但是相等的hashcode不一定是相等的变量</strong>，（hashcode的计算方式）</li><li>java对象的hashcode设计是为了配合基于散列的集合,添加元素的时候，通过hashcode和equals来快速判断对象是否已经存在（大大减少了equals次数，比纯equals循环要好多了）</li></ul></li><li>toString():将对象以字符串形式输出，常用于日志之类。Object中默认的为类名+Hash值</li></ul><h5 id="重写equals-Object-obj-方法（了解即可，可以IDE自动生成的，hh）"><a href="#重写equals-Object-obj-方法（了解即可，可以IDE自动生成的，hh）" class="headerlink" title="重写equals(Object obj)方法（了解即可，可以IDE自动生成的，hh）"></a>重写equals(Object obj)方法（了解即可，可以IDE自动生成的，hh）</h5><ul><li>1.引用的是同一个对象吗</li><li>2.obj为null吗？</li><li>3.两个是同一个类吗</li><li>4.obj强制转化成本类</li><li>5.一次判断各个数据域是否相等</li><li><strong>记得还要检查下hashcode是否要也要重写哦</strong></li></ul><h5 id="泛型数组-ArrayList"><a href="#泛型数组-ArrayList" class="headerlink" title="泛型数组 ArrayList"></a>泛型数组 ArrayList<Type></h5><ul><li>普通数组无法再运行时更改数组的大小，可以使用泛型数组库，ArrayList</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayList&lt;MyClass&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br></code></pre></td></tr></table></figure><ul><li>Java老版本中的Vector也可以实现动态数组，但没ArrayList有效。</li><li>add(),向数组中添加一个元素，如果容量不够，会自动扩展</li><li>ArrayList不支持数组的[]访问方式</li><li>get(index),获取数组中index位置的元素</li><li>set(index,item),替换数组中的某个元素</li><li>size()，类似数组的length</li><li>arrayList.ensureCapacity(100),预分配100大小的数组</li><li>trimToSize(),当保证不再向数组中添加元素了，调用将释放多余分配的空间</li><li>arrayList.toArray(array),为了方便数组的访问，可以通过ArrayList构造，然后转换成普通数组并处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 一种很好的实践</span><br>ArrayList&lt;X&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// add item to list</span><br>X[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">X</span>[list.size()];<br>list.toArray(a);<br></code></pre></td></tr></table></figure><h5 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h5><ul><li>基本类型都有对应的类，Integer, Double,Boolean,Character，Void等</li><li>他们的超类为Number</li><li><strong>一旦包装器创建了，就不允许更改包装在其中的值了</strong></li><li>自动装箱和自动拆箱：能在基础类型和对应的类之间自动转换，这是由Java编译器实现的，添加了装箱拆箱语句</li><li><strong>Java的&#x3D;&#x3D;号检测的是两个变量指向的地址是否相同</strong>，所以不同于基础类型，装箱后要用equals方法来判断值是否相等（他们重写了equals方法）</li><li>字符串Int转换：<code>int x = Integer.paseInt(&quot;1&quot;)</code>或者<code>Integer.valueOf(&quot;100&quot;)</code></li></ul><h5 id="参数可变的方法"><a href="#参数可变的方法" class="headerlink" title="参数可变的方法"></a>参数可变的方法</h5><ul><li>Java方法的参数数目可以是可变的</li><li>省略号<code>...</code>,可以出现在参数列表的最后，<strong>其实和数组的效果的类似的</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">printf(String fmt, Object...args);<br></code></pre></td></tr></table></figure><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><blockquote><p>Java反射机制能够在程序运行时，对于任意一个类，都能够知道这个类的所有属性和方法。对于任意一个对象，在有权限的情况下，能够调用方法和属性。即，动态获取信息以及动态调用对象方法的机制。</p></blockquote><ul><li>反射，能够分析类能力，能够动态操纵Java代码</li><li>主要用户工具构造，在实际的应用中使用不多(也不建议在应用应用开发中过多使用)</li><li>Class类，Java运行时系统为每个类维护一个Class类</li><li>getClass(),Name.class</li></ul><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>抽象类是对类的抽象，而接口是对行为的抽象。</li><li><strong>接口中所有方法都自动是public，不需要额外加public修饰符（但在实现接口的类中，方法前必须加public）</strong></li><li>接口中<strong>不能含有实例域（接口没有实例）</strong>，但可以含有<strong>常量和静态常量</strong></li><li>对于方法，<strong>接口中不能提供实现</strong>（Java8后支持默认实现）</li><li>接口不是类，不能通过new被实例化成对象。</li><li>不存在接口实例化的对象，但是存在<strong>接口变量，且接口变量可以引用实现了它的类的对象</strong>。</li><li>接口支持继承另一个接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span> &#123; <span class="hljs-comment">// java.lang.Comparable</span><br>  <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object obj)</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> Test <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object obj)</span> &#123; <span class="hljs-comment">// 实现类时候，需要public</span><br>    <span class="hljs-keyword">return</span> Double.compare(salary,obj.salary); <span class="hljs-comment">// 相减比较不适合浮点数</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>Java常用的内置接口</p><ul><li>Compalrable</li><li>Cloneable</li></ul></li><li><p>接口的意义在于统一服务的对外接口：Java是一种强类型语言，使用接口来解决类型的问题，编译器不需要再执行的时候进行类型检查（因为编译器认为只要这个类实现了这个接口，就一定能处理）</p></li><li><p>接口与继承（抽象类）</p><ul><li>Java不支持多继承，因为多继承会使语言更复杂</li><li>Java通过接口来实现多继承，一个类可以实现多个接口</li></ul></li><li><p>Java8之后，接口中可以存在静态方法并实现之了，目的是，这样就可以避免某些工具类必须要提供伴随类了。</p></li><li><p>默认方法：</p><ul><li>在我们实现接口的时候，很多时候只需要实现部分方法，默认方法为接口中的方法提供一个默认的实现。</li><li>用default修饰符，然后就可以在接口中简单实现这些方法了。</li></ul></li></ul><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><ul><li>将一个代码块像参数一样传递到另一个对象中（定时器，响应等），这个代码块会在未来的某个时刻会被调用。</li><li>对比通过传入对象来实现，Lambda表达式更优雅，使得Java支持函数式编程。</li><li><code>(参数列表) -&gt; &#123;代码块&#125;</code>，Lambda没有返回类型</li><li><strong>函数式接口</strong>：只含有一个抽象方法的接口，可以把Lambda赋值给一个函数式接口变量</li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">@FunctionalInterface <span class="hljs-comment">// 可选，用于编译检查是否只有一个抽象方法，类似Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">FunctionalInterface</span>&lt;<span class="hljs-symbol">T</span>&gt;&#123;<br><span class="hljs-built_in">void</span> accept(T t);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Lambda表达式可以转化为对应的接口形式</li><li>Lambda表达式实际上是一个<strong>函数</strong>，传入之后会在某处会被执行，而不是一个对象。</li><li>所以不能将一个Lambda表达式赋值给一个Object变量，因为Object不是一个函数式接口</li><li>当我们想使用Lambda的时候，需要为其提供一个函数式接口</li><li>方法引用:<code>rrays.sort(strings,String::compareToIgnoreCase)</code>,其实也很好理解，因为Lambda是函数</li><li>Comparator函数式接口</li></ul><h5 id="Lambda表达式的变量作用域"><a href="#Lambda表达式的变量作用域" class="headerlink" title="Lambda表达式的变量作用域"></a>Lambda表达式的变量作用域</h5><ul><li>Lambda中的变量<ul><li>代码块中声明的，自己的</li><li>参数传入的</li><li><strong>自由变量</strong>，如何保证Lambda执行的时候，这些外部的变量还存在，没有被销毁？</li></ul></li><li>捕获，闭包：Lambda会存储自由变量的值，称为捕获。Lambda的代码块以及自由变量组成一个<strong>闭包</strong></li><li><strong>Lambda中只能引用值不会改变的变量&#x2F;常量</strong></li><li><strong>Lambda的体和块有相同的作用域</strong>，所以块中不能定义与Lambda同一块中的已有变量。</li></ul><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><blockquote><p><a href="https://www.cnblogs.com/dolphin0520/p/3811445.html">博客</a></p></blockquote><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><ul><li>定义在另一个类中的类。</li><li><strong>并不是每个外部类的对象实例都有一个内部类实例</strong>，内部类实例对象是由外部类的方法来触发创建的。</li><li>特点：<ul><li><strong>内部类可以访问外部类的实例域</strong>，因为内部类具有外部类的引用。<ul><li>访问的外部实例域必须是final，这个和Lambda类似。</li><li>内部类对象中有一个隐式引用，它指向创建它的外部类对象（在内部类的构造函数中记录）。</li></ul></li><li>局部内部类对同一个包中的其他类不可见</li><li>创建内部类的前提是必须先创建外部类</li></ul></li></ul><h5 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h5><ul><li>定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</li><li>和局部变量一样，不能有public、protected、private以及static修饰符的。</li></ul><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><ul><li>只创建这个类的对象，但并没有为该类提供名字。</li><li>使用的最多，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。</li><li>一般只用在事件监听，接口回调等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ActionListener</span> <span class="hljs-variable">listener</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AcitonListener</span>() &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent event)</span>&#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>类似的，在安卓SDK，Swing中用的很多，能够简化代码。但有了Lambda，还能够更简化。</li></ul><h5 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h5><ul><li>多一个static关键字，不需要依附外部类而存在。</li></ul><h5 id="对比Lambda表达式和匿名内部类"><a href="#对比Lambda表达式和匿名内部类" class="headerlink" title="对比Lambda表达式和匿名内部类"></a>对比Lambda表达式和匿名内部类</h5><ul><li>匿名内部类仍然是类，编译会生成.class文件，Lambda通过invokedynamic指令插入到主类对应的位置执行</li><li>对于匿名类，关键词 this 解读为匿名类，而对于 Lambda 表达式，关键词 this 解读为写就 Lambda 的外部类。</li><li>Java 编译器编译 Lambda 表达式并将他们转化为类里面的私有函数</li></ul><h3 id="Java异常"><a href="#Java异常" class="headerlink" title="Java异常"></a>Java异常</h3><h5 id="异常层次结构"><a href="#异常层次结构" class="headerlink" title="异常层次结构"></a>异常层次结构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">- Throwable<br>  - Error<br>    - Java运行时系统内部错误，以及资源耗尽错误<br>    - 应用程序无法抛出，由系统自动抛出，必然导致程序终止<br>  - Exception<br>    - IOExpection<br>      - 与程序无关，而与IO等有关的错误<br>    - RuntimeException<br>      - 由程序本身错误导致的异常（数组越界，<span class="hljs-literal">null</span>指针，错误类型转换）<br></code></pre></td></tr></table></figure><h5 id="受查与非受查异常"><a href="#受查与非受查异常" class="headerlink" title="受查与非受查异常"></a>受查与非受查异常</h5><ul><li><strong>非受查异常</strong>：Error以及RuntimeException，不需要显示声明，因为这些异常是可以努力避免的，处理它们比消除它们要好多了。</li><li><strong>受查异常</strong>：IOException，<strong>编译器会检查程序是否为这类异常提供了异常处理器</strong>，需要在程序中显示声明</li><li>声明受查异常<ul><li>一个方法不仅可以告诉编译器参数和返回值，还可以告诉编译器可能存在的异常</li><li>什么时候需要给方法声明受查异常<ul><li>1.方法的内部调用了某个抛出受查异常的方法</li><li>2.方法内部通过throw抛出了一个受查异常</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 声明受查异常，是throws不是throw，因为可以是一个异常列表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFileFunc</span><span class="hljs-params">(File file)</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123; &#125;<br><span class="hljs-comment">// 抛出一个异常</span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>();<br></code></pre></td></tr></table></figure><h5 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h5><ul><li>try-catch语句<ul><li>若try子句中没有异常则跳过catch子句，程序正常返回。</li><li>try子句中发生错误，终止try子句执行，<strong>程序无返回值</strong>。<ul><li>若catch子句能够捕获异常，则直接执行catch子句中的处理语句。</li><li>若catch子句无法捕获，则将该异常传递到上级调用方法来处理。</li></ul></li></ul></li><li>处理策略<ul><li>对于知道如何处理的受检异常，则直接捕获处理</li><li>对于不知道如何处理的受检异常，则传递到调用方进行处理</li><li>传递一个异常，需要在方法后添加<code>throws</code>关键字，告知调用方，提供需要的对应的异常处理器</li></ul></li><li>捕获多个异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>  ...<br>&#125; <span class="hljs-keyword">catch</span>(FileNotFoundException e)&#123;<br>  ...<br>&#125; <span class="hljs-keyword">catch</span>(IOException e)&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>再此抛出异常链，<code>e.initCause(pre_e)</code></li></ul><h5 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h5><ul><li>无论是否抛出异常，都会执行</li><li>finally子句中也可能抛出异常，最好将try-catch和try-finally解耦</li><li>当try和finally中都有return的时候，finally中的return先执行，且最终的返回值会被finally覆盖。即，如果finally中有return，try中的return无意义</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">try</span>&#123;  <span class="hljs-comment">// 内部try用于释放资源</span><br>    ...<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    io.close();<br>  &#125;<br>&#125; <span class="hljs-keyword">catch</span> (IOExpection)&#123;<br>  <span class="hljs-comment">// error message</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>带资源的try，自动解决资源释放处理问题</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">Resource</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> ...)&#123;<br>  res...<br>&#125;<span class="hljs-comment">// 执行完毕之后，会自动调用res.close()</span><br></code></pre></td></tr></table></figure><h5 id="使用异常须知"><a href="#使用异常须知" class="headerlink" title="使用异常须知"></a>使用异常须知</h5><ul><li>异常的开销比较大，不要使用异常来实现正常的业务。只在异常情况下使用异常</li><li>不要过于细分异常</li><li>不要压制异常，便于分析程序错误</li></ul><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><ul><li>断言机制允许在测试期间向代码中插入一些检查语句，代码发布之后，会自动移除</li><li>关键字，assert</li><li>一般用不到</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>大脑Cache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大脑Cache系列--Java快速梳理，方便随时load到大脑，减少低级bug (一)</title>
    <link href="/2022/01/02/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97--Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/01/02/%E5%A4%A7%E8%84%91Cache%E7%B3%BB%E5%88%97--Java%E5%BF%AB%E9%80%9F%E6%A2%B3%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><ul><li>Java程序常常会遇到一些蛋疼的bug，最后发现，都是在一些很基础的方面造成的。大量的时间花在调试代码找低级bug上是十分没有性价比的。所以，再系统梳理下Java，是十分必要的。</li><li>已经反复学习和使用Java多次了，但只要有段时间没用Java之后，每次使用前都想要重头再梳理一遍。本文章将更注重Java知识的系统性，而不是细节性。</li><li>本文是本人大脑的专属Cache，所以逻辑上可能只有我自己能够看懂，见谅。</li></ul></blockquote><h3 id="一、目录"><a href="#一、目录" class="headerlink" title="一、目录"></a>一、目录</h3><ul><li>数据类型，字符串，数组</li><li>基础语句语法</li><li>类与对象</li></ul><span id="more"></span><h3 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h3><blockquote><ul><li>其实还是有很多基础知识，是自己平时写代码的时候没有注意到的，而这很容易导致一些低级bug，耗费大量的调试时间。</li></ul></blockquote><h5 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h5><ul><li>编译命令: javac Main.java，.java代码成为.class字节码。<ul><li>JIT编译器：编译与解释共存，JIT能够将热点代码直接编译成机器码，直接再JVM上执行。</li></ul></li><li>运行:java Main， JVM加载字节码，解释成机器码执行。</li><li>版本：java -version</li></ul><h5 id="8种基本类型"><a href="#8种基本类型" class="headerlink" title="8种基本类型"></a>8种基本类型</h5><ul><li>整数：byte(8)，short(16)，int(32)，long(64)</li><li>浮点：float(32)，double(64)</li><li>Unicode编码的char（16位，两个字节），相当于一个整型值（ASCII）</li><li>boolean（1）</li><li>因为JVM的存在，各数据类型的取值范围与具体的机器是无关的。</li><li>基础数据类型存储在栈中，不存储在堆上。</li></ul><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><ul><li>java的整形均是有<strong>符号的</strong>，计算整型的数据范围</li><li>注意：在java中，为了保障移植性，<strong>整型的范围与实际的机器无关（C和C++中整型范围和目标平台是相关的）</strong>，JVM解决了不同机器整型之间的差别。</li><li>byte：1字节，一般很少用，用在底层文件处理，或者占用存储空间的大数组</li><li>short：2字节，和byte用处类似</li><li>int：4字节，最常用</li><li>long：8字节，比如需要表示星球上的居住人数，可以使用long，后缀可以加一个L或者l标识</li><li>更易读的整数方式：1_000_000, java编译器会自动去除这些下划线。</li></ul><h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><ul><li>float 4字节，有效位6-7位 </li><li>double 8字节，有效位15位</li><li><strong>默认为double，一般也很少用float（float的精度一般很难满足需求），除非在需要处理或者存储大量数据</strong></li><li>double后缀D或d，float后缀F或者f</li><li>特殊浮点数值（一般用不到）<ul><li>正无穷大：Double.POSITIVE_INFINITY</li><li>负无穷大: Double.NEGATIVE_INFINITY</li><li>非数字: Double.NaN, 判断用Double.isNaN(n),不能用 &#x3D;&#x3D; 号</li></ul></li></ul><h5 id="字符类型char"><a href="#字符类型char" class="headerlink" title="字符类型char"></a>字符类型char</h5><ul><li>Java的char采用Unicode编码</li><li>占用两个字节</li><li>‘A’,”A”的区别：前者是字符类型常量，占两个字节，后者是字符串常量，存储在堆上。</li></ul><h5 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h5><ul><li><strong>和C++不一样，整型和boolean之间不能相互转换</strong></li></ul><h5 id="大数值-BigInteger-BigDecimal"><a href="#大数值-BigInteger-BigDecimal" class="headerlink" title="大数值 BigInteger BigDecimal"></a>大数值 BigInteger BigDecimal</h5><ul><li>不是一个java基础类型，而是一个java对象，可以表示任意精度的整型和浮点数。</li><li><strong>无法通过运算符计算，需要通过对应的方法进行运算。</strong></li><li>一般可以用在金额的计算。</li></ul><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><ul><li>声明-&gt;初始化-&gt;使用</li><li>Java变量在使用之前必须要进行初始化，否则会编译报错。</li></ul><h5 id="常量与类常量（静态常量）"><a href="#常量与类常量（静态常量）" class="headerlink" title="常量与类常量（静态常量）"></a>常量与类常量（静态常量）</h5><ul><li>final表示常量，只能被赋值一次，且声明的时候必须初始化</li><li>常量名推荐使用全大写,<code>final int NUMBER = 10;</code></li><li>static final，类常量，可以在类中多个方法中使用</li><li>注意：与C++不同，常量不是通过const声明的，Java中const是保留字，但没有实际作用。</li></ul><h5 id="常用的Math静态方法"><a href="#常用的Math静态方法" class="headerlink" title="常用的Math静态方法"></a>常用的Math静态方法</h5><ul><li>平方根：<code>double result = Math.sqrt(double x);</code></li><li>幂运算：<code>double result = Math.pow(x,a);</code></li><li>四舍五入：<code>long n = Math.round(double x);</code></li><li>随机数: <code>Math.random()</code>,返回0-1之间的随机浮点数，比如要取0 - n-1之间的随机数，<code>int result = (int)(Math.random() * n)</code>.</li></ul><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><ul><li>强制类型转换会导致结果被截断成一个完全不同的值，比如(byte)300 的值为 44</li><li>不要将boolean与任何类型之间做类型转换。</li></ul><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5><ul><li>自定义枚举类型</li></ul><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">enum Size &#123;<br><span class="hljs-built_in">  SMALL,</span> LARGE, EXTR<span class="hljs-built_in">A_LARGE</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">Size</span> <span class="hljs-built_in">size</span> = <span class="hljs-built_in">Size</span>.SMALL;<br></code></pre></td></tr></table></figure><h5 id="字符串String类型"><a href="#字符串String类型" class="headerlink" title="字符串String类型"></a>字符串String类型</h5><ul><li>不是Java的基础类型，而是一个预定义类。</li><li><strong>和C++不同，Java中的String不是字符数组，而是一个对象，可以理解为char*指针</strong></li><li>Java 的字符串是<strong>不可变的</strong>，对字符串的修改，实际上是创建了一个新的String对象，目的是为了复用和共享存在堆上的字符串**<ul><li>源码中字符串内容有final修饰。</li></ul></li><li>对字符串修改的需求没有对字符串进行比较的需求大。<ul><li>比较：equals</li><li>修改：StringBuffer，StringBuilder</li></ul></li><li>字符串比较：要使用equal(str)方法，而不能使用 &#x3D;&#x3D; 来判断<ul><li>因Java没有像C++那样，重载了&#x3D;&#x3D;运算符。</li><li>&#x3D;&#x3D;实际判断的是两个字符串变量是否引用的是同一个存储位置，而不是内容。</li><li>所以 &#x3D;&#x3D; 判断的结果是未知的，常常会导致隐藏bug。</li></ul></li><li>字符串判空,<strong>区分空串和Null串</strong><ul><li>if(str !&#x3D; null &amp;&amp; str.length()!&#x3D;0)</li></ul></li><li>当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。</li><li>码点与代码单元<ul><li><strong>最好避免直接操作char，这太底层了</strong></li><li>str.length()返回的是代码单元个数</li><li>str.codePointCount(0,str.length()),统计的是码点数量</li><li>str.charAt(n),获取n位置的代码单元</li><li>关于代码单元与码点：</li></ul></li></ul><h5 id="常用的String-API"><a href="#常用的String-API" class="headerlink" title="常用的String API"></a>常用的String API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">char</span> <span class="hljs-title function_">charAt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">equalsIgnoreCase</span><span class="hljs-params">(String str)</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">startsWith</span><span class="hljs-params">(String prefix)</span>，判断是否是以prefix为前缀<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">endsWith</span><span class="hljs-params">(String suffix)</span>，判断是否以suffix为后缀<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">indexof</span><span class="hljs-params">(String str)</span>, 找到字串str第一次出现的位置，没有则返回-<span class="hljs-number">1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">length</span><span class="hljs-params">()</span>,字符串长度<br><span class="hljs-type">int</span> <span class="hljs-title function_">codePointCount</span><span class="hljs-params">(<span class="hljs-type">int</span> startIndex, <span class="hljs-type">int</span> endIndex)</span>,统计代码点数目<br>String <span class="hljs-title function_">substring</span><span class="hljs-params">(<span class="hljs-type">int</span> begin , <span class="hljs-type">int</span> end)</span>;<br>String <span class="hljs-title function_">toLowerCase</span><span class="hljs-params">()</span>, toUpperCase()<br>Stirng <span class="hljs-title function_">trim</span><span class="hljs-params">()</span>, 删除字符串开始和结尾的空格<br>String <span class="hljs-title function_">join</span><span class="hljs-params">(<span class="hljs-string">&#x27;divider&#x27;</span>,CharSequence...emements)</span><br></code></pre></td></tr></table></figure><h5 id="StringBuilder，StringBuffer字符串构造"><a href="#StringBuilder，StringBuffer字符串构造" class="headerlink" title="StringBuilder，StringBuffer字符串构造"></a>StringBuilder，StringBuffer字符串构造</h5><ul><li>在有构造字符串或者修改字符串的情况下，不适合使用String，因为是不可变的。</li><li>推荐使用StringBuilder（单线程）或者StringBuffer（多线程）。</li><li>使用方式</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">String</span> builder = <span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuilder</span>(); <span class="hljs-comment">// 创建一个构造器</span><br>builder.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>builder.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;world&quot;</span>); <span class="hljs-comment">// 追加字符或者字符串</span><br><span class="hljs-type">String</span> str = builder.<span class="hljs-built_in">toString</span>(); <span class="hljs-comment">// 构造String对象</span><br><span class="hljs-comment">// 其他api</span><br>builder.<span class="hljs-built_in">setCharAt</span>(index,<span class="hljs-type">char</span>)<br>builder.<span class="hljs-built_in">delete</span>(start,end)<br>builder.<span class="hljs-built_in">insert</span>(offset,string)<br></code></pre></td></tr></table></figure><ul><li>StringBuilder的前身是StringBuffer，但是StringBuffer的效率要低一些，因为它是线程安全的，允许多线程操作</li><li>而StringBuilder是非线程安全的，一般在单线程的应用。而在并发中使用StringBuffer</li><li>他们的API是一样的</li></ul><h5 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h5><ul><li>从控制台读取基础数据类型</li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs q">Scanner <span class="hljs-built_in">scan</span> = new Scanner(System.in); <span class="hljs-comment">//创建scanner，并与标准输入关联,System.in的类型为InputStream</span><br><span class="hljs-built_in">scan</span>.nextLine();<br><span class="hljs-built_in">scan</span>.<span class="hljs-built_in">next</span>();<br><span class="hljs-built_in">scan</span>.nextInt();<br><span class="hljs-built_in">scan</span>.nextDouble();<br><span class="hljs-built_in">scan</span>.hasNext();<br><span class="hljs-built_in">scan</span>.hasNextInt();<br></code></pre></td></tr></table></figure><ul><li>从控制台读取密码</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">// java se <span class="hljs-number">6</span> 提供了Console类实现读取密码<br>Console console <span class="hljs-operator">=</span> System.console()<span class="hljs-comment">;</span><br>Stirng userName <span class="hljs-operator">=</span> console.readLine(<span class="hljs-string">&quot;UserName:&quot;</span>)<span class="hljs-comment">;</span><br>char [] psd <span class="hljs-operator">=</span> console.readPassword(<span class="hljs-string">&quot;Password:&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h5 id="字符文件输入输出"><a href="#字符文件输入输出" class="headerlink" title="字符文件输入输出"></a>字符文件输入输出</h5><ul><li>读取字符文件</li></ul><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">Scanner <span class="hljs-built_in">scan</span> = new Scanner(Path.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;pathstring&quot;</span>),<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">// 路径是相对于Java虚拟机启动路径的相对位置</span><br><span class="hljs-built_in">scan</span>.readLine()....等一系列方法<br></code></pre></td></tr></table></figure><ul><li>写字符文件</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">PrintWriter <span class="hljs-keyword">out</span> = <span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-string">&quot;filename.txt&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;hhh&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>对于处理文件的Scanner以及PrintWriter，需要在方法中处理异常</li></ul><h5 id="Java的块作用域"><a href="#Java的块作用域" class="headerlink" title="Java的块作用域"></a>Java的块作用域</h5><ul><li><strong>和C++不一样，Java不允许在嵌套块中重复定义一个变量，会编译错误</strong></li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel">&#123;<br>  <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>;<br>  &#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>; // 这种写法在java中是编译不过的<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="switch-case-break"><a href="#switch-case-break" class="headerlink" title="switch case break"></a>switch case break</h5><ul><li>虽然很简单，但周围很多人都会用错</li><li>break的意思是，本case如果命中了，在执行结束之后，中断之后的case检查，直接返回。</li><li>多个case可以公用同一个处理函数</li><li>case标签的类型可以是char，4种整型，枚举常量，以及字符串常量（Java7开始支持）</li></ul><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li><p>数组声明：int [] array;</p></li><li><p>数组初始化： array &#x3D; new int [100];</p><ul><li>需要指定数组初始大小，可以是整型n变量，数组创建之后大小无法更改。（如果需要，使用数组列表）</li><li>整型数组所有元素初始化为0，boolean初始化为false，对象类型初始化为null</li></ul></li><li><p>数组元素个数：array.length</p></li><li><p>数组for循环：for(int item : array)</p></li><li><p>数组拷贝</p><ul><li>浅拷贝：直接将一个数据变量的值赋值给另一个数组变量，两个数组变量引用的是堆中的同一个数组，对一个的修改会影响到另一个</li><li>深拷贝：在原来的基础上，新创建一个一模一样的数组，或者更长的数组。Array提供了copyOf方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> [] newArray = Array.copyOf(array,array.length+<span class="hljs-number">10</span>); <span class="hljs-comment">// 拷贝array数组，长度加10</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Java中的数据是在堆上创建的，相当于C++中的<code>int * a = new int[30];</code>,而不是<code>int a[10];</code>,这是在栈中的数组。</p></li><li><p>多维数组：数组的元素还是数组而已，且Java还支持不规则的数组（行列不一定要求是整齐的），C++是不支持的</p></li></ul><h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><ul><li>类与对象的关系：模板，实例</li><li>类之间的三种关系</li><li>对象与对象变量（对象引用）<ul><li>对象实例存储在堆上，对象引用存储在栈中。</li><li>一个对象实例可以被多个变量引用，一个变量可以引用0或1个对象实例。</li></ul></li><li>预定义类（String，Date，LocalDate）与自定义类</li><li>Java多源文件的使用：Java编译器内置了类似UNIX的make功能，在编译的时候，能够自动查找需要依赖的其他类，有class文件就直接使用，没有则查找java文件并编译。</li><li>Java中，所有的方法都必须包含在类中</li><li>private私有域，只有属于同一个类的对象（本身，其他同类对象）才可以访问。</li><li>final常量、final方法：</li><li>静态变量、静态常量、静态方法</li><li>静态方法中不能访问非静态实例域，但可以访问静态域。</li><li>main()方法是一个静态方法，它不对任何对象进行操作，负责在程序启动的时候创建对象。</li><li>每个类都可以实现一个main方法，用来进行单元测试，在执行完整Application时候，每个单元中的main并不会执行。</li></ul><h5 id="对象构造与构造函数"><a href="#对象构造与构造函数" class="headerlink" title="对象构造与构造函数"></a>对象构造与构造函数</h5><ul><li>构造函数：Java的对象都是在堆上构造的，通过new操作符在堆上创建新对象。构造函数在new对象的时候被调用。<ul><li>与C++中对象的构造做区分，C++中支持在栈和堆上创建对象，Java对象与后者类似。</li></ul></li><li>构造函数不允许被重写Override</li><li>推荐在自定义多参数构造函数的时候，提供一个空参数的构造函数<ul><li>因为若子类在构造函数中没有通过super方式调用父类构造函数，Java会默认调用父类的无参数构造函数。若父类没有空构造函数，则会编译错误。</li></ul></li></ul><h5 id="对象域的初始化"><a href="#对象域的初始化" class="headerlink" title="对象域的初始化"></a>对象域的初始化</h5><ul><li>三种域初始化方式：在构造器中初始化，声明中初始化，在初始化块</li><li>在用户没给构造函数的时候，系统会自动提供一个无参构造函数，一旦用户提供了，系统就不再提供无参构造函数。</li><li>对象中的域，默认被初始化为0，false，以及null</li><li>域的初始化也可以直接在声明时进行，好习惯是在声明变量域的时候，就给个安全的初始值。（C++中是不允许的，只能通过构造函数初始化域）</li><li>初始化块：一个或多个代码块，只要构造类对象，这些初始化块就一定会执行，一般用于初始化比较复杂的情况。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>  <span class="hljs-comment">// 初始化块</span><br>  <span class="hljs-keyword">static</span><br>  &#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(); <br>    id = generator.nextInt(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 生成0-999的随机数</span><br>    System.out.println(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">//也可以执行非初始化语句的</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>具体的域初始化步骤</li><li>1.所有数据域被初始化为0，false、null</li><li>2.按照类中各个数据域声明出现的前后顺序，执行各自的初始化语句以及初始化块。</li><li>3.执行构造器内容</li></ul><h5 id="对象析构-finalize方法"><a href="#对象析构-finalize方法" class="headerlink" title="对象析构 finalize方法"></a>对象析构 finalize方法</h5><ul><li>Java有自动的垃圾回收器，所以不像C++，没有显式的析构器。</li><li>可以为类添加一个finalize方法，该方法在对象被清楚之前调用。</li><li><strong>实际应用中，避免在finalize中去释放资源，因为finalize什么时候被执行是无法确定的</strong></li><li>对于一些资源的使用，要提供一个close方法，在使用完毕后调用。</li><li>可以通过Runtime.addShutdownHook 方法来添加关闭钩子的方式更好的实现。</li></ul><h5 id="方法参数传递"><a href="#方法参数传递" class="headerlink" title="方法参数传递"></a>方法参数传递</h5><ul><li>Java的参数传递是<strong>传值调用</strong>的，方法得到的是参数的拷贝，且<strong>方法内无法修改传递进来的参数</strong>。</li><li>对于基本数据类型，直接传入的是数据拷贝，而对于对象，传入的是对象引用的拷贝（<strong>容易理解为传引用调用，但实际是通过传值调用实现的，只是这里的值是对象引用</strong>）。</li><li>对于基本数据类型参数，参数传递不会改变参数变量的值。</li><li>对于对象引用参数，方法内可以通过对象应用去修改对象内容。</li><li>对于对象引用参数，无法将对象引用参数指向另一个新对象。</li></ul><h5 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h5><ul><li>重载：overloading，多个方法，有相同的名字，但有不同的参数列表。</li><li>重载解析：编译器负责根据参数列表，匹配正确的函数。</li><li>函数签名：函数名+参数列表，<strong>注意，返回类型不属于函数签名，不能通过不同的返回类型来重载</strong></li></ul><h5 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h5><ul><li>通过包来组织类，文件目录方式，避免重名</li><li>import导入类、静态导入</li><li>将类放入包中：<ul><li>1.类源代码开头添加 package path; （没有该行，则该类属于默认包）</li><li>2.将类源文件放在package对应的问价夹中</li></ul></li><li><strong>编译器在编译文件的时候是不关注目录结构的，但定位一个类的时候，通过包名和类名来定位。所以，必须将类源代码放在package对应的文件夹下，否则虚拟机找不到类</strong></li><li>包作用域：不添加public和private时，默认的作用域。同一个包中都可以访问。</li></ul><h5 id="类路径"><a href="#类路径" class="headerlink" title="类路径"></a>类路径</h5><ul><li>从三个地方加载类<ul><li>1.JRE中的JAR文件</li><li>2.第三方JAR文件</li><li>3.用户源程序目录</li></ul></li><li>通过<code>java -classpath </code>或者设置<code>CLASSPATH</code>环境变量来设置类路径。</li></ul><h5 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h5><ul><li>javadoc，由源文件生成html</li><li>类注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  类注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">hhh</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>方法注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* desc hh</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hh</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;&#125;<br></code></pre></td></tr></table></figure><ul><li>域注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* desc</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> id;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>欲知后事如何，且听下回，太长了，逃。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>大脑Cache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的一些进阶技能</title>
    <link href="/2021/11/01/Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E8%BF%9B%E9%98%B6%E6%8A%80%E8%83%BD/"/>
    <url>/2021/11/01/Linux%E7%9A%84%E4%B8%80%E4%BA%9B%E8%BF%9B%E9%98%B6%E6%8A%80%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>好好学学Linux，以后用得到 </p></blockquote><h3 id="一些关于Linxu想知道的疑问解决"><a href="#一些关于Linxu想知道的疑问解决" class="headerlink" title="一些关于Linxu想知道的疑问解决"></a>一些关于Linxu想知道的疑问解决</h3><h5 id="1-服务Service与Demand的区别"><a href="#1-服务Service与Demand的区别" class="headerlink" title="1. 服务Service与Demand的区别"></a>1. 服务Service与Demand的区别</h5><p>我的理解，服务是能够常驻在系统后台并提供一些系统的或者网络功能。服务其实是能够提供某个功能的意思，但是既然是一个功能，那一定需要有个程序去执行吧。Demand意思是守护的意思，它便是达成这个service的程序，Demand其实和Service也不需要完全区分。</p><span id="more"></span><h5 id="2-进程、线程以及协程的区别"><a href="#2-进程、线程以及协程的区别" class="headerlink" title="2. 进程、线程以及协程的区别"></a>2. 进程、线程以及协程的区别</h5><ul><li>进程<ul><li>是系统资源分配的最小单位, 系统由一个个进程(程序)组成。</li><li>进程的创建和销毁都是相对于系统资源,所以是一种比较昂贵的操作。</li><li>进程是抢占式的争夺CPU运行自身,而CPU单核的情况下同一时间只能执行一个进程的代码,但是多进程的实现则是通过CPU飞快的切换不同进程,因此使得看上去就像是多个进程在同时进行.</li><li>进程间的通信：不同进程之间的通信主要通过进程间调用IPC来实</li><li>进程是系统分配资源的最小单位</li></ul></li><li>线程<ul><li>线程属于进程，一个进程可以创建多个线程。</li><li>线程共享进程的内存地址空间，多个线程之间也可共享内存。</li><li>线程间的通信：进程相当于一个容器，其中的线程都可以访问容器中的东西。所以线程间的通信可以直接通过全局变量来通信。</li><li>引入锁机制：解决多个线程同时读写一个地址变量带来的不可预期的后果。</li><li>线程是CPU调度的最小单位。</li></ul></li><li>协程<ul><li>协程是属于线程的，协程程序在线程中运行，也叫微线程。</li><li>协程没有线程的上下文切换消耗。协程的调度切换是用户(程序员)手动切换的,因此更加灵活,因此又叫用户空间线程.</li><li>原子操作性。由于协程是用户调度的，所以不会出现执行一半的代码片段被强制中断了，因此无需原子操作锁。</li><li>线程进程都是同步机制，而协程则是异步</li></ul></li></ul><h3 id="Linux服务"><a href="#Linux服务" class="headerlink" title="Linux服务"></a>Linux服务</h3><h5 id="1-定时任务服务-crontab"><a href="#1-定时任务服务-crontab" class="headerlink" title="1. 定时任务服务 crontab"></a>1. 定时任务服务 crontab</h5><ul><li>比如在下订单之后，会有30分钟的支付时间，过期之后，取消订单。</li></ul><h5 id="2-日期同步服务-Ntpdate"><a href="#2-日期同步服务-Ntpdate" class="headerlink" title="2. 日期同步服务 Ntpdate"></a>2. 日期同步服务 Ntpdate</h5><ul><li></li></ul><h5 id="3-日志切割服务-Logrotate"><a href="#3-日志切割服务-Logrotate" class="headerlink" title="3. 日志切割服务 Logrotate"></a>3. 日志切割服务 Logrotate</h5><ul><li></li></ul><h5 id="4-进程管理-supervisor"><a href="#4-进程管理-supervisor" class="headerlink" title="4. 进程管理 supervisor"></a>4. 进程管理 supervisor</h5><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>好好学学Linux，以后用得到</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux 解压命令汇总</title>
    <link href="/2021/11/01/linux-%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <url>/2021/11/01/linux-%E8%A7%A3%E5%8E%8B%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<blockquote><p>搞定Linux文件打包、解压、压缩</p></blockquote><h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><ul><li>解包：tar xvf FileName.tar</li><li>打包：tar cvf FileName.tar DirName</li><li>（注：tar是打包，不是压缩！）</li></ul><span id="more"></span><h3 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h3><ul><li>解压1：gunzip FileName.gz</li><li>解压2：gzip -d FileName.gz</li><li>压缩：gzip FileName</li></ul><h3 id="tar-gz-和-tgz"><a href="#tar-gz-和-tgz" class="headerlink" title=".tar.gz 和 .tgz"></a>.tar.gz 和 .tgz</h3><ul><li>解压：tar zxvf FileName.tar.gz</li><li>压缩：tar zcvf FileName.tar.gz DirName</li></ul><h3 id="bz2"><a href="#bz2" class="headerlink" title=".bz2"></a>.bz2</h3><ul><li>解压1：bzip2 -d FileName.bz2</li><li>解压2：bunzip2 FileName.bz2</li><li>压缩： bzip2 -z FileName</li></ul><h3 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title=".tar.bz2"></a>.tar.bz2</h3><ul><li>解压：tar jxvf FileName.tar.bz2</li><li>压缩：tar jcvf FileName.tar.bz2 DirName</li></ul><h3 id="bz"><a href="#bz" class="headerlink" title=".bz"></a>.bz</h3><ul><li>解压1：bzip2 -d FileName.bz</li><li>解压2：bunzip2 FileName.bz</li><li>压缩：未知</li></ul><h3 id="tar-bz"><a href="#tar-bz" class="headerlink" title=".tar.bz"></a>.tar.bz</h3><ul><li>解压：tar jxvf FileName.tar.bz</li><li>压缩：未知</li></ul><h3 id="Z"><a href="#Z" class="headerlink" title=".Z"></a>.Z</h3><ul><li>解压：uncompress FileName.Z</li><li>压缩：compress FileName</li></ul><h3 id="tar-Z"><a href="#tar-Z" class="headerlink" title=".tar.Z"></a>.tar.Z</h3><ul><li>解压：tar Zxvf FileName.tar.Z</li><li>压缩：tar Zcvf FileName.tar.Z DirName</li></ul><h3 id="zip"><a href="#zip" class="headerlink" title=".zip"></a>.zip</h3><ul><li>解压：unzip FileName.zip</li><li>压缩：zip FileName.zip DirName</li></ul><h3 id="rar"><a href="#rar" class="headerlink" title=".rar"></a>.rar</h3><ul><li>解压：rar x FileName.rar</li><li>压缩：rar a FileName.rar DirName</li></ul><h3 id="lha"><a href="#lha" class="headerlink" title=".lha"></a>.lha</h3><ul><li>解压：lha -e FileName.lha</li><li>压缩：lha -a FileName.lha FileName</li></ul><h3 id="rpm"><a href="#rpm" class="headerlink" title=".rpm"></a>.rpm</h3><ul><li>解包：rpm2cpio FileName.rpm | cpio -div</li></ul><h3 id="deb"><a href="#deb" class="headerlink" title=".deb"></a>.deb</h3><ul><li>解包：ar p FileName.deb data.tar.gz | tar zxf -</li></ul><h3 id="gzip-命令"><a href="#gzip-命令" class="headerlink" title="gzip 命令"></a>gzip 命令</h3><ul><li><p>减少文件大小有两个明显的好处，一是可以减少存储空间，二是通过网络传输文件时，可以减少传输的时间。gzip 是在 Linux 系统中经常使用的一个对文件进行压缩和解压缩的命令，既方便又好用。</p></li><li><p>语法：gzip [选项] 压缩（解压缩）的文件名该命令的各选项含义如下：</p></li><li><p>-c 将输出写到标准输出上，并保留原有文件。-d 将压缩文件解压。-l 对每个压缩文件，显示下列字段：     压缩文件的大小；未压缩文件的大小；压缩比；未压缩文件的名字-r 递归式地查找指定目录并压缩其中的所有文件或者是解压缩。-t 测试，检查压缩文件是否完整。-v 对每一个压缩和解压的文件，显示文件名和压缩比。-num 用指定的数字 num 调整压缩的速度，-1 或 –fast 表示最快压缩方法（低压缩比），-9 或–best表示最慢压缩方法（高压缩比）。系统缺省值为 6。指令实例：</p></li><li><p>gzip *% 把当前目录下的每个文件压缩成 .gz 文件。gzip -dv *% 把当前目录下每个压缩的文件解压，并列出详细的信息。gzip -l *% 详细显示例1中每个压缩的文件的信息，并不解压。gzip usr.tar% 压缩 tar 备份文件 usr.tar，此时压缩文件的扩展名为.tar.gz。</p></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实都可以直接查到，争取早日孰能生巧吧。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
